# tests/test_refactored_replicate_agent.py

import pytest
import tempfile
from pathlib import Path
from typing import Dict, List
from unittest.mock import Mock, patch, MagicMock

# –ú–æ–∫–∞–µ–º replicate –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
replicate_mock = MagicMock()
replicate_mock.Client = MagicMock
replicate_mock.exceptions.ReplicateError = Exception

with patch.dict('sys.modules', {'replicate': replicate_mock}):
    from pipeline.replicate_agent import ReplicateAgent


class TestRefactoredReplicateAgent:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ReplicateAgent."""

    @pytest.fixture
    def api_token(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π API —Ç–æ–∫–µ–Ω."""
        return "test_replicate_token_12345"

    @pytest.fixture
    def agent(self, api_token):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ReplicateAgent –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        with patch('pipeline.replicate_agent.replicate', replicate_mock):
            return ReplicateAgent(api_token=api_token)

    @pytest.fixture
    def sample_audio_file(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as f:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ)
            f.write(b"fake audio data" * 5000)  # ~70KB
            temp_path = Path(f.name)
        
        yield temp_path
        
        # –û—á–∏—Å—Ç–∫–∞
        if temp_path.exists():
            temp_path.unlink()

    def test_initialization_with_base_classes(self, agent):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        assert hasattr(agent, 'log_with_emoji')  # BaseAgent
        assert hasattr(agent, 'validate_audio_file')  # ValidationMixin
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert agent.name == "ReplicateAgent"
        assert agent.api_token == "test_replicate_token_12345"
        assert agent.MODEL_NAME == "thomasmol/whisper-diarization:1495a9cddc83b2203b0d8d3516e38b80fd1572ebc4bc5700ac1da56a9b3ed886"

    def test_validate_replicate_token_valid(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ API —Ç–æ–∫–µ–Ω–∞."""
        # –í–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        valid_tokens = ["test_token_123", "r8_1234567890abcdef", "replicate_api_token_long_enough"]
        
        for token in valid_tokens:
            agent.validate_replicate_token(token)  # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫

    def test_validate_replicate_token_invalid(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ API —Ç–æ–∫–µ–Ω–∞."""
        # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
        with pytest.raises(ValueError, match="API —Ç–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"):
            agent.validate_replicate_token("")
        
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        with pytest.raises(ValueError, match="API —Ç–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"):
            agent.validate_replicate_token("short")
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        with pytest.raises(ValueError, match="API —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"):
            agent.validate_replicate_token(123)

    def test_validate_replicate_params_valid(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Replicate."""
        issues = agent.validate_replicate_params(
            sample_audio_file, num_speakers=2, language="en", prompt="Test prompt"
        )
        assert len(issues) == 0

    def test_validate_replicate_params_invalid_num_speakers(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ num_speakers."""
        # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        issues = agent.validate_replicate_params(sample_audio_file, num_speakers=-1)
        assert len(issues) >= 1
        assert any("–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0" in issue for issue in issues)
        
        # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
        issues = agent.validate_replicate_params(sample_audio_file, num_speakers=100)
        assert len(issues) >= 1
        assert any("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ" in issue for issue in issues)

    def test_validate_replicate_params_invalid_language(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞."""
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫
        issues = agent.validate_replicate_params(sample_audio_file, language="invalid_lang")
        assert len(issues) >= 1
        assert any("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫" in issue for issue in issues)

    def test_validate_replicate_params_invalid_prompt(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ prompt."""
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π prompt
        long_prompt = "x" * 1001
        issues = agent.validate_replicate_params(sample_audio_file, prompt=long_prompt)
        assert len(issues) >= 1
        assert any("—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" in issue for issue in issues)

    def test_validate_replicate_audio_file_valid(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
        issues = agent.validate_replicate_audio_file(sample_audio_file)
        assert len(issues) == 0

    def test_validate_replicate_audio_file_too_large(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞."""
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (>500MB)
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as f:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º ~501MB (–∏–º–∏—Ç–∞—Ü–∏—è)
            chunk = b"x" * (1024 * 1024)  # 1MB
            for _ in range(501):  # 501MB > 500MB
                f.write(chunk)
            large_file = Path(f.name)
        
        try:
            issues = agent.validate_replicate_audio_file(large_file)
            assert len(issues) >= 1
            assert any("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π" in issue for issue in issues)
        finally:
            if large_file.exists():
                large_file.unlink()

    def test_supported_languages(self, agent):
        """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤."""
        expected_languages = ["auto", "en", "de", "fr", "es", "it", "pt", "ru", "zh", "ja", "ko"]
        
        for lang in expected_languages:
            assert lang in agent.SUPPORTED_LANGUAGES
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —è–∑—ã–∫–∏ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞–Ω–∏—è
        for lang, description in agent.SUPPORTED_LANGUAGES.items():
            assert isinstance(description, str)
            assert len(description) > 0

    @patch('builtins.open', create=True)
    def test_run_with_performance_metrics(self, mock_open, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        # –ú–æ–∫–∞–µ–º —Ñ–∞–π–ª
        mock_file = MagicMock()
        mock_open.return_value = mock_file
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç Replicate
        mock_output = {
            "segments": [
                {
                    "start": 0.0,
                    "end": 2.0,
                    "text": "Hello world",
                    "speaker": "SPEAKER_00",
                    "avg_logprob": -0.5,
                    "words": []
                }
            ]
        }
        
        agent.client.run = Mock(return_value=mock_output)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        result = agent.run(sample_audio_file, num_speakers=2, language="en")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert isinstance(result, list)
        assert len(result) >= 1
        assert result[0]["text"] == "Hello world"
        assert result[0]["speaker"] == "SPEAKER_00"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        assert agent._operation_count > 0
        assert agent._error_count == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics = agent.log_performance_metrics()
        assert metrics['operation_count'] >= 1
        assert metrics['success_rate'] == 100.0

    def test_run_with_error_handling(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ BaseAgent."""
        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        nonexistent_file = Path("/nonexistent/file.wav")
        
        # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ gracefully
        with pytest.raises(Exception):
            agent.run(nonexistent_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        assert agent._error_count > 0

    def test_unified_logging_usage(self, agent):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ log_with_emoji –¥–æ—Å—Ç—É–ø–µ–Ω
        assert hasattr(agent, 'log_with_emoji')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ (–Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫)
        agent.log_with_emoji("info", "üéØ", "Test message")

    @patch('builtins.open', create=True)
    def test_prepare_input_params(self, mock_open, agent, sample_audio_file):
        """–¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Replicate."""
        mock_file = MagicMock()
        mock_open.return_value = mock_file
        
        params = agent._prepare_input_params(
            sample_audio_file, num_speakers=3, language="en", prompt="Test prompt"
        )
        
        assert "file" in params
        assert params["file_url"] == ""
        assert params["num_speakers"] == 3
        assert params["language"] == "en"
        assert params["prompt"] == "Test prompt"

    def test_process_output_dict_format(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è."""
        output = {
            "segments": [
                {
                    "start": 0.0,
                    "end": 2.0,
                    "text": "Test text",
                    "speaker": "SPEAKER_00",
                    "avg_logprob": -0.3
                }
            ]
        }
        
        result = agent._process_output(output)
        
        assert len(result) == 1
        assert result[0]["start"] == 0.0
        assert result[0]["end"] == 2.0
        assert result[0]["text"] == "Test text"
        assert result[0]["speaker"] == "SPEAKER_00"

    def test_process_output_list_format(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞."""
        output = [
            {
                "start": 1.0,
                "end": 3.0,
                "text": "Another test",
                "speaker": "SPEAKER_01"
            }
        ]
        
        result = agent._process_output(output)
        
        assert len(result) == 1
        assert result[0]["start"] == 1.0
        assert result[0]["text"] == "Another test"

    def test_process_output_empty(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
        output = {"segments": []}
        
        result = agent._process_output(output)
        
        assert result == []

    def test_process_output_invalid_format(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞."""
        output = "invalid format"
        
        with pytest.raises(ValueError, match="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Replicate API"):
            agent._process_output(output)

    def test_estimate_cost(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
        cost_info = agent.estimate_cost(sample_audio_file)
        
        assert isinstance(cost_info, dict)
        assert "estimated_cost_usd" in cost_info
        assert "base_cost_usd" in cost_info
        assert "file_size_mb" in cost_info
        assert "note" in cost_info
        
        assert cost_info["base_cost_usd"] == 0.0077
        assert isinstance(cost_info["estimated_cost_usd"], float)
        assert cost_info["estimated_cost_usd"] > 0

    def test_validation_mixin_integration(self, agent):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ValidationMixin."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ ValidationMixin
        assert hasattr(agent, 'validate_language_code')
        assert hasattr(agent, 'validate_voiceprint_ids')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–¥–∞
        valid_lang = agent.validate_language_code("en")
        assert valid_lang == "en"

    def test_error_handling_comprehensive(self, agent):
        """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –±–µ–∑ reraise
        test_error = ValueError("Test error")
        agent.handle_error(test_error, "test_operation", reraise=False)
        
        assert agent._error_count == 1
        assert agent._last_error == test_error

    @patch('builtins.open', create=True)
    def test_performance_tracking(self, mock_open, agent, sample_audio_file):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        mock_file = MagicMock()
        mock_open.return_value = mock_file
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç Replicate
        mock_output = {"segments": [{"start": 0, "end": 1, "text": "test", "speaker": "SPEAKER_00"}]}
        agent.client.run = Mock(return_value=mock_output)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π
        for i in range(3):
            agent.run(sample_audio_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = agent.log_performance_metrics()
        assert metrics['operation_count'] == 3
        assert metrics['total_processing_time'] > 0
        assert metrics['success_rate'] == 100.0

    def test_model_name_constant(self, agent):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏."""
        expected_model = "thomasmol/whisper-diarization:1495a9cddc83b2203b0d8d3516e38b80fd1572ebc4bc5700ac1da56a9b3ed886"
        assert agent.MODEL_NAME == expected_model

    def test_replicate_import_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ replicate."""
        with patch('pipeline.replicate_agent.replicate', None):
            with pytest.raises(ImportError, match="–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ replicate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"):
                ReplicateAgent("test_token")
