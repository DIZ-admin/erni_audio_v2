# tests/test_refactored_merge_agent.py

import pytest
from typing import List, Dict, Any
from unittest.mock import Mock, patch

from pipeline.merge_agent import MergeAgent, MergeMetrics


class TestRefactoredMergeAgent:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ MergeAgent."""

    @pytest.fixture
    def agent(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä MergeAgent –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return MergeAgent(merge_strategy="best_overlap")

    @pytest.fixture
    def sample_diar_segments(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤."""
        return [
            {"start": 0.0, "end": 2.0, "speaker": "SPEAKER_00"},
            {"start": 2.0, "end": 4.0, "speaker": "SPEAKER_01"},
            {"start": 4.0, "end": 6.0, "speaker": "SPEAKER_00"}
        ]

    @pytest.fixture
    def sample_asr_segments(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã ASR —Å–µ–≥–º–µ–Ω—Ç–æ–≤."""
        return [
            {"start": 0.5, "end": 1.5, "text": "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä"},
            {"start": 2.5, "end": 3.5, "text": "–ö–∞–∫ –¥–µ–ª–∞"},
            {"start": 4.5, "end": 5.5, "text": "–û—Ç–ª–∏—á–Ω–æ"}
        ]

    def test_initialization_with_base_classes(self, agent):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        assert hasattr(agent, 'log_with_emoji')  # BaseAgent
        assert hasattr(agent, 'validate_audio_file')  # ValidationMixin
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert agent.name == "MergeAgent"
        assert agent.merge_strategy == "best_overlap"
        assert agent.min_overlap_threshold == 0.1
        assert agent.confidence_threshold == 0.5

    def test_validate_segment_valid(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞."""
        valid_segment = {
            "start": 0.0,
            "end": 2.0,
            "speaker": "SPEAKER_00",
            "text": "Test text"
        }
        
        issues = agent.validate_segment(valid_segment, 0)
        assert len(issues) == 0

    def test_validate_segment_missing_fields(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏."""
        invalid_segment = {
            "text": "Test text"
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç start –∏ end
        }
        
        issues = agent.validate_segment(invalid_segment, 0)
        assert len(issues) >= 2  # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è start –∏ end
        assert any("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'start'" in issue for issue in issues)
        assert any("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'end'" in issue for issue in issues)

    def test_validate_segment_invalid_timestamps(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏."""
        invalid_segment = {
            "start": 2.0,
            "end": 1.0,  # end < start
            "speaker": "SPEAKER_00"
        }
        
        issues = agent.validate_segment(invalid_segment, 0)
        assert len(issues) >= 1
        assert any("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏" in issue for issue in issues)

    def test_validate_segment_negative_timestamps(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏."""
        invalid_segment = {
            "start": -1.0,
            "end": 1.0,
            "speaker": "SPEAKER_00"
        }
        
        issues = agent.validate_segment(invalid_segment, 0)
        assert len(issues) >= 1
        assert any("–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞" in issue for issue in issues)

    def test_validate_segment_wrong_types(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."""
        invalid_segment = {
            "start": "0.0",  # –°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
            "end": "2.0",    # –°—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
            "speaker": 123   # –ß–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        }
        
        issues = agent.validate_segment(invalid_segment, 0)
        assert len(issues) >= 3
        assert any("'start' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º" in issue for issue in issues)
        assert any("'end' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º" in issue for issue in issues)
        assert any("'speaker' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π" in issue for issue in issues)

    def test_validate_segments_overlap(self, agent):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏."""
        overlapping_segments = [
            {"start": 0.0, "end": 2.0, "speaker": "SPEAKER_00"},
            {"start": 1.5, "end": 3.0, "speaker": "SPEAKER_01"}  # –ü–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
        ]
        
        issues = agent.validate_segments_overlap(overlapping_segments)
        assert len(issues) >= 1
        assert any("–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ" in issue for issue in issues)

    def test_validate_segments_comprehensive(self, agent, sample_diar_segments, sample_asr_segments):
        """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤."""
        # –í–∞–ª–∏–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        diar_issues = agent.validate_segments(sample_diar_segments)
        asr_issues = agent.validate_segments(sample_asr_segments)
        
        assert len(diar_issues) == 0
        assert len(asr_issues) == 0

    def test_run_with_performance_metrics(self, agent, sample_diar_segments, sample_asr_segments):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–∏—è–Ω–∏–µ
        result = agent.run(sample_diar_segments, sample_asr_segments)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == len(sample_asr_segments)
        assert all("speaker" in seg for seg in result)
        assert all("confidence" in seg for seg in result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        assert agent._operation_count > 0
        assert agent._error_count == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics = agent.log_performance_metrics()
        assert metrics['operation_count'] >= 1
        assert metrics['success_rate'] == 100.0

    def test_run_with_error_handling(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ BaseAgent."""
        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        invalid_diar = [{"invalid": "data"}]
        invalid_asr = [{"invalid": "data"}]
        
        # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ gracefully
        with pytest.raises(Exception):
            agent.run(invalid_diar, invalid_asr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        assert agent._error_count > 0

    def test_run_empty_inputs(self, agent):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
        # –ü—É—Å—Ç—ã–µ ASR —Å–µ–≥–º–µ–Ω—Ç—ã
        result = agent.run([], [])
        assert result == []
        
        # –ü—É—Å—Ç—ã–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        asr_segments = [{"start": 0.0, "end": 1.0, "text": "test"}]
        result = agent.run([], asr_segments)
        assert len(result) == 1
        assert result[0]["speaker"] == "UNK"

    def test_unified_logging_usage(self, agent):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ log_with_emoji –¥–æ—Å—Ç—É–ø–µ–Ω
        assert hasattr(agent, 'log_with_emoji')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ (–Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫)
        agent.log_with_emoji("info", "üéØ", "Test message")

    def test_merge_strategies(self, agent):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–ª–∏—è–Ω–∏—è."""
        strategies = agent.get_merge_strategies()
        assert "best_overlap" in strategies
        assert "weighted" in strategies
        assert "majority_vote" in strategies
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        agent.set_merge_strategy("weighted")
        assert agent.merge_strategy == "weighted"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        with pytest.raises(ValueError):
            agent.set_merge_strategy("invalid_strategy")

    def test_calculate_overlap(self, agent):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π."""
        seg1 = {"start": 0.0, "end": 2.0}
        seg2 = {"start": 1.0, "end": 3.0}
        
        overlap_duration, overlap_ratio = agent.calculate_overlap(seg1, seg2)
        
        assert overlap_duration == 1.0  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞
        assert overlap_ratio == 0.5     # 50% –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ seg1

    def test_merge_segments_best_overlap(self, agent, sample_diar_segments):
        """–¢–µ—Å—Ç —Å–ª–∏—è–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π best_overlap."""
        asr_seg = {"start": 0.5, "end": 1.5, "text": "Test text"}
        
        merged = agent.merge_segments(asr_seg, sample_diar_segments)
        
        assert merged["speaker"] == "SPEAKER_00"  # –î–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
        assert merged["text"] == "Test text"
        assert "confidence" in merged

    def test_post_processing(self, agent):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤."""
        segments = [
            {"start": 0.0, "end": 1.0, "speaker": "SPEAKER_00", "text": "Hello", "confidence": 0.8},
            {"start": 1.1, "end": 2.0, "speaker": "SPEAKER_00", "text": "world", "confidence": 0.9},  # –ë–ª–∏–∑–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç —Ç–æ–≥–æ –∂–µ —Å–ø–∏–∫–µ—Ä–∞
            {"start": 3.0, "end": 4.0, "speaker": "SPEAKER_01", "text": "Different speaker", "confidence": 0.7}
        ]
        
        processed = agent.post_process_segments(segments)
        
        # –ü–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
        assert len(processed) == 2
        assert processed[0]["text"] == "Hello world"
        assert processed[0]["speaker"] == "SPEAKER_00"

    def test_calculate_merge_metrics(self, agent, sample_diar_segments, sample_asr_segments):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å–ª–∏—è–Ω–∏—è."""
        merged_segments = agent.run(sample_diar_segments, sample_asr_segments, save_metrics=False)
        
        metrics = agent.calculate_merge_metrics(sample_diar_segments, sample_asr_segments, merged_segments)
        
        assert isinstance(metrics, MergeMetrics)
        assert metrics.total_asr_segments == len(sample_asr_segments)
        assert metrics.total_diar_segments == len(sample_diar_segments)
        assert metrics.merged_segments == len(merged_segments)
        assert isinstance(metrics.speaker_distribution, dict)
        assert 0.0 <= metrics.confidence_score <= 1.0

    def test_save_metrics_integration(self, agent, sample_diar_segments, sample_asr_segments):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫."""
        with patch('pathlib.Path.mkdir') as mock_mkdir, \
             patch('builtins.open', create=True) as mock_open:
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–∏—è–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫
            result = agent.run(sample_diar_segments, sample_asr_segments, save_metrics=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            mock_mkdir.assert_called_once()
            mock_open.assert_called_once()

    def test_validation_mixin_integration(self, agent):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ValidationMixin."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ ValidationMixin
        assert hasattr(agent, 'validate_language_code')
        assert hasattr(agent, 'validate_voiceprint_ids')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–¥–∞
        valid_lang = agent.validate_language_code("en")
        assert valid_lang == "en"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é voiceprint IDs
        valid_ids = ["id1", "id2", "id3"]
        agent.validate_voiceprint_ids(valid_ids)  # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫

    def test_error_handling_comprehensive(self, agent):
        """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –±–µ–∑ reraise
        test_error = ValueError("Test error")
        agent.handle_error(test_error, "test_operation", reraise=False)
        
        assert agent._error_count == 1
        assert agent._last_error == test_error

    def test_performance_tracking(self, agent, sample_diar_segments, sample_asr_segments):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π
        for _ in range(3):
            agent.run(sample_diar_segments, sample_asr_segments)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = agent.log_performance_metrics()
        assert metrics['operation_count'] == 3
        assert metrics['total_processing_time'] > 0
        assert metrics['success_rate'] == 100.0
