#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Erni Audio v2

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å pipeline —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
–∏ mock API –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python docker_functional_test.py                    # –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    python docker_functional_test.py --quick            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    python docker_functional_test.py --no-cleanup       # –ù–µ —É–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
"""

import argparse
import json
import logging
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/docker_functional_test.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


class DockerFunctionalTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    
    def __init__(self, cleanup: bool = True):
        self.cleanup = cleanup
        self.container_name = "erni-audio-functional-test"
        self.image_name = "erni-audio-v2:latest"
        self.test_results = {
            "timestamp": datetime.now().isoformat(),
            "tests": {},
            "overall_status": "unknown",
            "errors": [],
            "warnings": []
        }
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        Path("logs").mkdir(exist_ok=True)
        Path("logs/functional_tests").mkdir(exist_ok=True)
    
    def run_command(self, cmd: List[str], timeout: int = 60, capture_output: bool = True) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.debug(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        try:
            result = subprocess.run(
                cmd, 
                timeout=timeout, 
                capture_output=capture_output,
                text=True,
                check=False
            )
            if result.returncode != 0:
                logger.error(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π {result.returncode}: {result.stderr}")
            return result
        except subprocess.TimeoutExpired:
            logger.error(f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout}—Å")
            raise
    
    def setup_test_environment(self) -> bool:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª —Å mock –¥–∞–Ω–Ω—ã–º–∏
        import uuid
        test_env_content = f"""
# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (MOCK –¥–∞–Ω–Ω—ã–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
PYANNOTEAI_API_TOKEN=test_pyannote_{uuid.uuid4().hex[:16]}
PYANNOTE_API_KEY=test_pyannote_{uuid.uuid4().hex[:16]}
OPENAI_API_KEY=test_openai_{uuid.uuid4().hex[:16]}
REPLICATE_API_TOKEN=test_replicate_{uuid.uuid4().hex[:16]}
PYANNOTEAI_WEBHOOK_SECRET=test_webhook_{uuid.uuid4().hex[:16]}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL=DEBUG
MAX_FILE_SIZE_MB=50
MAX_CONCURRENT_JOBS=1
ENABLE_HEALTH_CHECKS=true
ENABLE_PERFORMANCE_METRICS=true
STRICT_MIME_VALIDATION=false
REQUIRE_HTTPS_URLS=false
ENABLE_RATE_LIMITING=false

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_SERVER_PORT=8000
WEBHOOK_SERVER_HOST=0.0.0.0
"""
        
        with open(".env.functional_test", "w") as f:
            f.write(test_env_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        test_files = [
            "tests/samples/Testdatei.m4a",
            "tests/samples/sample_audio.wav"
        ]
        
        available_files = []
        for test_file in test_files:
            if Path(test_file).exists():
                available_files.append(test_file)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
            else:
                logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        
        if not available_files:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
            return False
        
        self.test_files = available_files
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ {len(available_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        return True
    
    def start_container(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        self.run_command(["docker", "stop", self.container_name])
        self.run_command(["docker", "rm", self.container_name])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        cmd = [
            "docker", "run", "-d",
            "--name", self.container_name,
            "--env-file", ".env.functional_test",
            "-p", "8000:8000",
            "-v", f"{Path.cwd()}/data:/app/data",
            "-v", f"{Path.cwd()}/logs:/app/logs",
            "-v", f"{Path.cwd()}/tests:/app/tests",
            "-v", f"{Path.cwd()}/voiceprints:/app/voiceprints",
            "--entrypoint", "sleep",  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º entrypoint
            self.image_name,
            "600"  # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç
        ]
        
        result = self.run_command(cmd)
        
        if result.returncode == 0:
            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            time.sleep(3)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {result.stderr}")
            return False
    
    def test_help_command(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç help –∫–æ–º–∞–Ω–¥—É"""
        logger.info("üìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ help –∫–æ–º–∞–Ω–¥—ã...")
        
        cmd = ["docker", "exec", self.container_name, "python", "speech_pipeline.py", "--help"]
        result = self.run_command(cmd)
        
        if result.returncode == 0 and "speech_pipeline" in result.stdout:
            logger.info("‚úÖ Help –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results["tests"]["help_command"] = {
                "status": "pass",
                "message": "Help –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            }
            return True
        else:
            logger.error("‚ùå Help –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results["tests"]["help_command"] = {
                "status": "fail",
                "message": "Help –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "error": result.stderr
            }
            return False
    
    def test_health_check(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health check"""
        logger.info("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
        
        cmd = ["docker", "exec", self.container_name, "python", "health_check.py", "--json"]
        result = self.run_command(cmd)
        
        if result.returncode == 0:
            try:
                health_data = json.loads(result.stdout)
                status = health_data.get("overall_status", "unknown")
                logger.info(f"‚úÖ Health check —Å—Ç–∞—Ç—É—Å: {status}")
                
                self.test_results["tests"]["health_check"] = {
                    "status": "pass" if status in ["healthy", "warning"] else "fail",
                    "health_status": status,
                    "details": health_data
                }
                return status in ["healthy", "warning"]
            except json.JSONDecodeError:
                logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ health check")
                return False
        else:
            logger.error(f"‚ùå Health check –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
            return False
    
    def test_cost_estimation(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        logger.info("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏...")
        
        if not self.test_files:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
            return False
        
        test_file = self.test_files[0]
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        copy_cmd = ["docker", "cp", test_file, f"{self.container_name}:/app/test_audio.m4a"]
        copy_result = self.run_command(copy_cmd)
        
        if copy_result.returncode != 0:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cmd = ["docker", "exec", self.container_name, "python", "speech_pipeline.py", 
               "/app/test_audio.m4a", "--show-cost-estimate"]
        result = self.run_command(cmd, timeout=120)
        
        if result.returncode == 0 and ("Cost estimate" in result.stdout or "–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏" in result.stdout):
            logger.info("‚úÖ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results["tests"]["cost_estimation"] = {
                "status": "pass",
                "message": "–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            }
            return True
        else:
            logger.warning("‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç API –∫–ª—é—á–µ–π)")
            self.test_results["tests"]["cost_estimation"] = {
                "status": "warning",
                "message": "–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (mock API –∫–ª—é—á–∏)",
                "output": result.stdout[:500] if result.stdout else "–ù–µ—Ç –≤—ã–≤–æ–¥–∞"
            }
            return False
    
    def test_file_validation(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º
        cmd = ["docker", "exec", self.container_name, "python", "speech_pipeline.py", 
               "/app/nonexistent.wav"]
        result = self.run_command(cmd)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_output = result.stderr + result.stdout
        if result.returncode != 0 and ("not found" in error_output.lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_output.lower() or "—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" in error_output.lower()):
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")

            self.test_results["tests"]["file_validation"] = {
                "status": "pass",
                "message": "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            }
            return True
        else:
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results["tests"]["file_validation"] = {
                "status": "fail",
                "message": "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "error": error_output,
                "return_code": result.returncode
            }
            return False
    
    def cleanup_containers(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
        if not self.cleanup:
            logger.info("üßπ –ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ (--no-cleanup)")
            return
            
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.run_command(["docker", "stop", self.container_name])
        self.run_command(["docker", "rm", self.container_name])
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª
        if Path(".env.functional_test").exists():
            Path(".env.functional_test").unlink()
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def run_functional_tests(self, quick: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üß™ –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        
        try:
            # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if not self.setup_test_environment():
                return False
            
            # 2. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if not self.start_container():
                return False
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ help –∫–æ–º–∞–Ω–¥—ã
            if not self.test_help_command():
                self.test_results["errors"].append("Help –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # 4. Health check
            if not self.test_health_check():
                self.test_results["warnings"].append("Health check –Ω–µ –ø—Ä–æ—à—ë–ª")
            
            # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
            if not self.test_file_validation():
                self.test_results["errors"].append("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # 6. –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
            if not quick:
                if not self.test_cost_estimation():
                    self.test_results["warnings"].append("–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if self.test_results["errors"]:
                self.test_results["overall_status"] = "failed"
            elif self.test_results["warnings"]:
                self.test_results["overall_status"] = "warning"
            else:
                self.test_results["overall_status"] = "passed"
            
            return self.test_results["overall_status"] in ["passed", "warning"]
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.test_results["overall_status"] = "error"
            self.test_results["errors"].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        
        finally:
            self.cleanup_containers()
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report_file = Path("logs/functional_tests") / f"functional_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
        status_emoji = {
            "passed": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "failed": "‚ùå",
            "error": "üí•"
        }
        
        print(f"\nüß™ Functional Test Report")
        print(f"üìÖ {self.test_results['timestamp']}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {status_emoji.get(self.test_results['overall_status'], '‚ùì')} {self.test_results['overall_status'].upper()}")
        
        if self.test_results["warnings"]:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in self.test_results["warnings"]:
                print(f"  ‚Ä¢ {warning}")
        
        if self.test_results["errors"]:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for error in self.test_results["errors"]:
                print(f"  ‚Ä¢ {error}")


def main():
    parser = argparse.ArgumentParser(description="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    parser.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–±–µ–∑ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)")
    parser.add_argument("--no-cleanup", action="store_true", help="–ù–µ —É–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    
    args = parser.parse_args()
    
    tester = DockerFunctionalTester(cleanup=not args.no_cleanup)
    
    try:
        success = tester.run_functional_tests(quick=args.quick)
        tester.save_report()
        
        if success:
            logger.info("üéâ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            logger.error("üí• –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        tester.cleanup_containers()
        sys.exit(130)
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        tester.cleanup_containers()
        sys.exit(1)


if __name__ == "__main__":
    main()
