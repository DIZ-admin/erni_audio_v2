#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Erni Audio v2 —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""

import argparse
import subprocess
import sys
import time
from pathlib import Path


def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"\nüöÄ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    start_time = time.time()
    result = subprocess.run(cmd, capture_output=True, text=True)
    end_time = time.time()
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if result.returncode == 0:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞")
        print(f"STDOUT: {result.stdout}")
        print(f"STDERR: {result.stderr}")
    
    return result.returncode == 0


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Erni Audio v2")
    parser.add_argument("--unit", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã")
    parser.add_argument("--integration", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--performance", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--docker", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å Docker —Ç–µ—Å—Ç—ã")
    parser.add_argument("--all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ slow)")
    parser.add_argument("--real-api", action="store_true", help="–¢–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏")
    parser.add_argument("--coverage", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    reports_dir = Path("tests/reports")
    reports_dir.mkdir(exist_ok=True)
    
    base_cmd = ["python3", "-m", "pytest"]
    
    if args.verbose:
        base_cmd.append("-v")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    if args.unit:
        cmd = base_cmd + ["tests/", "-m", "unit or not (integration or slow or docker)"]
        run_command(cmd, "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤")
        
    elif args.integration:
        if args.real_api:
            cmd = base_cmd + ["tests/", "-m", "integration or real_api"]
        else:
            cmd = base_cmd + ["tests/", "-m", "integration and not real_api"]
        run_command(cmd, "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
    elif args.performance:
        cmd = base_cmd + ["tests/", "-m", "performance or slow"]
        run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
    elif args.docker:
        # –ó–∞–ø—É—Å–∫ Docker —Ç–µ—Å—Ç–æ–≤
        docker_success = True
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ Docker —Ç–µ—Å—Ç—ã
        cmd = ["python3", "tests/docker_test.py", "--quick"]
        if not run_command(cmd, "–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö Docker —Ç–µ—Å—Ç–æ–≤"):
            docker_success = False
            
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ Docker —Ç–µ—Å—Ç—ã
        cmd = ["python3", "tests/docker_functional_test.py", "--quick"]
        if not run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö Docker —Ç–µ—Å—Ç–æ–≤"):
            docker_success = False
            
        if docker_success:
            print("\n‚úÖ –í—Å–µ Docker —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ Docker —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏")
            
    elif args.quick:
        cmd = base_cmd + ["tests/", "-m", "not slow and not integration and not docker"]
        run_command(cmd, "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        
    elif args.all:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
        success_count = 0
        total_count = 0
        
        # Unit —Ç–µ—Å—Ç—ã
        total_count += 1
        cmd = base_cmd + ["tests/", "-m", "not slow and not integration and not docker"]
        if run_command(cmd, "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤"):
            success_count += 1
            
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API)
        total_count += 1
        cmd = base_cmd + ["tests/", "-m", "integration and not real_api"]
        if run_command(cmd, "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"):
            success_count += 1
            
        # –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        total_count += 1
        cmd = base_cmd + ["tests/", "-m", "performance"]
        if run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"):
            success_count += 1
            
        # Docker —Ç–µ—Å—Ç—ã
        total_count += 1
        cmd = ["python3", "tests/docker_test.py", "--quick"]
        if run_command(cmd, "–ó–∞–ø—É—Å–∫ Docker —Ç–µ—Å—Ç–æ–≤"):
            success_count += 1
            
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –≥—Ä—É–ø–ø —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count == total_count:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —É–ø–∞–ª–∏")
            return 1
            
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
        cmd = base_cmd + ["tests/", "-m", "not slow and not integration and not docker"]
        run_command(cmd, "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
