#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏
"""

import json
import subprocess
import sys
import time
from pathlib import Path
from typing import Dict, List, Any


def run_command(cmd: List[str], description: str = "") -> tuple[bool, str, str]:
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"\nüöÄ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞")
        print(f"STDERR: {result.stderr}")
    
    return result.returncode == 0, result.stdout, result.stderr


def analyze_coverage_data() -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""
    coverage_file = Path("tests/reports/coverage.json")
    
    if not coverage_file.exists():
        print("‚ö†Ô∏è –§–∞–π–ª coverage.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º —Å–Ω–∞—á–∞–ª–∞.")
        return {}
    
    with open(coverage_file, 'r') as f:
        coverage_data = json.load(f)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ñ–∞–π–ª–∞–º
    files_analysis = {}
    total_statements = 0
    total_missing = 0
    
    for file_path, file_data in coverage_data.get("files", {}).items():
        statements = file_data.get("summary", {}).get("num_statements", 0)
        missing = file_data.get("summary", {}).get("missing_lines", 0)
        covered = statements - missing
        coverage_percent = (covered / statements * 100) if statements > 0 else 0
        
        files_analysis[file_path] = {
            "statements": statements,
            "covered": covered,
            "missing": missing,
            "coverage_percent": coverage_percent,
            "missing_lines": file_data.get("missing_lines", [])
        }
        
        total_statements += statements
        total_missing += missing
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_covered = total_statements - total_missing
    overall_coverage = (total_covered / total_statements * 100) if total_statements > 0 else 0
    
    return {
        "overall": {
            "statements": total_statements,
            "covered": total_covered,
            "missing": total_missing,
            "coverage_percent": overall_coverage
        },
        "files": files_analysis,
        "timestamp": time.time()
    }


def generate_component_analysis() -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã"""
    
    components = {
        "TranscriptionAgent": ["pipeline/transcription_agent.py"],
        "DiarizationAgent": ["pipeline/diarization_agent.py"],
        "AudioLoaderAgent": ["pipeline/audio_agent.py"],
        "ExportAgent": ["pipeline/export_agent.py"],
        "MergeAgent": ["pipeline/merge_agent.py"],
        "VoiceprintAgent": ["pipeline/voiceprint_agent.py"],
        "WebhookAgent": ["pipeline/webhook_agent.py"],
        "QCAgent": ["pipeline/qc_agent.py"],
        "PyannoteMediaAgent": ["pipeline/pyannote_media_agent.py"],
        "Configuration": ["pipeline/config.py"],
        "Utils": ["pipeline/utils.py"]
    }
    
    coverage_data = analyze_coverage_data()
    component_analysis = {}
    
    for component_name, file_paths in components.items():
        component_stats = {
            "statements": 0,
            "covered": 0,
            "missing": 0,
            "coverage_percent": 0,
            "files": []
        }
        
        for file_path in file_paths:
            if file_path in coverage_data.get("files", {}):
                file_data = coverage_data["files"][file_path]
                component_stats["statements"] += file_data["statements"]
                component_stats["covered"] += file_data["covered"]
                component_stats["missing"] += file_data["missing"]
                component_stats["files"].append({
                    "path": file_path,
                    "coverage": file_data["coverage_percent"]
                })
        
        if component_stats["statements"] > 0:
            component_stats["coverage_percent"] = (
                component_stats["covered"] / component_stats["statements"] * 100
            )
        
        component_analysis[component_name] = component_stats
    
    return component_analysis


def generate_markdown_report(coverage_data: Dict[str, Any], component_data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
    
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    overall = coverage_data.get("overall", {})
    
    report = f"""# üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏

**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {timestamp}  
**–û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ:** {overall.get('coverage_percent', 0):.1f}%

---

## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |
|---------|----------|
| **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞** | {overall.get('statements', 0)} |
| **–ü–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏** | {overall.get('covered', 0)} |
| **–ù–µ –ø–æ–∫—Ä—ã—Ç–æ** | {overall.get('missing', 0)} |
| **–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è** | {overall.get('coverage_percent', 0):.1f}% |

---

## üß© –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º

| –ö–æ–º–ø–æ–Ω–µ–Ω—Ç | –ü–æ–∫—Ä—ã—Ç–∏–µ | –°—Ç—Ä–æ–∫ | –ü–æ–∫—Ä—ã—Ç–æ | –ù–µ –ø–æ–∫—Ä—ã—Ç–æ | –°—Ç–∞—Ç—É—Å |
|-----------|----------|-------|---------|------------|--------|
"""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_components = sorted(
        component_data.items(), 
        key=lambda x: x[1].get('coverage_percent', 0), 
        reverse=True
    )
    
    for component_name, stats in sorted_components:
        coverage_pct = stats.get('coverage_percent', 0)
        status = "‚úÖ" if coverage_pct >= 80 else "‚ö†Ô∏è" if coverage_pct >= 60 else "‚ùå"
        
        report += f"| **{component_name}** | {coverage_pct:.1f}% | {stats.get('statements', 0)} | {stats.get('covered', 0)} | {stats.get('missing', 0)} | {status} |\n"
    
    report += """
---

## üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª–∞–º

### ‚úÖ –•–æ—Ä–æ—à–æ –ø–æ–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (>80%)

"""
    
    # –§–∞–π–ª—ã —Å —Ö–æ—Ä–æ—à–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    good_files = []
    medium_files = []
    poor_files = []
    
    for file_path, file_data in coverage_data.get("files", {}).items():
        coverage_pct = file_data.get("coverage_percent", 0)
        if coverage_pct >= 80:
            good_files.append((file_path, file_data))
        elif coverage_pct >= 60:
            medium_files.append((file_path, file_data))
        else:
            poor_files.append((file_path, file_data))
    
    for file_path, file_data in sorted(good_files, key=lambda x: x[1]['coverage_percent'], reverse=True):
        report += f"- **{file_path}**: {file_data['coverage_percent']:.1f}% ({file_data['covered']}/{file_data['statements']} —Å—Ç—Ä–æ–∫)\n"
    
    if medium_files:
        report += "\n### ‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ –ø–æ–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (60-80%)\n\n"
        for file_path, file_data in sorted(medium_files, key=lambda x: x[1]['coverage_percent'], reverse=True):
            report += f"- **{file_path}**: {file_data['coverage_percent']:.1f}% ({file_data['covered']}/{file_data['statements']} —Å—Ç—Ä–æ–∫)\n"
    
    if poor_files:
        report += "\n### ‚ùå –°–ª–∞–±–æ –ø–æ–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (<60%)\n\n"
        for file_path, file_data in sorted(poor_files, key=lambda x: x[1]['coverage_percent'], reverse=True):
            missing_lines = file_data.get('missing_lines', [])
            missing_str = f" - –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {missing_lines[:10]}" if missing_lines else ""
            if len(missing_lines) > 10:
                missing_str += f" –∏ –µ—â–µ {len(missing_lines) - 10}..."
            report += f"- **{file_path}**: {file_data['coverage_percent']:.1f}% ({file_data['covered']}/{file_data['statements']} —Å—Ç—Ä–æ–∫){missing_str}\n"
    
    report += """
---

## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:
"""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if overall.get('coverage_percent', 0) < 80:
        report += "1. **–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–æ 80%+**\n"
    
    if poor_files:
        report += f"2. **–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è {len(poor_files)} —Å–ª–∞–±–æ –ø–æ–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤**\n"
    
    if medium_files:
        report += f"3. **–£–ª—É—á—à–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è {len(medium_files)} —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º**\n"
    
    report += """
### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
- –î–æ–±–∞–≤–∏—Ç—å unit —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
- –î–æ–±–∞–≤–∏—Ç—å edge-case —Ç–µ—Å—Ç—ã –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
- –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è

---

## üìä –¢—Ä–µ–Ω–¥—ã –∫–∞—á–µ—Å—Ç–≤–∞

| –¶–µ–ª—å | –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ | –°—Ç–∞—Ç—É—Å |
|------|------------------|--------|
| –ü–æ–∫—Ä—ã—Ç–∏–µ >80% | {overall.get('coverage_percent', 0):.1f}% | {'‚úÖ' if overall.get('coverage_percent', 0) >= 80 else '‚ùå'} |
| –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã >70% | {len([c for c in component_data.values() if c.get('coverage_percent', 0) >= 70])}/{len(component_data)} | {'‚úÖ' if all(c.get('coverage_percent', 0) >= 70 for c in component_data.values()) else '‚ùå'} |
| –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ <50% | {len([f for f in coverage_data.get('files', {}).values() if f.get('coverage_percent', 0) < 50])} —Ñ–∞–π–ª–æ–≤ | {'‚úÖ' if not any(f.get('coverage_percent', 0) < 50 for f in coverage_data.get('files', {}).values()) else '‚ùå'} |

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {timestamp}*
"""
    
    return report


def main():
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    reports_dir = Path("tests/reports")
    reports_dir.mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    success, stdout, stderr = run_command([
        "python3", "-m", "pytest", "tests/", 
        "--cov=pipeline", 
        "--cov-report=json:tests/reports/coverage.json",
        "--cov-report=html:tests/reports/coverage",
        "--cov-report=term-missing",
        "-q"
    ], "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º")
        return 1
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è...")
    coverage_data = analyze_coverage_data()
    
    if not coverage_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è")
        return 1
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    print("üß© –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º...")
    component_data = generate_component_analysis()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    markdown_report = generate_markdown_report(coverage_data, component_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = reports_dir / "coverage_analysis.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(markdown_report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    analysis_data = {
        "coverage": coverage_data,
        "components": component_data,
        "timestamp": time.time()
    }
    
    json_path = reports_dir / "coverage_analysis.json"
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(analysis_data, f, indent=2, ensure_ascii=False)
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    overall = coverage_data.get("overall", {})
    print(f"\nüìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
    print(f"   –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {overall.get('coverage_percent', 0):.1f}%")
    print(f"   –ü–æ–∫—Ä—ã—Ç–æ —Å—Ç—Ä–æ–∫: {overall.get('covered', 0)}/{overall.get('statements', 0)}")
    print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º >80%: {len([c for c in component_data.values() if c.get('coverage_percent', 0) >= 80])}/{len(component_data)}")
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   Markdown: {report_path}")
    print(f"   JSON: {json_path}")
    print(f"   HTML: tests/reports/coverage/index.html")
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return 0


if __name__ == "__main__":
    sys.exit(main())
