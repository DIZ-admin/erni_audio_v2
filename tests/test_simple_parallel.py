# tests/test_simple_parallel.py

import pytest
import time
import os
from unittest.mock import Mock, patch, MagicMock
from pathlib import Path
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor, as_completed


def test_simple_parallel_processing():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    
    def process_item(item):
        """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        time.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        return {"index": item["index"], "result": item["value"] * 2}
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    items = [
        {"index": 0, "value": 10},
        {"index": 1, "value": 20},
        {"index": 2, "value": 30}
    ]
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    results = []
    with ThreadPoolExecutor(max_workers=3) as executor:
        future_to_item = {executor.submit(process_item, item): item for item in items}
        
        for future in as_completed(future_to_item):
            result = future.result()
            results.append(result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert len(results) == 3
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
    results.sort(key=lambda x: x["index"])
    
    assert results[0]["result"] == 20  # 10 * 2
    assert results[1]["result"] == 40  # 20 * 2
    assert results[2]["result"] == 60  # 30 * 2


def test_parallel_processing_with_timeout():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    
    def slow_process_item(item):
        """–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞."""
        time.sleep(0.5)  # –ë–æ–ª—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞
        return {"index": item["index"], "result": item["value"]}
    
    items = [{"index": 0, "value": 10}]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–π–º–∞—É—Ç–∞
    with ThreadPoolExecutor(max_workers=1) as executor:
        future_to_item = {executor.submit(slow_process_item, item): item for item in items}
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
            for future in as_completed(future_to_item, timeout=0.1):
                result = future.result()
        except concurrent.futures.TimeoutError:
            # –û–∂–∏–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            assert True
        else:
            # –ï—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–µ –±—ã–ª–æ, —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω
            assert False, "–û–∂–∏–¥–∞–ª—Å—è TimeoutError"


def test_parallel_processing_with_exception():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏."""
    
    def failing_process_item(item):
        """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ."""
        if item["index"] == 1:
            raise ValueError("Test error")
        return {"index": item["index"], "result": item["value"]}
    
    items = [
        {"index": 0, "value": 10},
        {"index": 1, "value": 20},  # –≠—Ç–∞ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
        {"index": 2, "value": 30}
    ]
    
    results = []
    errors = []
    
    with ThreadPoolExecutor(max_workers=3) as executor:
        future_to_item = {executor.submit(failing_process_item, item): item for item in items}
        
        for future in as_completed(future_to_item):
            item = future_to_item[future]
            try:
                result = future.result()
                results.append(result)
            except Exception as e:
                errors.append({"index": item["index"], "error": str(e)})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert len(results) == 2  # –î–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö
    assert len(errors) == 1   # –û–¥–Ω–∞ –æ—à–∏–±–∫–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    assert errors[0]["index"] == 1
    assert "Test error" in errors[0]["error"]


def test_concurrent_chunks_peak_tracking():
    """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∏–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
    
    max_concurrent = 0
    current_concurrent = 0
    
    def track_concurrent_item(item):
        nonlocal max_concurrent, current_concurrent
        current_concurrent += 1
        if current_concurrent > max_concurrent:
            max_concurrent = current_concurrent
        
        time.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        
        current_concurrent -= 1
        return {"index": item["index"], "result": item["value"]}
    
    items = [{"index": i, "value": i * 10} for i in range(5)]
    
    with ThreadPoolExecutor(max_workers=3) as executor:
        futures = [executor.submit(track_concurrent_item, item) for item in items]
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for future in as_completed(futures):
            future.result()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏–∫ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º—É–º –≤–æ—Ä–∫–µ—Ä–æ–≤
    assert max_concurrent <= 3
    assert max_concurrent > 0


def test_chunk_processing_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–µ–π —Ñ–∞–π–ª–∞."""
    
    def process_chunk_simulation(chunk_info):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞."""
        chunk_index = chunk_info["index"]
        chunk_offset = chunk_info["offset"]
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        time.sleep(0.05)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        segments = [
            {
                "id": 0,
                "start": 0.0 + chunk_offset,
                "end": 5.0 + chunk_offset,
                "text": f"Segment from chunk {chunk_index}"
            }
        ]
        
        return {
            "index": chunk_index,
            "segments": segments,
            "offset": chunk_offset,
            "success": True,
            "error": None,
            "processing_time": 0.05
        }
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º 3 —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ –ø–æ 10 –º–∏–Ω—É—Ç –∫–∞–∂–¥–∞—è
    chunk_infos = [
        {"index": i, "offset": i * 600.0}  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç
        for i in range(3)
    ]
    
    results = []
    with ThreadPoolExecutor(max_workers=2) as executor:
        future_to_chunk = {
            executor.submit(process_chunk_simulation, chunk_info): chunk_info 
            for chunk_info in chunk_infos
        }
        
        for future in as_completed(future_to_chunk):
            result = future.result()
            results.append(result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assert len(results) == 3
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
    results.sort(key=lambda x: x["index"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è
    assert results[0]["segments"][0]["start"] == 0.0    # 0 + 0
    assert results[1]["segments"][0]["start"] == 600.0  # 0 + 600
    assert results[2]["segments"][0]["start"] == 1200.0 # 0 + 1200
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    for result in results:
        assert result["success"] is True
        assert result["error"] is None


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    test_simple_parallel_processing()
    print("‚úÖ test_simple_parallel_processing –ø—Ä–æ—à–µ–ª")
    
    test_parallel_processing_with_timeout()
    print("‚úÖ test_parallel_processing_with_timeout –ø—Ä–æ—à–µ–ª")
    
    test_parallel_processing_with_exception()
    print("‚úÖ test_parallel_processing_with_exception –ø—Ä–æ—à–µ–ª")
    
    test_concurrent_chunks_peak_tracking()
    print("‚úÖ test_concurrent_chunks_peak_tracking –ø—Ä–æ—à–µ–ª")
    
    test_chunk_processing_simulation()
    print("‚úÖ test_chunk_processing_simulation –ø—Ä–æ—à–µ–ª")
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
