#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Erni Audio v2

–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:
1. –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
2. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
5. Health checks –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python docker_test.py                    # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
    python docker_test.py --quick            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
    python docker_test.py --build-only       # –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞
    python docker_test.py --no-cleanup       # –ù–µ —É–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
"""

import argparse
import json
import logging
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import requests
import psutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/docker_test.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


class DockerTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    
    def __init__(self, cleanup: bool = True):
        self.cleanup = cleanup
        self.container_name = "erni-audio-test"
        self.image_name = "erni-audio-v2:test"
        self.webhook_container = "erni-audio-webhook-test"
        self.test_results = {
            "timestamp": datetime.now().isoformat(),
            "tests": {},
            "overall_status": "unknown",
            "errors": [],
            "warnings": []
        }
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        Path("logs").mkdir(exist_ok=True)
        Path("logs/docker_tests").mkdir(exist_ok=True)
    
    def run_command(self, cmd: List[str], timeout: int = 60, capture_output: bool = True) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.debug(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        try:
            result = subprocess.run(
                cmd, 
                timeout=timeout, 
                capture_output=capture_output,
                text=True,
                check=False
            )
            if result.returncode != 0:
                logger.error(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π {result.returncode}: {result.stderr}")
            return result
        except subprocess.TimeoutExpired:
            logger.error(f"–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout}—Å")
            raise
    
    def check_docker_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker"""
        logger.info("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker...")
        try:
            result = self.run_command(["docker", "--version"])
            if result.returncode == 0:
                logger.info(f"‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω: {result.stdout.strip()}")
                return True
            else:
                logger.error("‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
            return False
    
    def build_image(self) -> bool:
        """–°–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑"""
        logger.info("üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile
        if not Path("Dockerfile").exists():
            logger.error("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
        cmd = ["docker", "build", "-t", self.image_name, "."]
        result = self.run_command(cmd, timeout=300)
        
        if result.returncode == 0:
            logger.info("‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            self.test_results["tests"]["build"] = {
                "status": "pass",
                "message": "–û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                "duration": "< 5 –º–∏–Ω—É—Ç"
            }
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞: {result.stderr}")
            self.test_results["tests"]["build"] = {
                "status": "fail",
                "message": f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}",
                "error": result.stderr
            }
            return False
    
    def start_container(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        self.run_command(["docker", "stop", self.container_name])
        self.run_command(["docker", "rm", self.container_name])
        
        # –°–æ–∑–¥–∞—ë–º .env —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        import uuid
        env_content = f"""
# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
PYANNOTEAI_API_TOKEN=test_token_{uuid.uuid4().hex[:16]}
OPENAI_API_KEY=test_openai_{uuid.uuid4().hex[:16]}
LOG_LEVEL=DEBUG
ENABLE_HEALTH_CHECKS=true
"""
        with open(".env.test", "w") as f:
            f.write(env_content)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Ä–µ–∂–∏–º–µ health check
        cmd = [
            "docker", "run", "-d",
            "--name", self.container_name,
            "--env-file", ".env.test",
            "-p", "8000:8000",
            "-v", f"{Path.cwd()}/data:/app/data",
            "-v", f"{Path.cwd()}/logs:/app/logs",
            "--entrypoint", "sleep",  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º entrypoint
            self.image_name,
            "300"  # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ]
        
        result = self.run_command(cmd)
        
        if result.returncode == 0:
            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            time.sleep(5)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {result.stderr}")
            return False
    
    def test_container_health(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health check –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        cmd = ["docker", "ps", "--filter", f"name={self.container_name}", "--format", "{{.Status}}"]
        result = self.run_command(cmd)
        
        if result.returncode == 0 and "Up" in result.stdout:
            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º health check –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            health_cmd = ["docker", "exec", self.container_name, "python", "health_check.py", "--json"]
            health_result = self.run_command(health_cmd)
            
            if health_result.returncode == 0:
                try:
                    health_data = json.loads(health_result.stdout)
                    status = health_data.get("overall_status", "unknown")
                    logger.info(f"‚úÖ Health check: {status}")
                    
                    self.test_results["tests"]["health_check"] = {
                        "status": "pass" if status in ["healthy", "warning"] else "fail",
                        "health_status": status,
                        "details": health_data
                    }
                    return status in ["healthy", "warning"]
                except json.JSONDecodeError:
                    logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ health check")
                    return False
            else:
                logger.error(f"‚ùå Health check –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {health_result.stderr}")
                return False
        else:
            logger.error("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    
    def test_basic_functionality(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º help –∫–æ–º–∞–Ω–¥—É
        cmd = ["docker", "exec", self.container_name, "python", "speech_pipeline.py", "--help"]
        result = self.run_command(cmd)
        
        if result.returncode == 0 and "speech_pipeline" in result.stdout:
            logger.info("‚úÖ Help –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            test_file = Path("tests/samples/Testdatei.m4a")
            if test_file.exists():
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                copy_cmd = ["docker", "cp", str(test_file), f"{self.container_name}:/app/test_audio.m4a"]
                copy_result = self.run_command(copy_cmd)
                
                if copy_result.returncode == 0:
                    logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
                    
                    self.test_results["tests"]["basic_functionality"] = {
                        "status": "pass",
                        "message": "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç",
                        "help_command": "—Ä–∞–±–æ—Ç–∞–µ—Ç",
                        "test_file": "–¥–æ—Å—Ç—É–ø–µ–Ω"
                    }
                    return True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
            else:
                logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        logger.error("‚ùå –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        self.test_results["tests"]["basic_functionality"] = {
            "status": "fail",
            "message": "–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
        }
        return False
    
    def test_resource_usage(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        cmd = ["docker", "stats", self.container_name, "--no-stream", "--format", "{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"]
        result = self.run_command(cmd)

        if result.returncode == 0 and result.stdout.strip():
            try:
                stats = result.stdout.strip().split('\t')
                if len(stats) >= 3:
                    cpu_percent = stats[0].replace('%', '')
                    mem_usage = stats[1]
                    mem_percent = stats[2].replace('%', '')

                    logger.info(f"üìà CPU: {cpu_percent}%, Memory: {mem_usage} ({mem_percent}%)")

                    self.test_results["tests"]["resource_usage"] = {
                        "status": "pass",
                        "cpu_percent": cpu_percent,
                        "memory_usage": mem_usage,
                        "memory_percent": mem_percent
                    }
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result.stdout}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤")
        self.test_results["tests"]["resource_usage"] = {
            "status": "warning",
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤"
        }
        return False
    
    def cleanup_containers(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
        if not self.cleanup:
            logger.info("üßπ –ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ (--no-cleanup)")
            return
            
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        containers = [self.container_name, self.webhook_container]
        for container in containers:
            self.run_command(["docker", "stop", container])
            self.run_command(["docker", "rm", container])
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑
        self.run_command(["docker", "rmi", self.image_name])
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª
        if Path(".env.test").exists():
            Path(".env.test").unlink()
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def run_full_test(self, quick: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
            if not self.check_docker_available():
                return False
            
            # 2. –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
            if not self.build_image():
                return False
            
            # 3. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if not self.start_container():
                return False
            
            # 4. Health check
            if not self.test_container_health():
                self.test_results["warnings"].append("Health check –Ω–µ –ø—Ä–æ—à—ë–ª")
            
            # 5. –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            if not self.test_basic_functionality():
                self.test_results["errors"].append("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # 6. –†–µ—Å—É—Ä—Å—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
            if not quick:
                if not self.test_resource_usage():
                    self.test_results["warnings"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if self.test_results["errors"]:
                self.test_results["overall_status"] = "failed"
            elif self.test_results["warnings"]:
                self.test_results["overall_status"] = "warning"
            else:
                self.test_results["overall_status"] = "passed"
            
            return self.test_results["overall_status"] in ["passed", "warning"]
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.test_results["overall_status"] = "error"
            self.test_results["errors"].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        
        finally:
            self.cleanup_containers()
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report_file = Path("logs/docker_tests") / f"docker_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
        status_emoji = {
            "passed": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "failed": "‚ùå",
            "error": "üí•"
        }
        
        print(f"\nüê≥ Docker Test Report")
        print(f"üìÖ {self.test_results['timestamp']}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {status_emoji.get(self.test_results['overall_status'], '‚ùì')} {self.test_results['overall_status'].upper()}")
        
        if self.test_results["warnings"]:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in self.test_results["warnings"]:
                print(f"  ‚Ä¢ {warning}")
        
        if self.test_results["errors"]:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for error in self.test_results["errors"]:
                print(f"  ‚Ä¢ {error}")


def main():
    parser = argparse.ArgumentParser(description="–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    parser.add_argument("--quick", action="store_true", help="–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤)")
    parser.add_argument("--build-only", action="store_true", help="–¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞")
    parser.add_argument("--no-cleanup", action="store_true", help="–ù–µ —É–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    
    args = parser.parse_args()
    
    tester = DockerTester(cleanup=not args.no_cleanup)
    
    try:
        if args.build_only:
            success = tester.check_docker_available() and tester.build_image()
        else:
            success = tester.run_full_test(quick=args.quick)
        
        tester.save_report()
        
        if success:
            logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            logger.error("üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        tester.cleanup_containers()
        sys.exit(130)
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        tester.cleanup_containers()
        sys.exit(1)


if __name__ == "__main__":
    main()
