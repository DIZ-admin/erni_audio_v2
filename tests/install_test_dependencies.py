#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Erni Audio v2
"""

import subprocess
import sys
from pathlib import Path


def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"\nüöÄ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
        if result.stdout.strip():
            print(f"–í—ã–≤–æ–¥: {result.stdout.strip()}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞")
        print(f"STDERR: {result.stderr}")
        return False
    
    return True


def main():
    print("üß™ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Erni Audio v2")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_dependencies = [
        "pytest>=7.4.0",
        "pytest-cov>=4.1.0",
        "pytest-asyncio>=0.21.0",
        "pytest-mock>=3.11.0",
        "pytest-xdist>=3.3.0",  # –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        "pytest-html>=3.2.0",   # –î–ª—è HTML –æ—Ç—á–µ—Ç–æ–≤
        "pytest-json-report>=1.5.0",  # –î–ª—è JSON –æ—Ç—á–µ—Ç–æ–≤
        "coverage>=7.3.0",
        "mock>=5.1.0"
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_tools = [
        "flake8>=6.0.0",        # –õ–∏–Ω—Ç–µ—Ä
        "black>=23.0.0",        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –∫–æ–¥–∞
        "isort>=5.12.0",        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        "mypy>=1.5.0",          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
        "bandit>=1.7.0",        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        "safety>=2.3.0"         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    ]
    
    success_count = 0
    total_count = 0
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    for dep in test_dependencies:
        total_count += 1
        if run_command(["pip", "install", dep], f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            success_count += 1
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    print("\nüîç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞...")
    for tool in analysis_tools:
        total_count += 1
        if run_command(["pip", "install", tool], f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {tool}"):
            success_count += 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("\n‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # .coveragerc –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
    coveragerc_content = """[run]
source = pipeline
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    setup.py

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\\bProtocol\\):
    @(abc\\.)?abstractmethod

[html]
directory = tests/reports/coverage
"""
    
    with open(".coveragerc", "w") as f:
        f.write(coveragerc_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω .coveragerc")
    
    # setup.cfg –¥–ª—è flake8 –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    setup_cfg_content = """[flake8]
max-line-length = 120
exclude = 
    .git,
    __pycache__,
    venv,
    env,
    .venv,
    .env,
    build,
    dist,
    *.egg-info
ignore = 
    E203,  # whitespace before ':'
    W503,  # line break before binary operator
    E501   # line too long (handled by black)

[mypy]
python_version = 3.9
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
ignore_missing_imports = True

[isort]
profile = black
multi_line_output = 3
line_length = 120
"""
    
    with open("setup.cfg", "w") as f:
        f.write(setup_cfg_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω setup.cfg")
    
    # pyproject.toml –¥–ª—è black
    pyproject_content = """[tool.black]
line-length = 120
target-version = ['py39']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ pyproject.toml
    if not Path("pyproject.toml").exists():
        with open("pyproject.toml", "w") as f:
            f.write(pyproject_content)
        print("‚úÖ –°–æ–∑–¥–∞–Ω pyproject.toml")
    else:
        print("‚ö†Ô∏è pyproject.toml —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    # –°–æ–∑–¥–∞–µ–º Makefile –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    makefile_content = """# Makefile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Erni Audio v2

.PHONY: test test-quick test-all test-docker test-coverage lint format check install-deps clean

# –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
test-quick:
	python3 run_tests.py --quick

# –í—Å–µ —Ç–µ—Å—Ç—ã
test-all:
	python3 run_tests.py --all

# Docker —Ç–µ—Å—Ç—ã
test-docker:
	python3 run_tests.py --docker

# –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
test-coverage:
	python3 -m pytest tests/ --cov=pipeline --cov-report=html:tests/reports/coverage --cov-report=term-missing

# –õ–∏–Ω—Ç–∏–Ω–≥
lint:
	flake8 pipeline/ tests/
	mypy pipeline/
	bandit -r pipeline/

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
format:
	black pipeline/ tests/
	isort pipeline/ tests/

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
check:
	safety check
	bandit -r pipeline/

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install-deps:
	python3 install_test_dependencies.py

# –û—á–∏—Å—Ç–∫–∞
clean:
	rm -rf tests/reports/coverage/
	rm -rf .pytest_cache/
	rm -rf __pycache__/
	find . -name "*.pyc" -delete
	find . -name "*.pyo" -delete
	find . -name "__pycache__" -type d -exec rm -rf {} +

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
pre-commit: format lint test-quick
	@echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!"
"""
    
    with open("Makefile", "w") as f:
        f.write(makefile_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω Makefile")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –ø–∞–∫–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  make test-quick     - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
        print("  make test-all       - –í—Å–µ —Ç–µ—Å—Ç—ã")
        print("  make test-docker    - Docker —Ç–µ—Å—Ç—ã")
        print("  make test-coverage  - –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º")
        print("  make lint           - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞")
        print("  make format         - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
        print("  make pre-commit     - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é:")
        print("pip install pytest pytest-cov pytest-asyncio")
        return 1


if __name__ == "__main__":
    sys.exit(main())
