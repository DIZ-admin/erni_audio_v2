# tests/test_transcription_retry_improvements.py

import pytest
import time
import os
from unittest.mock import Mock, patch, MagicMock
from pathlib import Path
import openai

from pipeline.transcription_agent import TranscriptionAgent


class TestTranscriptionRetryImprovements:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π retry –ª–æ–≥–∏–∫–∏ TranscriptionAgent."""

    @pytest.fixture
    def agent(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TranscriptionAgent –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        # –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        with patch.dict(os.environ, {
            'OPENAI_API_KEY': 'test-openai-key',
            'PYANNOTE_API_KEY': 'test-pyannote-key'
        }):
            return TranscriptionAgent(api_key="test-key", model="whisper-1")

    @pytest.fixture
    def mock_audio_file(self, tmp_path):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        audio_file = tmp_path / "test_audio.wav"
        audio_file.write_bytes(b"fake audio data" * 1000)  # ~15KB
        return audio_file

    def test_adaptive_timeout_calculation(self, agent):
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–π–º–∞—É—Ç–∞."""
        # –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª
        timeout_small = agent._get_adaptive_timeout(1.0)  # 1MB
        assert timeout_small == 70.0  # 60 + 10*1

        # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª
        timeout_large = agent._get_adaptive_timeout(50.0)  # 50MB
        assert timeout_large == 560.0  # 60 + 10*50

        # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω)
        timeout_huge = agent._get_adaptive_timeout(100.0)  # 100MB
        assert timeout_huge == 600.0  # –ú–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç

    def test_retry_statistics_initialization(self, agent):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry."""
        assert agent.retry_stats["total_attempts"] == 0
        assert agent.retry_stats["rate_limit_retries"] == 0
        assert agent.retry_stats["connection_retries"] == 0
        assert agent.retry_stats["other_retries"] == 0
        assert agent.retry_stats["total_retry_time"] == 0.0

    def test_intelligent_wait_strategy_rate_limit(self, agent):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è rate limit –æ—à–∏–±–æ–∫."""
        # –°–æ–∑–¥–∞–µ–º mock retry_state
        retry_state = Mock()
        retry_state.attempt_number = 2

        # –°–æ–∑–¥–∞–µ–º mock –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_response = Mock()
        mock_response.status_code = 429
        rate_limit_error = Mock(spec=openai.RateLimitError)
        rate_limit_error.__class__ = openai.RateLimitError

        retry_state.outcome.exception.return_value = rate_limit_error

        delay = agent._intelligent_wait_strategy(retry_state)

        # –î–ª—è rate limit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
        assert 2.0 <= delay <= 8.0  # 2^1 * 2 + jitter
        assert agent.retry_stats["total_retry_time"] == delay

    def test_intelligent_wait_strategy_connection_error(self, agent):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫."""
        retry_state = Mock()
        retry_state.attempt_number = 3

        # –°–æ–∑–¥–∞–µ–º mock –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        connection_error = Mock(spec=openai.APIConnectionError)
        connection_error.__class__ = openai.APIConnectionError

        retry_state.outcome.exception.return_value = connection_error

        delay = agent._intelligent_wait_strategy(retry_state)

        # –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–π retry
        assert delay == 1.5  # 0.5 * 3
        assert agent.retry_stats["total_retry_time"] == delay

    def test_transcribe_with_retry_success(self, agent, mock_audio_file):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        mock_client = Mock()
        agent.client = mock_client

        mock_transcript = Mock()
        mock_transcript.segments = [
            Mock(model_dump=lambda: {"id": 0, "start": 0.0, "end": 5.0, "text": "Test text"})
        ]

        mock_client.with_options.return_value.audio.transcriptions.create.return_value = mock_transcript

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        result = agent._transcribe_with_intelligent_retry(
            mock_audio_file,
            {"response_format": "verbose_json"},
            60.0
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == 1
        assert result[0]["text"] == "Test text"

    def test_transcribe_with_retry_rate_limit_recovery(self, agent, mock_audio_file):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ rate limit –æ—à–∏–±–∫–∏."""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        mock_client = Mock()
        agent.client = mock_client

        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - rate limit, –≤—Ç–æ—Ä–æ–π - —É—Å–ø–µ—Ö
        mock_transcript = Mock()
        mock_transcript.segments = [
            Mock(model_dump=lambda: {"id": 0, "start": 0.0, "end": 5.0, "text": "Success after retry"})
        ]

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        class MockRateLimitError(openai.RateLimitError):
            def __init__(self):
                pass  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º super().__init__() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

        rate_limit_error = MockRateLimitError()

        mock_client.with_options.return_value.audio.transcriptions.create.side_effect = [
            rate_limit_error,
            mock_transcript
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        result = agent._transcribe_with_intelligent_retry(
            mock_audio_file,
            {"response_format": "verbose_json"},
            60.0
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == 1
        assert result[0]["text"] == "Success after retry"
        assert agent.retry_stats["rate_limit_retries"] >= 1

    def test_transcribe_with_retry_max_attempts_exceeded(self, agent, mock_audio_file):
        """–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫."""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        mock_client = Mock()
        agent.client = mock_client

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        class MockRateLimitError(openai.RateLimitError):
            def __init__(self):
                pass  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º super().__init__() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

        rate_limit_error = MockRateLimitError()

        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è rate limit
        mock_client.with_options.return_value.audio.transcriptions.create.side_effect = rate_limit_error

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –æ–∂–∏–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with pytest.raises(openai.RateLimitError):
            agent._transcribe_with_intelligent_retry(
                mock_audio_file,
                {"response_format": "verbose_json"},
                60.0
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        assert agent.retry_stats["rate_limit_retries"] >= 8  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫

    def test_log_retry_statistics(self, agent, caplog):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry."""
        import logging

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        caplog.set_level(logging.INFO)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        agent.retry_stats["total_attempts"] = 5
        agent.retry_stats["rate_limit_retries"] = 3
        agent.retry_stats["connection_retries"] = 1
        agent.retry_stats["other_retries"] = 1
        agent.retry_stats["total_retry_time"] = 25.5

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        agent._log_retry_statistics()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥
        assert "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry" in caplog.text
        assert "–≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫=5" in caplog.text
        assert "rate_limit=3" in caplog.text
        assert "connection=1" in caplog.text
        assert "other=1" in caplog.text
        assert "–æ–±—â–µ–µ –≤—Ä–µ–º—è retry=25.5—Å" in caplog.text

    def test_log_retry_statistics_no_attempts(self, agent, caplog):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø–æ–ø—ã—Ç–æ–∫."""
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫
        agent._log_retry_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥ –ø—É—Å—Ç–æ–π
        assert "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry" not in caplog.text

    def test_transcribe_single_file_integration(self, agent, mock_audio_file):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Ç–æ–¥–∞ _transcribe_single_file."""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        mock_client = Mock()
        agent.client = mock_client

        mock_transcript = Mock()
        mock_transcript.segments = [
            Mock(model_dump=lambda: {"id": 0, "start": 0.0, "end": 5.0, "text": "Integration test"})
        ]

        mock_client.with_options.return_value.audio.transcriptions.create.return_value = mock_transcript

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        result = agent._transcribe_single_file(mock_audio_file, "test prompt")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == 1
        assert result[0]["text"] == "Integration test"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω with_options –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
        mock_client.with_options.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–π–º–∞—É—Ç –±—ã–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        call_args = mock_client.with_options.call_args
        timeout_used = call_args[1]['timeout']
        assert timeout_used > 60  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞

    def test_config_integration(self, agent):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ConfigurationManager."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        assert hasattr(agent, 'config')
        assert hasattr(agent, 'retry_config')
        assert isinstance(agent.retry_config, dict)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        assert 'max_attempts' in agent.retry_config
        assert 'min_wait' in agent.retry_config
        assert 'max_wait' in agent.retry_config
