# tests/test_refactored_voiceprint_agent.py

import pytest
import tempfile
from pathlib import Path
from typing import Dict
from unittest.mock import Mock, patch, MagicMock

from pipeline.voiceprint_agent import VoiceprintAgent


class TestRefactoredVoiceprintAgent:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ VoiceprintAgent."""

    @pytest.fixture
    def api_key(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π API –∫–ª—é—á."""
        return "test_api_key_12345"

    @pytest.fixture
    def agent(self, api_key):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä VoiceprintAgent –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        with patch('pipeline.voiceprint_agent.PyannoteMediaAgent'):
            return VoiceprintAgent(api_key=api_key)

    @pytest.fixture
    def sample_audio_file(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as f:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (–∏–º–∏—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ)
            f.write(b"fake audio data" * 1000)  # ~14KB
            temp_path = Path(f.name)
        
        yield temp_path
        
        # –û—á–∏—Å—Ç–∫–∞
        if temp_path.exists():
            temp_path.unlink()

    def test_initialization_with_base_classes(self, agent):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        assert hasattr(agent, 'log_with_emoji')  # BaseAgent
        assert hasattr(agent, 'validate_audio_file')  # ValidationMixin
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert agent.name == "VoiceprintAgent"
        assert agent.api_key == "test_api_key_12345"
        assert agent.base_url == "https://api.pyannote.ai/v1"

    def test_validate_api_key_valid(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ API –∫–ª—é—á–∞."""
        # –í–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
        valid_keys = ["test_key_123", "sk-1234567890abcdef", "pyannote_api_key_long_enough"]
        
        for key in valid_keys:
            agent.validate_api_key(key)  # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫

    def test_validate_api_key_invalid(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ API –∫–ª—é—á–∞."""
        # –ü—É—Å—Ç–æ–π –∫–ª—é—á
        with pytest.raises(ValueError, match="API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"):
            agent.validate_api_key("")
        
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        with pytest.raises(ValueError, match="API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"):
            agent.validate_api_key("   ")
        
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        with pytest.raises(ValueError, match="API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"):
            agent.validate_api_key("short")
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        with pytest.raises(ValueError, match="API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"):
            agent.validate_api_key(123)

    def test_validate_voiceprint_params_valid(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ voiceprint."""
        issues = agent.validate_voiceprint_params(sample_audio_file, "Test Speaker")
        assert len(issues) == 0

    def test_validate_voiceprint_params_invalid_label(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–µ—Ç–∫–∏."""
        # –ü—É—Å—Ç–∞—è –º–µ—Ç–∫–∞
        issues = agent.validate_voiceprint_params(sample_audio_file, "")
        assert len(issues) >= 1
        assert any("–ú–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π" in issue for issue in issues)
        
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        long_label = "x" * 101
        issues = agent.validate_voiceprint_params(sample_audio_file, long_label)
        assert len(issues) >= 1
        assert any("–ú–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è" in issue for issue in issues)
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        issues = agent.validate_voiceprint_params(sample_audio_file, 123)
        assert len(issues) >= 1
        assert any("–ú–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π" in issue for issue in issues)

    def test_validate_voiceprint_audio_file_valid(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
        issues = agent.validate_voiceprint_audio_file(sample_audio_file, max_duration_check=False)
        assert len(issues) == 0

    def test_validate_voiceprint_audio_file_too_large(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞."""
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (>100MB)
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as f:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º ~101MB
            chunk = b"x" * (1024 * 1024)  # 1MB
            for _ in range(101):
                f.write(chunk)
            large_file = Path(f.name)
        
        try:
            issues = agent.validate_voiceprint_audio_file(large_file, max_duration_check=False)
            assert len(issues) >= 1
            assert any("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π" in issue for issue in issues)
        finally:
            if large_file.exists():
                large_file.unlink()

    def test_validate_voiceprint_audio_file_nonexistent(self, agent):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞."""
        nonexistent_file = Path("/nonexistent/file.wav")
        issues = agent.validate_voiceprint_audio_file(nonexistent_file)
        assert len(issues) >= 1
        assert any("–Ω–µ –Ω–∞–π–¥–µ–Ω" in issue or "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in issue for issue in issues)

    @patch('requests.post')
    @patch('requests.get')
    def test_create_voiceprint_with_performance_metrics(self, mock_get, mock_post, agent, sample_audio_file):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è voiceprint —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã API
        mock_post.return_value.status_code = 200
        mock_post.return_value.json.return_value = {"jobId": "test_job_123"}
        
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "status": "succeeded",
            "output": {"voiceprint": "base64_encoded_voiceprint_data"}
        }
        
        # –ú–æ–∫–∞–µ–º media_agent
        agent.media_agent.upload_file = Mock(return_value="media://test/file.wav")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ voiceprint
        result = agent.create_voiceprint(sample_audio_file, "Test Speaker")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert isinstance(result, dict)
        assert result["label"] == "Test Speaker"
        assert result["voiceprint"] == "base64_encoded_voiceprint_data"
        assert "created_at" in result
        assert "source_file" in result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        assert agent._operation_count > 0
        assert agent._error_count == 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics = agent.log_performance_metrics()
        assert metrics['operation_count'] >= 1
        assert metrics['success_rate'] == 100.0

    def test_create_voiceprint_with_error_handling(self, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ BaseAgent."""
        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        nonexistent_file = Path("/nonexistent/file.wav")
        
        # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ gracefully
        with pytest.raises(Exception):
            agent.create_voiceprint(nonexistent_file, "Test")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        assert agent._error_count > 0

    def test_unified_logging_usage(self, agent):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ log_with_emoji –¥–æ—Å—Ç—É–ø–µ–Ω
        assert hasattr(agent, 'log_with_emoji')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ (–Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫)
        agent.log_with_emoji("info", "üéØ", "Test message")

    @patch('requests.post')
    def test_create_voiceprint_async_with_webhook(self, mock_post, agent, sample_audio_file):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint —Å webhook."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        agent.webhook_url = "https://example.com/webhook"
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç API
        mock_post.return_value.status_code = 200
        mock_post.return_value.json.return_value = {"jobId": "async_job_123"}
        
        # –ú–æ–∫–∞–µ–º media_agent
        agent.media_agent.upload_file = Mock(return_value="media://test/file.wav")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        job_id = agent.create_voiceprint_async(sample_audio_file, "Test Speaker")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert job_id == "async_job_123"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        assert agent._operation_count > 0

    def test_create_voiceprint_async_without_webhook(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ webhook."""
        # Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        agent.webhook_url = None
        
        # –î–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
        with pytest.raises(ValueError, match="webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω"):
            agent.create_voiceprint_async(sample_audio_file, "Test Speaker")

    def test_estimate_cost(self, agent, sample_audio_file):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
        cost_info = agent.estimate_cost(sample_audio_file)
        
        assert isinstance(cost_info, dict)
        assert "estimated_cost_usd" in cost_info
        assert "file_size_mb" in cost_info
        assert "note" in cost_info
        assert cost_info["estimated_cost_usd"] == 0.01

    def test_validation_mixin_integration(self, agent):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ValidationMixin."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤ ValidationMixin
        assert hasattr(agent, 'validate_language_code')
        assert hasattr(agent, 'validate_voiceprint_ids')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–¥–∞
        valid_lang = agent.validate_language_code("en")
        assert valid_lang == "en"

    def test_error_handling_comprehensive(self, agent):
        """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏ –±–µ–∑ reraise
        test_error = ValueError("Test error")
        agent.handle_error(test_error, "test_operation", reraise=False)
        
        assert agent._error_count == 1
        assert agent._last_error == test_error

    @patch('requests.post')
    @patch('requests.get')
    def test_performance_tracking(self, mock_get, mock_post, agent, sample_audio_file):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã API
        mock_post.return_value.status_code = 200
        mock_post.return_value.json.return_value = {"jobId": "test_job"}
        
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "status": "succeeded",
            "output": {"voiceprint": "test_data"}
        }
        
        agent.media_agent.upload_file = Mock(return_value="media://test/file.wav")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π
        for i in range(3):
            agent.create_voiceprint(sample_audio_file, f"Speaker_{i}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = agent.log_performance_metrics()
        assert metrics['operation_count'] == 3
        assert metrics['total_processing_time'] > 0
        assert metrics['success_rate'] == 100.0

    def test_submit_voiceprint_job_with_webhook(self, agent):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ job —Å webhook."""
        agent.webhook_url = "https://example.com/webhook"
        
        with patch('requests.post') as mock_post:
            mock_post.return_value.status_code = 200
            mock_post.return_value.json.return_value = {"jobId": "test_job_123"}
            
            job_id = agent._submit_voiceprint_job("media://test/file.wav")
            
            assert job_id == "test_job_123"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å
            call_args = mock_post.call_args
            request_data = call_args[1]['json']
            assert request_data['webhook'] == "https://example.com/webhook"

    @patch('requests.get')
    def test_wait_for_completion_success(self, mock_get, agent):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è job."""
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "status": "succeeded",
            "output": {"voiceprint": "test_voiceprint_data"}
        }
        
        result = agent._wait_for_completion("test_job_123")
        assert result == "test_voiceprint_data"

    @patch('requests.get')
    def test_wait_for_completion_failed(self, mock_get, agent):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è job."""
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "status": "failed",
            "output": {"error": "Processing failed"}
        }
        
        with pytest.raises(RuntimeError, match="Voiceprint job failed"):
            agent._wait_for_completion("test_job_123")

    @patch('requests.get')
    def test_wait_for_completion_timeout(self, mock_get, agent):
        """–¢–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è job."""
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "status": "processing"
        }
        
        with pytest.raises(RuntimeError, match="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"):
            agent._wait_for_completion("test_job_123", max_wait_seconds=1)
