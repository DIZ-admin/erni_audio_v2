# pipeline/retry_mixin.py

import time
import random
from typing import Any, Callable, Dict, Optional, Type, Union
from functools import wraps
import requests
import openai


class RetryMixin:
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π retry –ª–æ–≥–∏–∫–∏.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π exponential backoff
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry –ø–æ–ø—ã—Ç–æ–∫
    - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry."""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.retry_stats = {
            "total_attempts": 0,
            "rate_limit_retries": 0,
            "connection_retries": 0,
            "timeout_retries": 0,
            "server_error_retries": 0,
            "other_retries": 0,
            "total_retry_time": 0.0,
            "successful_operations": 0,
            "failed_operations": 0
        }
    
    def calculate_intelligent_backoff(self, attempt: int, exception: Exception, 
                                    base_delay: float = 1.0, max_delay: float = 60.0,
                                    jitter: bool = True) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏.
        
        Args:
            attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ retry
            base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            jitter: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            
        Returns:
            –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if isinstance(exception, (openai.RateLimitError, requests.exceptions.HTTPError)):
            if hasattr(exception, 'response') and exception.response:
                status_code = getattr(exception.response, 'status_code', 429)
                if status_code == 429:  # Rate limit
                    # –î–ª—è rate limit - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π backoff
                    delay = min(base_delay * (2 ** attempt), max_delay)
                    self.retry_stats["rate_limit_retries"] += 1
                    
                    if hasattr(self, 'logger'):
                        self.logger.warning(
                            f"üö¶ Rate limit (–ø–æ–ø—ã—Ç–∫–∞ {attempt}), –æ–∂–∏–¥–∞–Ω–∏–µ {delay:.1f}—Å"
                        )
            else:
                # –û–±—â–∏–π —Å–ª—É—á–∞–π rate limit
                delay = min(base_delay * (2 ** attempt), max_delay)
                self.retry_stats["rate_limit_retries"] += 1
        
        elif isinstance(exception, (openai.APIConnectionError, requests.exceptions.ConnectionError)):
            # –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ - –±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—ã
            delay = min(base_delay * (1.5 ** (attempt - 1)), 10.0)  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
            self.retry_stats["connection_retries"] += 1
            
            if hasattr(self, 'logger'):
                self.logger.warning(
                    f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}), –±—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å"
                )
        
        elif isinstance(exception, (openai.APITimeoutError, requests.exceptions.Timeout)):
            # –î–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤ - —É–º–µ—Ä–µ–Ω–Ω—ã–π backoff
            delay = min(base_delay * (1.8 ** (attempt - 1)), 30.0)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            self.retry_stats["timeout_retries"] += 1
            
            if hasattr(self, 'logger'):
                self.logger.warning(
                    f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt}), –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å"
                )
        
        elif isinstance(exception, (openai.InternalServerError, requests.exceptions.HTTPError)):
            # –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π backoff
            delay = min(base_delay * (2 ** (attempt - 1)), max_delay)
            self.retry_stats["server_error_retries"] += 1
            
            if hasattr(self, 'logger'):
                self.logger.warning(
                    f"üîß –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}), –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å"
                )
        
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π backoff
            delay = min(base_delay * (1.5 ** (attempt - 1)), max_delay)
            self.retry_stats["other_retries"] += 1
            
            if hasattr(self, 'logger'):
                self.logger.warning(
                    f"‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}), –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å: {type(exception).__name__}"
                )
        
        # –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
        if jitter:
            jitter_amount = delay * 0.1  # 10% –æ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏
            delay += random.uniform(-jitter_amount, jitter_amount)
            delay = max(0.1, delay)  # –ú–∏–Ω–∏–º—É–º 0.1 —Å–µ–∫—É–Ω–¥—ã
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è retry
        self.retry_stats["total_retry_time"] += delay
        self.retry_stats["total_attempts"] += 1
        
        return delay
    
    def get_adaptive_timeout(self, file_size_mb: float, base_timeout: float = 30.0,
                           size_multiplier: float = 2.0, max_timeout: float = 1800.0) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.
        
        Args:
            file_size_mb: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë
            base_timeout: –ë–∞–∑–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            size_multiplier: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            max_timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        # –§–æ—Ä–º—É–ª–∞: base_timeout + (file_size_mb * size_multiplier)
        adaptive_timeout = base_timeout + (file_size_mb * size_multiplier)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        adaptive_timeout = min(adaptive_timeout, max_timeout)
        
        if hasattr(self, 'logger'):
            self.logger.debug(
                f"üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {file_size_mb:.1f}MB: {adaptive_timeout:.1f}—Å"
            )
        
        return adaptive_timeout
    
    def retry_with_backoff(self, func: Callable, max_attempts: int = 3, 
                          base_delay: float = 1.0, max_delay: float = 60.0,
                          exceptions: tuple = None) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å retry –ª–æ–≥–∏–∫–æ–π.
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            exceptions: –ö–æ—Ä—Ç–µ–∂ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è retry (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Raises:
            Exception: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        """
        if exceptions is None:
            exceptions = (
                openai.RateLimitError,
                openai.APIConnectionError,
                openai.APITimeoutError,
                openai.InternalServerError,
                requests.exceptions.ConnectionError,
                requests.exceptions.Timeout,
                requests.exceptions.HTTPError
            )
        
        last_exception = None
        
        for attempt in range(1, max_attempts + 1):
            try:
                result = func()
                self.retry_stats["successful_operations"] += 1
                
                if attempt > 1 and hasattr(self, 'logger'):
                    self.logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt}")
                
                return result
                
            except exceptions as e:
                last_exception = e
                
                if attempt == max_attempts:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–µ –¥–µ–ª–∞–µ–º retry
                    self.retry_stats["failed_operations"] += 1
                    if hasattr(self, 'logger'):
                        self.logger.error(
                            f"‚ùå –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e}"
                        )
                    break
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∂–¥–µ–º
                delay = self.calculate_intelligent_backoff(
                    attempt, e, base_delay, max_delay
                )
                time.sleep(delay)
            
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –Ω–µ –¥–µ–ª–∞–µ–º retry
                self.retry_stats["failed_operations"] += 1
                if hasattr(self, 'logger'):
                    self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ retry): {type(e).__name__}: {e}")
                raise
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        if last_exception:
            raise last_exception
    
    def log_retry_statistics(self) -> Dict[str, Any]:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É retry.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_operations = (
            self.retry_stats["successful_operations"] + 
            self.retry_stats["failed_operations"]
        )
        
        if total_operations == 0:
            return self.retry_stats
        
        success_rate = (
            self.retry_stats["successful_operations"] / total_operations * 100
        )
        
        avg_retry_time = (
            self.retry_stats["total_retry_time"] / 
            max(self.retry_stats["total_attempts"], 1)
        )
        
        if hasattr(self, 'logger'):
            self.logger.info(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry: "
                f"{total_operations} –æ–ø–µ—Ä–∞—Ü–∏–π, "
                f"{success_rate:.1f}% —É—Å–ø–µ—Ö, "
                f"{self.retry_stats['total_attempts']} retry –ø–æ–ø—ã—Ç–æ–∫, "
                f"—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è retry: {avg_retry_time:.1f}—Å"
            )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
            if self.retry_stats["total_attempts"] > 0:
                self.logger.debug(
                    f"üîç –î–µ—Ç–∞–ª–∏ retry: "
                    f"rate_limit={self.retry_stats['rate_limit_retries']}, "
                    f"connection={self.retry_stats['connection_retries']}, "
                    f"timeout={self.retry_stats['timeout_retries']}, "
                    f"server={self.retry_stats['server_error_retries']}, "
                    f"other={self.retry_stats['other_retries']}"
                )
        
        return {
            **self.retry_stats,
            "total_operations": total_operations,
            "success_rate": success_rate,
            "average_retry_time": avg_retry_time
        }
    
    def reset_retry_stats(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É retry."""
        self.retry_stats = {
            "total_attempts": 0,
            "rate_limit_retries": 0,
            "connection_retries": 0,
            "timeout_retries": 0,
            "server_error_retries": 0,
            "other_retries": 0,
            "total_retry_time": 0.0,
            "successful_operations": 0,
            "failed_operations": 0
        }
        
        if hasattr(self, 'logger'):
            self.logger.debug("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry —Å–±—Ä–æ—à–µ–Ω–∞")
