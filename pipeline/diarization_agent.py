# pipeline/diarization_agent.py

import requests
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
from typing import List, Dict, Sequence, Optional

from .base_agent import BaseAgent
from .validation_mixin import ValidationMixin
from .retry_mixin import RetryMixin
from .rate_limit_mixin import RateLimitMixin
from .constants import API_ENDPOINTS
from .settings import SETTINGS

PYANNOTE_API = SETTINGS.api.pyannote_url

class DiarizationAgent(BaseAgent, ValidationMixin, RetryMixin, RateLimitMixin):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pyannote:
      - diarize(wav_url)  ‚Üí raw_diar: List[{"start", "end", "speaker", "confidence"}]
      - identify(wav_url, voiceprint_ids) ‚Üí raw_diar_with_ids: List[...]
    """
    def __init__(self, api_key: str, use_identify: bool = False, voiceprint_ids: Optional[Sequence[str]] = None, webhook_url: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏.

        Args:
            api_key: API –∫–ª—é—á pyannote.ai
            use_identify: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
            voiceprint_ids: –°–ø–∏—Å–æ–∫ ID –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            webhook_url: URL –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        BaseAgent.__init__(self, "DiarizationAgent")
        ValidationMixin.__init__(self)
        RetryMixin.__init__(self)
        RateLimitMixin.__init__(self, "pyannote")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }
        self.use_identify = use_identify
        self.voiceprint_ids = list(voiceprint_ids) if voiceprint_ids else []
        self.webhook_url = webhook_url

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º voiceprint_ids –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        if self.voiceprint_ids:
            self.validate_voiceprint_ids(self.voiceprint_ids)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º webhook URL –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if self.webhook_url:
            is_valid, message = self.validate_url(self.webhook_url, require_https=True)
            if not is_valid:
                self.handle_error(ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π webhook URL: {message}"), "–≤–∞–ª–∏–¥–∞—Ü–∏—è webhook URL")

        self.log_with_emoji("info", "‚úÖ", f"DiarizationAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (identify={use_identify})")

    def _poll(self, job_id: str) -> Dict:
        """
        –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º retry.

        Args:
            job_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        """
        def _poll_request():
            self.log_with_emoji("debug", "üîç", f"–û–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {job_id}")

            r = requests.get(
                f"{PYANNOTE_API}/jobs/{job_id}",
                headers=self.headers,
                timeout=10
            )
            r.raise_for_status()
            data = r.json()
            status = data["status"]

            if status in {"created", "running"}:
                self.log_with_emoji("debug", "‚è≥", f"–ó–∞–¥–∞—á–∞ {job_id} –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: {status})")
                raise RuntimeError("not-ready")

            if status == "error":
                error_msg = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                self.log_with_emoji("error", "‚ùå", f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {job_id}: {error_msg}")
                raise RuntimeError(f"–û—à–∏–±–∫–∞ Pyannote API: {error_msg}")

            self.log_with_emoji("info", "‚úÖ", f"–ó–∞–¥–∞—á–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return data["output"]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º retry —Å rate limiting
        try:
            return self.retry_with_backoff(
                lambda: self.with_rate_limit(_poll_request, "poll"),
                max_attempts=40,
                base_delay=2.0,
                max_delay=30.0,
                exceptions=(RuntimeError, requests.RequestException)
            )
        except Exception as e:
            self.handle_error(e, f"–æ–ø—Ä–æ—Å –∑–∞–¥–∞—á–∏ {job_id}")

    def diarize(self, wav_url: str) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –∞—É–¥–∏–æ.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å media:// –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π URL)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        """
        self.start_operation("–¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è")

        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
            if not wav_url.startswith("media://"):
                is_valid, message = self.validate_url(wav_url, require_https=False)
                if not is_valid:
                    raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {message}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.log_with_emoji("info", "üé§", f"–ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type})")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
            payload = {"url": wav_url}
            if self.webhook_url:
                payload["webhook"] = self.webhook_url
                self.log_with_emoji("info", "üîó", f"Webhook URL –¥–æ–±–∞–≤–ª–µ–Ω: {self.webhook_url}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å rate limiting
            def _start_diarization():
                r = requests.post(
                    f"{PYANNOTE_API}{API_ENDPOINTS['pyannote']['diarize']}",
                    json=payload,
                    headers=self.headers,
                    timeout=SETTINGS.api.pyannote_connection_timeout,
                )
                r.raise_for_status()
                return r.json()

            job_data = self.with_rate_limit(_start_diarization, "diarize")
            job_id = job_data["jobId"]
            self.log_with_emoji("info", "üöÄ", f"–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, ID –∑–∞–¥–∞—á–∏: {job_id}")

            # –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = self._poll(job_id)
            self.log_with_emoji("debug", "üìä", f"–ü–æ–ª–Ω—ã–π output –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {output}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
            diarization = self._extract_diarization_result(output)

            self.end_operation("–¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è", success=True)
            self.log_with_emoji("info", "‚úÖ", f"–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(diarization)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

            return diarization

        except Exception as e:
            self.end_operation("–¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è", success=False)
            self.handle_error(e, "–¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è")

    def _extract_diarization_result(self, output: Dict) -> List[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.

        Args:
            output: –û—Ç–≤–µ—Ç –æ—Ç API

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        """
        if not isinstance(output, dict):
            raise ValueError(f"Output –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –ø–æ–ª—É—á–µ–Ω: {type(output)}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ API (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        diarization = None

        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API: –ø–æ–ª–µ "result"
        if "result" in output:
            diarization = output["result"]
            self.log_with_emoji("debug", "üìã", "–ò–∑–≤–ª–µ—á–µ–Ω –º–∞—Å—Å–∏–≤ diarization –∏–∑ –ø–æ–ª—è 'result' (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API)")
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API: –ø–æ–ª–µ "diarization"
        elif "diarization" in output:
            diarization = output["diarization"]
            self.log_with_emoji("debug", "üìã", "–ò–∑–≤–ª–µ—á–µ–Ω –º–∞—Å—Å–∏–≤ diarization –∏–∑ –ø–æ–ª—è 'diarization' (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API)")
        else:
            available_keys = list(output.keys())
            error_msg = f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á 'result' –∏–ª–∏ 'diarization' –≤ output. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {available_keys}"
            self.log_with_emoji("error", "‚ùå", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ output: {available_keys}")
            raise KeyError(error_msg)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if not isinstance(diarization, list):
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {type(diarization)}, –æ–∂–∏–¥–∞–ª—Å—è list")

        return diarization

    def identify(self, wav_url: str) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–ø–∏–∫–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º voiceprints.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∏–∫–µ—Ä–∞–º–∏
        """
        if not self.voiceprint_ids:
            raise ValueError("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω voiceprint_id –¥–ª—è identify()")

        self.start_operation("–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")

        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
            if not wav_url.startswith("media://"):
                is_valid, message = self.validate_url(wav_url, require_https=False)
                if not is_valid:
                    raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {message}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.log_with_emoji("info", "üîç",
                f"–ó–∞–ø—É—Å–∫–∞—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type}) "
                f"—Å {len(self.voiceprint_ids)} –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º–∏"
            )

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
            payload = {"url": wav_url, "voiceprintIds": self.voiceprint_ids}
            if self.webhook_url:
                payload["webhook"] = self.webhook_url
                self.log_with_emoji("info", "üîó", f"Webhook URL –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è identify: {self.webhook_url}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å rate limiting
            def _start_identification():
                r = requests.post(
                    f"{PYANNOTE_API}{API_ENDPOINTS['pyannote']['identify']}",
                    json=payload,
                    headers=self.headers,
                    timeout=SETTINGS.api.pyannote_connection_timeout,
                )
                r.raise_for_status()
                return r.json()

            job_data = self.with_rate_limit(_start_identification, "identify")
            job_id = job_data["jobId"]
            self.log_with_emoji("info", "üöÄ", f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, ID –∑–∞–¥–∞—á–∏: {job_id}")

            # –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output = self._poll(job_id)
            self.log_with_emoji("debug", "üìä", f"–ü–æ–ª–Ω—ã–π output –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {output}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            diarization = self._extract_diarization_result(output)

            self.end_operation("–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", success=True)
            self.log_with_emoji("info", "‚úÖ", f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(diarization)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

            return diarization

        except Exception as e:
            self.end_operation("–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", success=False)
            self.handle_error(e, "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")

    def run(self, wav_url: str) -> List[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        self.start_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ")

        try:
            if self.use_identify:
                result = self.identify(wav_url)
                operation_type = "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
            else:
                result = self.diarize(wav_url)
                operation_type = "–¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è"

            self.end_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ", success=True)
            self.log_with_emoji("info", "üéØ", f"{operation_type.capitalize()} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            return result

        except Exception as e:
            self.end_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ", success=False)
            self.handle_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ")

    def run_async(self, wav_url: str) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        """
        if self.use_identify:
            return self.identify_async(wav_url)
        else:
            return self.diarize_async(wav_url)

    def diarize_async(self, wav_url: str) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Raises:
            ValueError: –ï—Å–ª–∏ webhook_url –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        if not self.webhook_url:
            raise ValueError("webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        try:
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type})")

            payload = {
                "url": wav_url,
                "webhook": self.webhook_url
            }

            r = requests.post(
                f"{PYANNOTE_API}{API_ENDPOINTS['pyannote']['diarize']}",
                json=payload,
                headers=self.headers,
                timeout=SETTINGS.api.pyannote_connection_timeout,
            )
            r.raise_for_status()

            job_data = r.json()
            job_id = job_data["jobId"]

            self.logger.info(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {job_id}")
            self.logger.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.webhook_url}")

            return job_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def identify_async(self, wav_url: str) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Raises:
            ValueError: –ï—Å–ª–∏ webhook_url –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ voiceprint_ids –ø—É—Å—Ç—ã
        """
        if not self.webhook_url:
            raise ValueError("webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        if not self.voiceprint_ids:
            raise ValueError("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω voiceprint_id –¥–ª—è identify()")

        try:
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type})")

            payload = {
                "url": wav_url,
                "voiceprintIds": self.voiceprint_ids,
                "webhook": self.webhook_url
            }

            r = requests.post(
                f"{PYANNOTE_API}{API_ENDPOINTS['pyannote']['identify']}",
                json=payload,
                headers=self.headers,
                timeout=SETTINGS.api.pyannote_connection_timeout,
            )
            r.raise_for_status()

            job_data = r.json()
            job_id = job_data["jobId"]

            self.logger.info(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {job_id}")
            self.logger.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.webhook_url}")

            return job_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
