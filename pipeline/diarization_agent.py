# pipeline/diarization_agent.py

import logging
import requests
from tenacity import retry, stop_after_attempt, wait_fixed, wait_exponential, retry_if_exception_type
from typing import List, Dict, Sequence, Optional
from .rate_limiter import PYANNOTE_RATE_LIMITER, rate_limit_decorator

PYANNOTE_API = "https://api.pyannote.ai/v1"

class DiarizationAgent:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pyannote:
      - diarize(wav_url)  ‚Üí raw_diar: List[{"start", "end", "speaker", "confidence"}]
      - identify(wav_url, voiceprint_ids) ‚Üí raw_diar_with_ids: List[...]
    """
    def __init__(self, api_key: str, use_identify: bool = False, voiceprint_ids: Optional[Sequence[str]] = None, webhook_url: Optional[str] = None):
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }
        self.use_identify = use_identify
        self.voiceprint_ids = list(voiceprint_ids) if voiceprint_ids else []
        self.webhook_url = webhook_url
        self.logger = logging.getLogger(__name__)

    @retry(
        stop=stop_after_attempt(40),
        wait=wait_exponential(multiplier=1, min=2, max=30),  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
        retry=retry_if_exception_type((RuntimeError, requests.RequestException)),
        before_sleep=lambda retry_state: logging.getLogger(__name__).warning(
            f"–ü–æ–≤—Ç–æ—Ä {retry_state.attempt_number} –¥–ª—è –∑–∞–¥–∞—á–∏ {retry_state.args[1] if len(retry_state.args) > 1 else 'unknown'}"
        )
    )
    def _poll(self, job_id: str) -> Dict:
        try:
            self.logger.debug(f"–û–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {job_id}")
            # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
            PYANNOTE_RATE_LIMITER.wait_if_needed("poll")
            r = requests.get(f"{PYANNOTE_API}/jobs/{job_id}", headers=self.headers, timeout=10)
            r.raise_for_status()
            data = r.json()
            status = data["status"]

            if status in {"created", "running"}:
                self.logger.debug(f"–ó–∞–¥–∞—á–∞ {job_id} –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: {status})")
                raise RuntimeError("not-ready")
            if status == "error":
                error_msg = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {job_id}: {error_msg}")
                raise RuntimeError(f"–û—à–∏–±–∫–∞ Pyannote API: {error_msg}")

            self.logger.info(f"–ó–∞–¥–∞—á–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ "output"
            return data["output"]

        except requests.Timeout as e:
            self.logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á–∏ {job_id}: {e}")
            raise RuntimeError("timeout") from e
        except requests.ConnectionError as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á–∏ {job_id}: {e}")
            raise RuntimeError("connection-error") from e
        except requests.HTTPError as e:
            self.logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á–∏ {job_id}: {e}")
            raise RuntimeError(f"HTTP –æ—à–∏–±–∫–∞: {e}") from e

    def diarize(self, wav_url: str) -> List[Dict]:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type})")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
            payload = {"url": wav_url}
            if self.webhook_url:
                payload["webhook"] = self.webhook_url
                self.logger.info(f"üîó Webhook URL –¥–æ–±–∞–≤–ª–µ–Ω: {self.webhook_url}")

            r = requests.post(
                f"{PYANNOTE_API}/diarize",
                json=payload,
                headers=self.headers,
                timeout=30,  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            )
            r.raise_for_status()

            job_data = r.json()
            job_id = job_data["jobId"]
            self.logger.info(f"–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, ID –∑–∞–¥–∞—á–∏: {job_id}")

            output = self._poll(job_id)
            self.logger.debug(f"–ü–æ–ª–Ω—ã–π output –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {output}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ API (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            diarization = None

            if isinstance(output, dict):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API: –ø–æ–ª–µ "result"
                if "result" in output:
                    diarization = output["result"]
                    self.logger.debug("–ò–∑–≤–ª–µ—á–µ–Ω –º–∞—Å—Å–∏–≤ diarization –∏–∑ –ø–æ–ª—è 'result' (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API)")
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API: –ø–æ–ª–µ "diarization"
                elif "diarization" in output:
                    diarization = output["diarization"]
                    self.logger.debug("–ò–∑–≤–ª–µ—á–µ–Ω –º–∞—Å—Å–∏–≤ diarization –∏–∑ –ø–æ–ª—è 'diarization' (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API)")
                else:
                    available_keys = list(output.keys())
                    self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ output: {available_keys}")
                    raise KeyError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á 'result' –∏–ª–∏ 'diarization' –≤ output. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {available_keys}")
            else:
                self.logger.error(f"Output –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(output)}")
                raise KeyError(f"Output –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –ø–æ–ª—É—á–µ–Ω: {type(output)}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not isinstance(diarization, list):
                self.logger.error(f"Diarization –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(diarization)}")
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {type(diarization)}")

            self.logger.info(f"–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(diarization)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return diarization

        except requests.Timeout as e:
            self.logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise RuntimeError(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}") from e
        except requests.ConnectionError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pyannote API: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pyannote API: {e}") from e
        except requests.HTTPError as e:
            self.logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ Pyannote API: {e}") from e
        except KeyError as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {e}")
            raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ Pyannote API: {e}") from e

    def identify(self, wav_url: str) -> List[Dict]:
        if not self.voiceprint_ids:
            raise ValueError("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω voiceprint_id –¥–ª—è identify()")

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type}) —Å {len(self.voiceprint_ids)} –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º–∏")

            payload = {"url": wav_url, "voiceprintIds": self.voiceprint_ids}
            if self.webhook_url:
                payload["webhook"] = self.webhook_url
                self.logger.info(f"üîó Webhook URL –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è identify: {self.webhook_url}")

            r = requests.post(
                f"{PYANNOTE_API}/identify",
                json=payload,
                headers=self.headers,
                timeout=30,  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            )
            r.raise_for_status()

            job_data = r.json()
            job_id = job_data["jobId"]
            self.logger.info(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, ID –∑–∞–¥–∞—á–∏: {job_id}")

            output = self._poll(job_id)
            self.logger.debug(f"–ü–æ–ª–Ω—ã–π output –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {output}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ API (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
            diarization = None

            if isinstance(output, dict):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API: –ø–æ–ª–µ "result"
                if "result" in output:
                    diarization = output["result"]
                    self.logger.debug("–ò–∑–≤–ª–µ—á–µ–Ω –º–∞—Å—Å–∏–≤ diarization –∏–∑ –ø–æ–ª—è 'result' (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API)")
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API: –ø–æ–ª–µ "diarization"
                elif "diarization" in output:
                    diarization = output["diarization"]
                    self.logger.debug("–ò–∑–≤–ª–µ—á–µ–Ω –º–∞—Å—Å–∏–≤ diarization –∏–∑ –ø–æ–ª—è 'diarization' (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API)")
                else:
                    available_keys = list(output.keys())
                    self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ output: {available_keys}")
                    raise KeyError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á 'result' –∏–ª–∏ 'diarization' –≤ output. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {available_keys}")
            else:
                self.logger.error(f"Output –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(output)}")
                raise KeyError(f"Output –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –ø–æ–ª—É—á–µ–Ω: {type(output)}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not isinstance(diarization, list):
                self.logger.error(f"Diarization –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(diarization)}")
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {type(diarization)}")

            self.logger.info(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(diarization)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return diarization

        except requests.Timeout as e:
            self.logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise RuntimeError(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}") from e
        except requests.ConnectionError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pyannote API: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Pyannote API: {e}") from e
        except requests.HTTPError as e:
            self.logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ Pyannote API: {e}") from e
        except KeyError as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {e}")
            raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ Pyannote API: {e}") from e

    def run(self, wav_url: str) -> List[Dict]:
        """
        –ï—Å–ª–∏ use_identify = False ‚Üí –≤—ã–∑—ã–≤–∞–µ–º diarize()
        –ò–Ω–∞—á–µ ‚Üí identify(wav_url)
        """
        if self.use_identify:
            return self.identify(wav_url)
        else:
            return self.diarize(wav_url)

    def run_async(self, wav_url: str) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        """
        if self.use_identify:
            return self.identify_async(wav_url)
        else:
            return self.diarize_async(wav_url)

    def diarize_async(self, wav_url: str) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Raises:
            ValueError: –ï—Å–ª–∏ webhook_url –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        if not self.webhook_url:
            raise ValueError("webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        try:
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type})")

            payload = {
                "url": wav_url,
                "webhook": self.webhook_url
            }

            r = requests.post(
                f"{PYANNOTE_API}/diarize",
                json=payload,
                headers=self.headers,
                timeout=30,
            )
            r.raise_for_status()

            job_data = r.json()
            job_id = job_data["jobId"]

            self.logger.info(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {job_id}")
            self.logger.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.webhook_url}")

            return job_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def identify_async(self, wav_url: str) -> str:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            wav_url: URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Raises:
            ValueError: –ï—Å–ª–∏ webhook_url –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ voiceprint_ids –ø—É—Å—Ç—ã
        """
        if not self.webhook_url:
            raise ValueError("webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        if not self.voiceprint_ids:
            raise ValueError("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω voiceprint_id –¥–ª—è identify()")

        try:
            url_type = "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å pyannote.ai" if wav_url.startswith("media://") else "–≤–Ω–µ—à–Ω–∏–π URL"
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è: {wav_url} ({url_type})")

            payload = {
                "url": wav_url,
                "voiceprintIds": self.voiceprint_ids,
                "webhook": self.webhook_url
            }

            r = requests.post(
                f"{PYANNOTE_API}/identify",
                json=payload,
                headers=self.headers,
                timeout=30,
            )
            r.raise_for_status()

            job_data = r.json()
            job_id = job_data["jobId"]

            self.logger.info(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {job_id}")
            self.logger.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.webhook_url}")

            return job_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            raise
