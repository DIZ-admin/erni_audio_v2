#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–∑–º–µ—Ä–∞.
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞.
"""

import os
import argparse
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_audio_info(input_file):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams',
            input_file
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        
        import json
        info = json.loads(result.stdout)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        format_info = info.get('format', {})
        duration = float(format_info.get('duration', 0))
        size_bytes = int(format_info.get('size', 0))
        size_mb = size_bytes / (1024 * 1024)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç–æ–∫–µ
        audio_stream = None
        for stream in info.get('streams', []):
            if stream.get('codec_type') == 'audio':
                audio_stream = stream
                break
        
        if audio_stream:
            sample_rate = int(audio_stream.get('sample_rate', 0))
            channels = int(audio_stream.get('channels', 0))
            codec = audio_stream.get('codec_name', 'unknown')
        else:
            sample_rate = channels = 0
            codec = 'unknown'
        
        return {
            'duration': duration,
            'size_mb': size_mb,
            'sample_rate': sample_rate,
            'channels': channels,
            'codec': codec
        }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ: {e}")
        return None

def calculate_optimal_bitrate(duration_seconds, target_size_mb=190):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –≤ 10 –ú–ë –æ—Ç –ª–∏–º–∏—Ç–∞
    target_size_bytes = target_size_mb * 1024 * 1024
    target_bitrate_bps = (target_size_bytes * 8) / duration_seconds
    target_bitrate_kbps = int(target_bitrate_bps / 1000)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–ª—è —Ä–µ—á–∏
    min_bitrate = 32  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–π —Ä–µ—á–∏
    max_bitrate = 128  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—á–∏
    
    return max(min_bitrate, min(target_bitrate_kbps, max_bitrate))

def convert_audio(input_file, output_file, max_size_mb=200, quality='balanced'):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    
    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
        quality: –ö–∞—á–µ—Å—Ç–≤–æ ('fast', 'balanced', 'high')
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
    info = get_audio_info(input_file)
    if not info:
        return False
    
    logger.info(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {Path(input_file).name}")
    logger.info(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['duration']:.1f} —Å–µ–∫ ({info['duration']/60:.1f} –º–∏–Ω)")
    logger.info(f"üìä –†–∞–∑–º–µ—Ä: {info['size_mb']:.1f} –ú–ë")
    logger.info(f"üéµ –§–æ—Ä–º–∞—Ç: {info['codec']}, {info['sample_rate']} Hz, {info['channels']} –∫–∞–Ω–∞–ª–æ–≤")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    if quality == 'fast':
        sample_rate = 16000
        bitrate = calculate_optimal_bitrate(info['duration'], max_size_mb - 10)
        preset = 'ultrafast'
    elif quality == 'high':
        sample_rate = 22050
        bitrate = calculate_optimal_bitrate(info['duration'], max_size_mb - 5)
        preset = 'slow'
    else:  # balanced
        sample_rate = 16000
        bitrate = calculate_optimal_bitrate(info['duration'], max_size_mb - 10)
        preset = 'medium'
    
    logger.info(f"üéØ –¶–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    logger.info(f"   ‚Ä¢ –ë–∏—Ç—Ä–µ–π—Ç: {bitrate} kbps")
    logger.info(f"   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {sample_rate} Hz")
    logger.info(f"   ‚Ä¢ –ö–∞–Ω–∞–ª—ã: 1 (–º–æ–Ω–æ)")
    logger.info(f"   ‚Ä¢ –§–æ—Ä–º–∞—Ç: MP3")
    
    # –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    cmd = [
        'ffmpeg', '-i', input_file,
        '-acodec', 'mp3',           # –ö–æ–¥–µ–∫ MP3 –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
        '-ar', str(sample_rate),    # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        '-ac', '1',                 # –ú–æ–Ω–æ
        '-ab', f'{bitrate}k',       # –ë–∏—Ç—Ä–µ–π—Ç
        '-preset', preset,          # –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        '-y',                       # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        output_file
    ]
    
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if os.path.exists(output_file):
            output_info = get_audio_info(output_file)
            if output_info:
                logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {Path(output_file).name}")
                logger.info(f"üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {output_info['size_mb']:.1f} –ú–ë")
                logger.info(f"üìâ –°–∂–∞—Ç–∏–µ: {((info['size_mb'] - output_info['size_mb']) / info['size_mb'] * 100):.1f}%")
                
                if output_info['size_mb'] <= max_size_mb:
                    logger.info(f"üéØ –†–∞–∑–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ ({max_size_mb} –ú–ë)")
                else:
                    logger.warning(f"‚ö†Ô∏è  –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º 'fast' –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –ª–∏–º–∏—Ç")
                
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ")
                return False
        else:
            logger.error("‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
    
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {e}")
        logger.error(f"Stderr: {e.stderr}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏')
    parser.add_argument('input_file', help='–í—Ö–æ–¥–Ω–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª')
    parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è _converted)')
    parser.add_argument('-s', '--max-size', type=int, default=200, 
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ú–ë (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 200)')
    parser.add_argument('-q', '--quality', choices=['fast', 'balanced', 'high'], default='balanced',
                       help='–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: balanced)')
    parser.add_argument('--info-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(args.input_file):
        logger.error(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input_file}")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.error("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞.")
        return 1
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if args.info_only:
        info = get_audio_info(args.input_file)
        if info:
            logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ:")
            logger.info(f"   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['duration']:.1f} —Å–µ–∫ ({info['duration']/60:.1f} –º–∏–Ω)")
            logger.info(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {info['size_mb']:.1f} –ú–ë")
            logger.info(f"   ‚Ä¢ –ö–æ–¥–µ–∫: {info['codec']}")
            logger.info(f"   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {info['sample_rate']} Hz")
            logger.info(f"   ‚Ä¢ –ö–∞–Ω–∞–ª—ã: {info['channels']}")
            
            if info['size_mb'] > args.max_size:
                optimal_bitrate = calculate_optimal_bitrate(info['duration'], args.max_size - 10)
                logger.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–∂–∞—Ç–∏—è –¥–æ {args.max_size} –ú–ë:")
                logger.info(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±–∏—Ç—Ä–µ–π—Ç: {optimal_bitrate} kbps")
                logger.info(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ–µ —Å–∂–∞—Ç–∏–µ: ~{((info['size_mb'] - args.max_size) / info['size_mb'] * 100):.1f}%")
        return 0
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if args.output:
        output_file = args.output
    else:
        input_path = Path(args.input_file)
        output_file = input_path.parent / f"{input_path.stem}_converted.mp3"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    success = convert_audio(args.input_file, output_file, args.max_size, args.quality)
    
    if success:
        logger.info(f"üéâ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {output_file}")
        return 0
    else:
        logger.error("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return 1

if __name__ == '__main__':
    exit(main())
