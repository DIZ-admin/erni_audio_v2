#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π voiceprints
–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ voiceprints –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ pyannote.ai.
"""

import logging
import sys
import os
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import argparse
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent.parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞."""
    env_path = Path(__file__).parent.parent / ".env"
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

load_env_file()

from pipeline.voiceprint_manager import VoiceprintManager
from pipeline.voiceprint_agent import VoiceprintAgent
from pipeline.check_remote_voiceprints import PyannoteAPIChecker
from pipeline.config import get_config


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )


class VoiceprintSynchronizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints."""
    
    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            api_key: API –∫–ª—é—á pyannote.ai
        """
        self.api_key = api_key
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.local_manager = VoiceprintManager()
        self.remote_checker = PyannoteAPIChecker(api_key)
        self.voiceprint_agent = VoiceprintAgent(api_key)
    
    def analyze_sync_status(self) -> Dict[str, any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ voiceprints
        local_voiceprints = self.local_manager.list_voiceprints()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ voiceprints
        remote_jobs = self.remote_checker.get_voiceprint_jobs(100)
        remote_analysis = self.remote_checker.analyze_voiceprint_jobs(remote_jobs)
        
        analysis = {
            "local_count": len(local_voiceprints),
            "remote_count": len(remote_analysis["voiceprints_created"]),
            "local_voiceprints": local_voiceprints,
            "remote_voiceprints": remote_analysis["voiceprints_created"],
            "sync_needed": False,
            "actions_required": [],
            "target_voiceprint": None
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π voiceprint (Andreas Wermelinger)
        target_label = "Andreas Wermelinger"
        target_local = None
        target_remote = []
        
        # –ò—â–µ–º Andreas Wermelinger –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        for vp in local_voiceprints:
            if vp["label"] == target_label:
                target_local = vp
                break
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ voiceprints –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å label —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints,
        # –º—ã –±—É–¥–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        if target_local:
            target_size = len(target_local["voiceprint"])
            for remote_vp in remote_analysis["voiceprints_created"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É (—Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é)
                if abs(remote_vp["voiceprint_size"] - target_size) < 100:
                    target_remote.append(remote_vp)
        
        analysis["target_voiceprint"] = {
            "label": target_label,
            "local": target_local,
            "remote": target_remote,
            "remote_count": len(target_remote)
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if target_local and len(target_remote) == 0:
            analysis["sync_needed"] = True
            analysis["actions_required"].append("create_remote")
            self.logger.info(f"üì§ –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π voiceprint –¥–ª—è '{target_label}'")
            
        elif target_local and len(target_remote) == 1:
            analysis["sync_needed"] = False
            self.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ: 1 –ª–æ–∫–∞–ª—å–Ω—ã–π, 1 —É–¥–∞–ª–µ–Ω–Ω—ã–π")
            
        elif target_local and len(target_remote) > 1:
            analysis["sync_needed"] = True
            analysis["actions_required"].append("remove_duplicate_remote")
            self.logger.info(f"üóëÔ∏è –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ voiceprints ({len(target_remote)} –Ω–∞–π–¥–µ–Ω–æ)")
            
        elif not target_local and len(target_remote) > 0:
            analysis["sync_needed"] = True
            analysis["actions_required"].append("recreate_local")
            self.logger.info(f"üì• –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π voiceprint")
            
        else:
            analysis["sync_needed"] = True
            analysis["actions_required"].append("create_both")
            self.logger.info(f"üÜï –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å voiceprint –∏ –ª–æ–∫–∞–ª—å–Ω–æ, –∏ —É–¥–∞–ª–µ–Ω–Ω–æ")
        
        return analysis
    
    def sync_voiceprints(self, strategy: str = "keep_local") -> Dict[str, any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é voiceprints.
        
        Args:
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
                     - "keep_local": –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                     - "keep_remote": –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                     - "recreate": –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        analysis = self.analyze_sync_status()
        
        if not analysis["sync_needed"]:
            self.logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return {"status": "no_sync_needed", "analysis": analysis}
        
        sync_result = {
            "status": "in_progress",
            "actions_performed": [],
            "errors": [],
            "final_state": None
        }
        
        target_label = "Andreas Wermelinger"
        audio_file = Path("voiceprints/Andreas_Wermelinger_opt.wav")
        
        try:
            if strategy == "keep_local":
                sync_result = self._sync_keep_local(analysis, target_label, audio_file)
            elif strategy == "keep_remote":
                sync_result = self._sync_keep_remote(analysis, target_label)
            elif strategy == "recreate":
                sync_result = self._sync_recreate(analysis, target_label, audio_file)
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {strategy}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_analysis = self.analyze_sync_status()
            sync_result["final_state"] = final_analysis
            sync_result["status"] = "completed" if not final_analysis["sync_needed"] else "partial"
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            sync_result["status"] = "failed"
            sync_result["errors"].append(str(e))
        
        return sync_result
    
    def _sync_keep_local(self, analysis: Dict, target_label: str, audio_file: Path) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏."""
        result = {"actions_performed": [], "errors": []}
        
        target_info = analysis["target_voiceprint"]
        
        if "create_remote" in analysis["actions_required"]:
            # –°–æ–∑–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π voiceprint –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
            self.logger.info(f"üì§ –°–æ–∑–¥–∞—é —É–¥–∞–ª–µ–Ω–Ω—ã–π voiceprint –¥–ª—è '{target_label}'...")
            try:
                if audio_file.exists():
                    voiceprint_result = self.voiceprint_agent.create_voiceprint(
                        audio_file=audio_file,
                        label=target_label,
                        max_duration_check=True
                    )
                    result["actions_performed"].append("created_remote_voiceprint")
                    self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π voiceprint —Å–æ–∑–¥–∞–Ω")
                else:
                    raise FileNotFoundError(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
            except Exception as e:
                result["errors"].append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ voiceprint: {e}")
        
        if "remove_duplicate_remote" in analysis["actions_required"]:
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: API pyannote.ai –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —É–¥–∞–ª–µ–Ω–∏—è voiceprints
            # –û–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            self.logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ voiceprints")
            self.logger.info("‚ÑπÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ voiceprints –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞")
            result["actions_performed"].append("noted_duplicate_remote")
        
        return result
    
    def _sync_keep_remote(self, analysis: Dict, target_label: str) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏."""
        result = {"actions_performed": [], "errors": []}
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ voiceprint —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é
        # –ü–æ—ç—Ç–æ–º—É —ç—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
        self.logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è 'keep_remote' –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ API")
        self.logger.info("‚ÑπÔ∏è API pyannote.ai –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å voiceprint –¥–∞–Ω–Ω—ã–µ")
        
        result["actions_performed"].append("strategy_limited")
        return result
    
    def _sync_recreate(self, analysis: Dict, target_label: str, audio_file: Path) -> Dict:
        """–ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ voiceprints."""
        result = {"actions_performed": [], "errors": []}
        
        self.logger.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é voiceprints –¥–ª—è '{target_label}'...")
        
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π voiceprint –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        target_info = analysis["target_voiceprint"]
        if target_info["local"]:
            self.local_manager.delete_voiceprint(target_info["local"]["id"])
            result["actions_performed"].append("deleted_local_voiceprint")
            self.logger.info("üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π voiceprint —É–¥–∞–ª–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π voiceprint
        try:
            if audio_file.exists():
                # –°–æ–∑–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π voiceprint
                voiceprint_result = self.voiceprint_agent.create_voiceprint(
                    audio_file=audio_file,
                    label=target_label,
                    max_duration_check=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
                vp_id = self.local_manager.add_voiceprint(
                    label=target_label,
                    voiceprint_data=voiceprint_result["voiceprint"],
                    source_file=str(audio_file),
                    metadata={
                        "recreated_at": datetime.now().isoformat(),
                        "sync_strategy": "recreate"
                    }
                )
                
                result["actions_performed"].extend(["created_remote_voiceprint", "created_local_voiceprint"])
                self.logger.info(f"‚úÖ Voiceprints –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã (ID: {vp_id})")
            else:
                raise FileNotFoundError(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
                
        except Exception as e:
            result["errors"].append(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è voiceprints: {e}")
        
        return result


def print_sync_report(sync_result: Dict) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
    
    Args:
        sync_result: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    print("\n" + "="*80)
    print("üîÑ –û–¢–ß–ï–¢ –ü–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –û–ë–†–ê–ó–¶–û–í –ì–û–õ–û–°–û–í")
    print("="*80)
    
    status = sync_result["status"]
    if status == "no_sync_needed":
        print("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø")
        print("   –õ–æ–∫–∞–ª—å–Ω–∞—è –∏ —É–¥–∞–ª–µ–Ω–Ω–∞—è –±–∞–∑—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    elif status == "completed":
        print("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
    elif status == "partial":
        print("‚ö†Ô∏è –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –ß–ê–°–¢–ò–ß–ù–û")
    elif status == "failed":
        print("‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨")
    else:
        print(f"üîÑ –°–¢–ê–¢–£–°: {status}")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if sync_result.get("actions_performed"):
        print(f"\nüìã –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        for action in sync_result["actions_performed"]:
            print(f"   ‚úì {action}")
    
    # –û—à–∏–±–∫–∏
    if sync_result.get("errors"):
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in sync_result["errors"]:
            print(f"   ‚Ä¢ {error}")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if sync_result.get("final_state"):
        final = sync_result["final_state"]
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
        print(f"   –õ–æ–∫–∞–ª—å–Ω—ã—Ö voiceprints: {final['local_count']}")
        print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints: {final['remote_count']}")
        
        target = final["target_voiceprint"]
        print(f"   –¶–µ–ª–µ–≤–æ–π voiceprint '{target['label']}':")
        print(f"     –õ–æ–∫–∞–ª—å–Ω–æ: {'‚úÖ' if target['local'] else '‚ùå'}")
        print(f"     –£–¥–∞–ª–µ–Ω–Ω–æ: {target['remote_count']} —à—Ç.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
  keep_local   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  keep_remote  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ API)
  recreate     - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python sync_voiceprints.py                           # –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  python sync_voiceprints.py --sync keep_local         # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  python sync_voiceprints.py --sync recreate           # –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
  python sync_voiceprints.py --export report.json     # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
    )
    
    parser.add_argument(
        "--sync",
        choices=["keep_local", "keep_remote", "recreate"],
        help="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"
    )
    
    parser.add_argument(
        "--export",
        type=Path,
        help="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –≥–æ–ª–æ—Å–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        try:
            config = get_config()
            api_key = config.get_api_key("pyannote")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ pyannote: {e}")
            logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PYANNOTE_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
        synchronizer = VoiceprintSynchronizer(api_key)
        
        if args.sync:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            sync_result = synchronizer.sync_voiceprints(args.sync)
        else:
            # –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑
            analysis = synchronizer.analyze_sync_status()
            sync_result = {"status": "analysis_only", "analysis": analysis}
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print_sync_report(sync_result)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if args.export:
            report_data = {
                "timestamp": datetime.now().isoformat(),
                "sync_result": sync_result
            }
            
            with open(args.export, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {args.export}")
        
        logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
