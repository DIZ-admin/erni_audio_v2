# pipeline/merge_agent.py

import logging
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from .base_agent import BaseAgent
from .validation_mixin import ValidationMixin


@dataclass
class MergeMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–ª–∏—è–Ω–∏—è"""
    total_asr_segments: int
    total_diar_segments: int
    merged_segments: int
    unmatched_asr_segments: int
    unmatched_diar_segments: int
    average_overlap_ratio: float
    speaker_distribution: Dict[str, int]
    confidence_score: float


class MergeAgent(BaseAgent, ValidationMixin):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Å–ª–∏—è–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–ª–∏—è–Ω–∏—è
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    - –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–ª–∏—è–Ω–∏—è
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    """

    def __init__(self, merge_strategy: str = "best_overlap",
                 min_overlap_threshold: float = 0.1,
                 confidence_threshold: float = 0.5):
        """
        Args:
            merge_strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ª–∏—è–Ω–∏—è ("best_overlap", "weighted", "majority_vote")
            min_overlap_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            confidence_threshold: –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        BaseAgent.__init__(self, name="MergeAgent")
        ValidationMixin.__init__(self)

        self.merge_strategy = merge_strategy
        self.min_overlap_threshold = min_overlap_threshold
        self.confidence_threshold = confidence_threshold

        self.log_with_emoji("info", "üîó", f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: {merge_strategy}")

    def calculate_overlap(self, seg1: Dict[str, Any], seg2: Dict[str, Any]) -> Tuple[float, float]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏

        Args:
            seg1: –ü–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
            seg2: –í—Ç–æ—Ä–æ–π —Å–µ–≥–º–µ–Ω—Ç

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∞–±—Å–æ–ª—é—Ç–Ω–æ–µ_–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ_–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)
        """
        overlap_start = max(seg1["start"], seg2["start"])
        overlap_end = min(seg1["end"], seg2["end"])
        overlap_duration = max(0, overlap_end - overlap_start)

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ASR —Å–µ–≥–º–µ–Ω—Ç–∞
        asr_duration = seg1["end"] - seg1["start"]
        overlap_ratio = overlap_duration / asr_duration if asr_duration > 0 else 0

        return overlap_duration, overlap_ratio

    def find_best_speaker_overlap(self, asr_seg: Dict[str, Any],
                                diar_segments: List[Dict[str, Any]]) -> Tuple[str, float, float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é

        Args:
            asr_seg: ASR —Å–µ–≥–º–µ–Ω—Ç
            diar_segments: –°–ø–∏—Å–æ–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (speaker, overlap_duration, confidence)
        """
        best_speaker = "UNK"
        best_overlap = 0
        best_ratio = 0

        for diar_seg in diar_segments:
            overlap_duration, overlap_ratio = self.calculate_overlap(asr_seg, diar_seg)

            if overlap_duration > best_overlap and overlap_ratio >= self.min_overlap_threshold:
                best_overlap = overlap_duration
                best_ratio = overlap_ratio
                best_speaker = diar_seg["speaker"]

        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
        confidence = min(1.0, best_ratio * 2)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ 1.0

        return best_speaker, best_overlap, confidence

    def find_speaker_weighted(self, asr_seg: Dict[str, Any],
                            diar_segments: List[Dict[str, Any]]) -> Tuple[str, float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ø–∏–∫–µ—Ä–∞ –ø–æ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é

        Args:
            asr_seg: ASR —Å–µ–≥–º–µ–Ω—Ç
            diar_segments: –°–ø–∏—Å–æ–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (speaker, confidence)
        """
        speaker_weights = {}
        total_weight = 0

        for diar_seg in diar_segments:
            overlap_duration, overlap_ratio = self.calculate_overlap(asr_seg, diar_seg)

            if overlap_ratio >= self.min_overlap_threshold:
                speaker = diar_seg["speaker"]
                weight = overlap_duration * overlap_ratio  # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å

                speaker_weights[speaker] = speaker_weights.get(speaker, 0) + weight
                total_weight += weight

        if not speaker_weights:
            return "UNK", 0.0

        # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∏–∫–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º
        best_speaker = max(speaker_weights.items(), key=lambda x: x[1])
        confidence = best_speaker[1] / total_weight if total_weight > 0 else 0

        return best_speaker[0], confidence

    def find_speaker_majority_vote(self, asr_seg: Dict[str, Any],
                                 diar_segments: List[Dict[str, Any]]) -> Tuple[str, float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ø–∏–∫–µ—Ä–∞ –ø–æ –º–∞–∂–æ—Ä–∏—Ç–∞—Ä–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é

        Args:
            asr_seg: ASR —Å–µ–≥–º–µ–Ω—Ç
            diar_segments: –°–ø–∏—Å–æ–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (speaker, confidence)
        """
        speaker_votes = {}
        total_votes = 0

        # –†–∞–∑–±–∏–≤–∞–µ–º ASR —Å–µ–≥–º–µ–Ω—Ç –Ω–∞ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        segment_duration = asr_seg["end"] - asr_seg["start"]
        num_samples = max(1, int(segment_duration * 10))  # 10 —Å—ç–º–ø–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

        for i in range(num_samples):
            sample_time = asr_seg["start"] + (i / num_samples) * segment_duration

            # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∏–∫–µ—Ä–∞ –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ –≤—Ä–µ–º–µ–Ω–∏
            for diar_seg in diar_segments:
                if diar_seg["start"] <= sample_time <= diar_seg["end"]:
                    speaker = diar_seg["speaker"]
                    speaker_votes[speaker] = speaker_votes.get(speaker, 0) + 1
                    total_votes += 1
                    break

        if not speaker_votes:
            return "UNK", 0.0

        # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∏–∫–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        best_speaker = max(speaker_votes.items(), key=lambda x: x[1])
        confidence = best_speaker[1] / total_votes if total_votes > 0 else 0

        return best_speaker[0], confidence

    def merge_segments(self, asr_seg: Dict[str, Any],
                      diar_segments: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç ASR —Å–µ–≥–º–µ–Ω—Ç —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        Args:
            asr_seg: ASR —Å–µ–≥–º–µ–Ω—Ç
            diar_segments: –°–ø–∏—Å–æ–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤

        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
        """
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–ª–∏—è–Ω–∏—è
        if self.merge_strategy == "best_overlap":
            speaker, overlap, confidence = self.find_best_speaker_overlap(asr_seg, diar_segments)
        elif self.merge_strategy == "weighted":
            speaker, confidence = self.find_speaker_weighted(asr_seg, diar_segments)
        elif self.merge_strategy == "majority_vote":
            speaker, confidence = self.find_speaker_majority_vote(asr_seg, diar_segments)
        else:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
            speaker, overlap, confidence = self.find_best_speaker_overlap(asr_seg, diar_segments)

        # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ
        if confidence < self.confidence_threshold:
            speaker = f"UNK_{speaker}" if speaker != "UNK" else "UNK"

        merged_segment = {
            "start": asr_seg["start"],
            "end": asr_seg["end"],
            "speaker": speaker,
            "text": asr_seg["text"].strip(),
            "confidence": confidence
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if "language" in asr_seg:
            merged_segment["language"] = asr_seg["language"]

        if "words" in asr_seg:
            merged_segment["words"] = asr_seg["words"]

        return merged_segment

    def validate_segment(self, segment: Dict[str, Any], segment_index: int = 0) -> List[str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.

        Args:
            segment: –°–µ–≥–º–µ–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            segment_index: –ò–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["start", "end"]
        for field in required_fields:
            if field not in segment:
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")

        if issues:  # –ï—Å–ª–∏ –Ω–µ—Ç –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π, –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            return issues

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(segment["start"], (int, float)):
            issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: 'start' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        if not isinstance(segment["end"], (int, float)):
            issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: 'end' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        if isinstance(segment["start"], (int, float)) and isinstance(segment["end"], (int, float)):
            if segment["start"] < 0:
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ({segment['start']})")

            if segment["end"] < 0:
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è ({segment['end']})")

            if segment["start"] >= segment["end"]:
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ ({segment['start']}-{segment['end']})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
            duration = segment["end"] - segment["start"]
            if duration > 24 * 3600:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç ({duration/3600:.1f}—á)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º speaker ID –µ—Å–ª–∏ –µ—Å—Ç—å
        if "speaker" in segment:
            speaker = segment["speaker"]
            if not isinstance(speaker, str):
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: 'speaker' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            elif not speaker.strip():
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: –ø—É—Å—Ç–æ–π speaker ID")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if "text" in segment:
            text = segment["text"]
            if not isinstance(text, str):
                issues.append(f"–°–µ–≥–º–µ–Ω—Ç {segment_index}: 'text' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

        return issues

    def validate_segments_overlap(self, segments: List[Dict[str, Any]]) -> List[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏.

        Args:
            segments: –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏
        """
        issues = []

        for i in range(len(segments) - 1):
            current = segments[i]
            next_seg = segments[i + 1]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            if not all(field in current for field in ["start", "end"]) or \
               not all(field in next_seg for field in ["start", "end"]):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            if current["end"] > next_seg["start"]:
                overlap = current["end"] - next_seg["start"]
                issues.append(
                    f"–°–µ–≥–º–µ–Ω—Ç—ã {i} –∏ {i+1}: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ {overlap:.3f}—Å "
                    f"({current['start']:.3f}-{current['end']:.3f} –∏ {next_seg['start']:.3f}-{next_seg['end']:.3f})"
                )

        return issues

    def validate_segments(self, segments: List[Dict[str, Any]]) -> List[str]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–ª–∏—è–Ω–∏–µ–º.

        Args:
            segments: –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        all_issues = []

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        for i, seg in enumerate(segments):
            segment_issues = self.validate_segment(seg, i)
            all_issues.extend(segment_issues)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        overlap_issues = self.validate_segments_overlap(segments)
        all_issues.extend(overlap_issues)

        return all_issues

    def calculate_merge_metrics(self, diar: List[Dict[str, Any]],
                              asr: List[Dict[str, Any]],
                              merged: List[Dict[str, Any]]) -> MergeMetrics:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–ª–∏—è–Ω–∏—è

        Args:
            diar: –î–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            asr: ASR —Å–µ–≥–º–µ–Ω—Ç—ã
            merged: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã

        Returns:
            –ú–µ—Ç—Ä–∏–∫–∏ —Å–ª–∏—è–Ω–∏—è
        """
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤
        speaker_distribution = {}
        total_overlap = 0
        confidence_sum = 0

        for seg in merged:
            speaker = seg["speaker"]
            speaker_distribution[speaker] = speaker_distribution.get(speaker, 0) + 1

            if "confidence" in seg:
                confidence_sum += seg["confidence"]

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        for asr_seg in asr:
            best_overlap = 0
            for diar_seg in diar:
                overlap, _ = self.calculate_overlap(asr_seg, diar_seg)
                best_overlap = max(best_overlap, overlap)
            total_overlap += best_overlap

        avg_overlap_ratio = total_overlap / sum(seg["end"] - seg["start"] for seg in asr) if asr else 0
        avg_confidence = confidence_sum / len(merged) if merged else 0

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        unmatched_asr = sum(1 for seg in merged if seg["speaker"].startswith("UNK"))
        unmatched_diar = len(diar) - len([seg for seg in merged if not seg["speaker"].startswith("UNK")])

        return MergeMetrics(
            total_asr_segments=len(asr),
            total_diar_segments=len(diar),
            merged_segments=len(merged),
            unmatched_asr_segments=unmatched_asr,
            unmatched_diar_segments=max(0, unmatched_diar),
            average_overlap_ratio=avg_overlap_ratio,
            speaker_distribution=speaker_distribution,
            confidence_score=avg_confidence
        )

    def resolve_overlaps(self, segments: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö

        Args:
            segments: –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        """
        if not segments:
            return segments

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        sorted_segments = sorted(segments, key=lambda x: x["start"])
        resolved_segments = []
        overlap_count = 0

        for i, current in enumerate(sorted_segments):
            if not resolved_segments:
                resolved_segments.append(current.copy())
                continue

            previous = resolved_segments[-1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º
            if current["start"] < previous["end"]:
                overlap_duration = previous["end"] - current["start"]
                overlap_count += 1

                # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
                if overlap_duration < 0.1:
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                    previous["end"] = current["start"]
                    resolved_segments.append(current.copy())
                    self.log_with_emoji("debug", "üîß", f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: {overlap_duration:.3f}—Å")

                elif overlap_duration < 0.5:
                    # –ù–µ–±–æ–ª—å—à–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - –¥–µ–ª–∏–º –ø–æ–ø–æ–ª–∞–º
                    split_point = (previous["end"] + current["start"]) / 2
                    previous["end"] = split_point
                    current_copy = current.copy()
                    current_copy["start"] = split_point
                    resolved_segments.append(current_copy)
                    self.log_with_emoji("debug", "‚úÇÔ∏è", f"–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–∞–º: {overlap_duration:.3f}—Å")

                else:
                    # –ë–æ–ª—å—à–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - –≤—ã–±–∏—Ä–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç —Å –±–æ–ª—å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
                    prev_confidence = previous.get("confidence", 0.5)
                    curr_confidence = current.get("confidence", 0.5)

                    if curr_confidence > prev_confidence + 0.1:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
                        resolved_segments[-1] = current.copy()
                        self.log_with_emoji("debug", "üîÑ", f"–ó–∞–º–µ–Ω–µ–Ω —Å–µ–≥–º–µ–Ω—Ç —Å –º–µ–Ω—å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {overlap_duration:.3f}—Å")
                    elif prev_confidence > curr_confidence + 0.1:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
                        self.log_with_emoji("debug", "‚è≠Ô∏è", f"–ü—Ä–æ–ø—É—â–µ–Ω —Å–µ–≥–º–µ–Ω—Ç —Å –º–µ–Ω—å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {overlap_duration:.3f}—Å")
                        continue
                    else:
                        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã - —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
                        previous["end"] = current["start"] + overlap_duration / 2
                        current_copy = current.copy()
                        current_copy["start"] = previous["end"]
                        resolved_segments.append(current_copy)
                        self.log_with_emoji("debug", "‚öñÔ∏è", f"–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {overlap_duration:.3f}—Å")
            else:
                resolved_segments.append(current.copy())

        if overlap_count > 0:
            self.log_with_emoji("info", "üîß", f"–†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {overlap_count}")

        return resolved_segments

    def post_process_segments(self, merged: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤:
        - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        - –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞

        Args:
            merged: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã

        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        """
        if not merged:
            return merged

        self.log_with_emoji("info", "üîß", "–ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")

        # 1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        sorted_segments = sorted(merged, key=lambda x: x["start"])

        # 2. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        resolved_segments = self.resolve_overlaps(sorted_segments)

        # 3. –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        cleaned_segments = []
        for i, seg in enumerate(resolved_segments):
            text = seg["text"].strip()
            if not text:
                self.log_with_emoji("debug", "‚è≠Ô∏è", f"–ü—Ä–æ–ø—É—Å–∫–∞—é –ø—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç {i}")
                continue

            cleaned_seg = seg.copy()
            cleaned_seg["text"] = text
            cleaned_segments.append(cleaned_seg)

        # 4. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
        processed = []
        for seg in cleaned_segments:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
            if (processed and
                processed[-1]["speaker"] == seg["speaker"] and
                abs(processed[-1]["end"] - seg["start"]) < 1.0):  # –†–∞–∑—Ä—ã–≤ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
                processed[-1]["end"] = seg["end"]
                processed[-1]["text"] += " " + seg["text"]

                # –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (—Å—Ä–µ–¥–Ω–µ–µ)
                if "confidence" in processed[-1] and "confidence" in seg:
                    processed[-1]["confidence"] = (processed[-1]["confidence"] + seg["confidence"]) / 2

                self.log_with_emoji("debug", "üîó", f"–û–±—ä–µ–¥–∏–Ω–∏–ª —Å–æ—Å–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Å–ø–∏–∫–µ—Ä–∞ {seg['speaker']}")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                processed.append(seg)

        self.log_with_emoji("info", "‚úÖ", f"–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(merged)} ‚Üí {len(processed)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        return processed

    def run(self, diar: List[Dict[str, Any]], asr: List[Dict[str, Any]],
            enable_post_processing: bool = True,
            save_metrics: bool = False) -> List[Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–ª–∏—è–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

        Args:
            diar: –î–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
            asr: ASR —Å–µ–≥–º–µ–Ω—Ç—ã
            enable_post_processing: –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É
            save_metrics: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–∏—è–Ω–∏—è

        Returns:
            –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        """
        self.start_operation("—Å–ª–∏—è–Ω–∏–µ")

        try:
            self.log_with_emoji("info", "üîó", f"–ù–∞—á–∏–Ω–∞—é —Å–ª–∏—è–Ω–∏–µ: {len(diar)} diar + {len(asr)} asr —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            diar_issues = self.validate_segments(diar)
            asr_issues = self.validate_segments(asr)

            if diar_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã –≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {len(diar_issues)}")
                for issue in diar_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    self.log_with_emoji("warning", "   ", issue)

            if asr_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã –≤ ASR: {len(asr_issues)}")
                for issue in asr_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    self.log_with_emoji("warning", "   ", issue)

            if not asr:
                self.log_with_emoji("warning", "‚ö†Ô∏è", "–ù–µ—Ç ASR —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–∏—è–Ω–∏—è")
                self.end_operation("—Å–ª–∏—è–Ω–∏–µ", success=True)
                return []

            if not diar:
                self.log_with_emoji("warning", "‚ö†Ô∏è", "–ù–µ—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ - –≤—Å–µ —Å–ø–∏–∫–µ—Ä—ã –±—É–¥—É—Ç UNK")
                result = [{"start": seg["start"], "end": seg["end"], "speaker": "UNK",
                         "text": seg["text"].strip(), "confidence": 0.0} for seg in asr]
                self.end_operation("—Å–ª–∏—è–Ω–∏–µ", success=True)
                return result

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            diar_sorted = sorted(diar, key=lambda x: x["start"])
            asr_sorted = sorted(asr, key=lambda x: x["start"])

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–∏—è–Ω–∏–µ
            merged = []
            for asr_seg in asr_sorted:
                merged_seg = self.merge_segments(asr_seg, diar_sorted)
                merged.append(merged_seg)

            self.log_with_emoji("info", "‚úÖ", f"–ë–∞–∑–æ–≤–æ–µ —Å–ª–∏—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(merged)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

            # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            if enable_post_processing:
                merged = self.post_process_segments(merged)

            # –í—ã—á–∏—Å–ª—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = self.calculate_merge_metrics(diar, asr, merged)
            self.log_with_emoji("info", "üìä", "–ú–µ—Ç—Ä–∏–∫–∏ —Å–ª–∏—è–Ω–∏—è:")
            self.log_with_emoji("info", "   ", f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {metrics.confidence_score:.3f}")
            self.log_with_emoji("info", "   ", f"–ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö ASR: {metrics.unmatched_asr_segments}")
            self.log_with_emoji("info", "   ", f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤: {dict(list(metrics.speaker_distribution.items())[:3])}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if save_metrics:
                self._save_metrics(metrics)

            self.log_with_emoji("info", "üéØ", f"–°–ª–∏—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(merged)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            self.end_operation("—Å–ª–∏—è–Ω–∏–µ", success=True)
            return merged

        except Exception as e:
            self.end_operation("—Å–ª–∏—è–Ω–∏–µ", success=False)
            self.handle_error(e, "—Å–ª–∏—è–Ω–∏–µ", reraise=True)

    def _save_metrics(self, metrics: MergeMetrics) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–∏—è–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            from pathlib import Path
            import json
            from datetime import datetime

            metrics_data = {
                "timestamp": datetime.now().isoformat(),
                "merge_strategy": self.merge_strategy,
                "min_overlap_threshold": self.min_overlap_threshold,
                "confidence_threshold": self.confidence_threshold,
                "metrics": {
                    "total_asr_segments": metrics.total_asr_segments,
                    "total_diar_segments": metrics.total_diar_segments,
                    "merged_segments": metrics.merged_segments,
                    "unmatched_asr_segments": metrics.unmatched_asr_segments,
                    "unmatched_diar_segments": metrics.unmatched_diar_segments,
                    "average_overlap_ratio": metrics.average_overlap_ratio,
                    "speaker_distribution": metrics.speaker_distribution,
                    "confidence_score": metrics.confidence_score
                }
            }

            metrics_dir = Path("data/interim")
            metrics_dir.mkdir(parents=True, exist_ok=True)
            metrics_file = metrics_dir / "merge_metrics.json"

            with open(metrics_file, 'w', encoding='utf-8') as f:
                json.dump(metrics_data, f, indent=2, ensure_ascii=False)

            self.log_with_emoji("info", "üìä", f"–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metrics_file}")

        except Exception as e:
            self.log_with_emoji("error", "‚ùå", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")

    def get_merge_strategies(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–ª–∏—è–Ω–∏—è"""
        return ["best_overlap", "weighted", "majority_vote"]

    def set_merge_strategy(self, strategy: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–ª–∏—è–Ω–∏—è"""
        if strategy not in self.get_merge_strategies():
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")

        self.merge_strategy = strategy
        self.log_with_emoji("info", "üîÑ", f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–ª–∏—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {strategy}")
