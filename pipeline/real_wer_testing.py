#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WER —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç–æ—è—â–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
–û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –º–æ–∫–∏ –∏ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import argparse
import logging
import sys
import os
import time
import json
from pathlib import Path
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # –ï—Å–ª–∏ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    env_file = Path('.env')
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

from pipeline.transcription_quality_tester import TranscriptionQualityTester, TestScenario
from pipeline.transcription_agent import TranscriptionAgent
from pipeline.replicate_agent import ReplicateAgent


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = logging.DEBUG if verbose else logging.INFO
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path('logs').mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler('logs/real_wer_testing.log', encoding='utf-8')
    file_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(level)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('openai').setLevel(logging.WARNING)


def validate_api_keys() -> tuple:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π"""
    openai_key = os.getenv('OPENAI_API_KEY')
    replicate_key = os.getenv('REPLICATE_API_TOKEN')
    pyannote_key = os.getenv('PYANNOTE_API_KEY')
    
    if not openai_key:
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á: export OPENAI_API_KEY='your-key-here'")
        sys.exit(1)
    
    if not replicate_key:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: REPLICATE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("Replicate –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    
    if not pyannote_key:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: PYANNOTE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    print(f"‚úÖ OpenAI API –∫–ª—é—á: {openai_key[:10]}...")
    if replicate_key:
        print(f"‚úÖ Replicate API –∫–ª—é—á: {replicate_key[:10]}...")
    if pyannote_key:
        print(f"‚úÖ Pyannote API –∫–ª—é—á: {pyannote_key[:10]}...")
    
    return openai_key, replicate_key


def create_real_test_scenarios(use_segments: bool = True) -> List[TestScenario]:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    scenarios = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ã
    test_files = [
        ("data/raw/Testdatei.m4a", "–ù–µ–º–µ—Ü–∫–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "de"),
        ("data/interim/Sitzung Erweiterte GL 17.04.2025_converted.wav", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞", "de"),
        ("data/interim/Schongiland 3_converted.wav", "–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å Schongiland", "de"),
    ]

    for file_path, description, language in test_files:
        audio_path = Path(file_path)

        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã, –∏—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        if use_segments:
            segment_path = audio_path.parent / f"{audio_path.stem}_segment_2.0min{audio_path.suffix}"
            if segment_path.exists():
                audio_path = segment_path
                description += " (2-–º–∏–Ω—É—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç)"

        if audio_path.exists():
            # –ò—â–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
            reference_text = find_reference_text(audio_path, file_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–Ω—ã–π —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            accurate_reference_file = Path("data/raw") / f"{Path(file_path).stem}_accurate_reference.txt"
            if not accurate_reference_file.exists():
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {audio_path.name} - –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
                continue

            scenario = TestScenario(
                name=audio_path.stem,
                audio_file=audio_path,
                reference_text=reference_text,
                description=description,
                language=language,
                expected_speakers=2
            )
            scenarios.append(scenario)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name}")
            print(f"   –§–∞–π–ª: {audio_path}")
            print(f"   –†–∞–∑–º–µ—Ä: {audio_path.stat().st_size / (1024*1024):.2f} MB")
            print(f"   –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(reference_text)} —Å–∏–º–≤–æ–ª–æ–≤")

    return scenarios


def find_reference_text(audio_path: Path, original_file_path: str = None) -> str:
    """–ò—â–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–º–µ–Ω—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if original_file_path:
        original_stem = Path(original_file_path).stem
    else:
        # –ï—Å–ª–∏ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç "_segment_", –∏–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        if "_segment_" in audio_path.stem:
            original_stem = audio_path.stem.split("_segment_")[0]
        else:
            original_stem = audio_path.stem

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–π —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _accurate_reference.txt
    accurate_reference_file = Path("data/raw") / f"{original_stem}_accurate_reference.txt"
    if accurate_reference_file.exists():
        return accurate_reference_file.read_text(encoding='utf-8').strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _reference.txt
    reference_file = audio_path.parent / f"{original_stem}_reference.txt"
    if reference_file.exists():
        return reference_file.read_text(encoding='utf-8').strip()

    # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —ç—Ç–∞–ª–æ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
    return ("Guten Tag, das ist eine Testaufnahme f√ºr die automatische Spracherkennung. "
           "Wir testen heute verschiedene Modelle zur Transkription von deutschen Audiodateien.")


def run_real_wer_testing(scenarios: List[TestScenario], models: List[str] = None) -> Dict:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WER"""
    logger = logging.getLogger(__name__)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
    openai_key, replicate_key = validate_api_keys()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = TranscriptionQualityTester(
        openai_api_key=openai_key,
        replicate_api_key=replicate_key
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if models is None:
        models = list(TranscriptionAgent.SUPPORTED_MODELS.keys())
        if replicate_key:
            models.append("replicate-whisper-diarization")
    
    logger.info(f"üß™ –ù–∞—á–∏–Ω–∞—é —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WER")
    logger.info(f"üìã –°—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª–µ–π: {len(models)} - {', '.join(models)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    start_time = time.time()
    
    try:
        results = tester.run_comprehensive_test(scenarios)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        results["test_metadata"] = {
            "test_type": "real_api_testing",
            "mocks_disabled": True,
            "total_duration": time.time() - start_time,
            "models_tested": models,
            "scenarios_count": len(scenarios)
        }
        
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


def save_real_results(results: Dict, output_dir: Path) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    json_path = output_dir / "real_wer_evaluation_results.json"
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report_path = output_dir / "real_wer_evaluation_report.md"
    generate_real_report(results, report_path)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"   JSON: {json_path}")
    print(f"   –û—Ç—á–µ—Ç: {report_path}")


def generate_real_report(results: Dict, output_path: Path) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write("# –û—Ç—á–µ—Ç –æ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ WER\n\n")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = results.get("test_metadata", {})
        f.write(f"**–¢–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {metadata.get('test_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
        f.write(f"**–ú–æ–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã:** {metadata.get('mocks_disabled', False)}\n")
        f.write(f"**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"**–û–±—â–µ–µ –≤—Ä–µ–º—è:** {metadata.get('total_duration', 0):.2f} —Å–µ–∫—É–Ω–¥\n")
        f.write(f"**–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π:** {len(metadata.get('models_tested', []))}\n")
        f.write(f"**–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:** {metadata.get('scenarios_count', 0)}\n\n")
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        f.write("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n")
        f.write("| –ú–æ–¥–µ–ª—å | –¢–æ—á–Ω–æ—Å—Ç—å —Å–ª–æ–≤ | WER | CER | –í—Ä–µ–º—è (—Å) | –°—Ç–æ–∏–º–æ—Å—Ç—å ($) | –£—Å–ø–µ—à–Ω–æ—Å—Ç—å |\n")
        f.write("|--------|---------------|-----|-----|-----------|---------------|------------|\n")
        
        comparison = results.get("model_comparison", {})
        for model_name, stats in sorted(comparison.items(), key=lambda x: x[1].get("word_accuracy", 0), reverse=True):
            f.write(f"| {model_name} | {stats.get('word_accuracy', 0):.3f} | "
                   f"{stats.get('average_wer', 1):.3f} | {stats.get('average_cer', 1):.3f} | "
                   f"{stats.get('average_processing_time', 0):.2f} | "
                   f"{stats.get('average_cost_usd', 0):.4f} | "
                   f"{stats.get('success_rate', 0):.1%} |\n")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        f.write("\n## –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º\n\n")
        for scenario_name, scenario_data in results.get("scenarios", {}).items():
            f.write(f"### {scenario_name}\n\n")
            f.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {scenario_data['scenario_info']['description']}\n")
            f.write(f"**–Ø–∑—ã–∫:** {scenario_data['scenario_info'].get('language', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n")
            f.write(f"**–§–∞–π–ª:** {scenario_data['scenario_info']['audio_file']}\n\n")
            
            for model_name, result in scenario_data.get("model_results", {}).items():
                if result.get("success", False):
                    metrics = result.get("quality_metrics", {})
                    f.write(f"- **{model_name}:** WER={metrics.get('wer', 1):.3f}, "
                           f"CER={metrics.get('cer', 1):.3f}, "
                           f"–≤—Ä–µ–º—è={result.get('processing_time', 0):.2f}—Å, "
                           f"—Å—Ç–æ–∏–º–æ—Å—Ç—å={result.get('estimated_cost', 'N/A')}\n")
                else:
                    f.write(f"- **{model_name}:** ‚ùå –û—à–∏–±–∫–∞ - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n")
            
            f.write("\n")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WER"""
    parser = argparse.ArgumentParser(
        description="–†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WER —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--models',
        nargs='+',
        choices=['whisper-1', 'gpt-4o-mini-transcribe', 'gpt-4o-transcribe', 'replicate'],
        help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    parser.add_argument(
        '--output-dir',
        type=Path,
        default=Path('data/interim'),
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)
    
    print("üî• –†–ï–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WER")
    print("=" * 50)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–µ API –≤—ã–∑–æ–≤—ã!")
    print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –∏ —Å—Ç–æ–∏—Ç—å –¥–µ–Ω–µ–≥!")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏)
    scenarios = create_real_test_scenarios(use_segments=True)
    if not scenarios:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python3 create_accurate_references.py")
        sys.exit(1)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"\nüìã –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    for scenario in scenarios:
        print(f"  - {scenario.name}: {scenario.description}")
    
    confirm = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/N): ")
    if confirm.lower() != 'y':
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        results = run_real_wer_testing(scenarios, args.models)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_real_results(results, args.output_dir)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print(f"\n‚úÖ –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        comparison = results.get("model_comparison", {})
        if comparison:
            print(f"\nüèÜ –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤:")
            sorted_models = sorted(comparison.items(), key=lambda x: x[1].get("word_accuracy", 0), reverse=True)
            for i, (model_name, stats) in enumerate(sorted_models[:3], 1):
                print(f"  {i}. {model_name}: {stats.get('word_accuracy', 0):.3f} (WER: {stats.get('average_wer', 1):.3f})")
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
