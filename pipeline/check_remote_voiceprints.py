#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ pyannote.ai

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ pyannote.ai API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –î–æ—Å—Ç—É–ø–Ω—ã–µ voiceprints –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
- –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import logging
import sys
import os
from pathlib import Path
from typing import Dict, List, Optional
import argparse
import json
from datetime import datetime
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent.parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞."""
    env_path = Path(__file__).parent.parent / ".env"
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

load_env_file()

from pipeline.voiceprint_manager import VoiceprintManager
from pipeline.config import get_config


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )


class PyannoteAPIChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API pyannote.ai –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints."""
    
    def __init__(self, api_key: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è checker'–∞.
        
        Args:
            api_key: API –∫–ª—é—á pyannote.ai
        """
        self.api_key = api_key
        self.base_url = "https://api.pyannote.ai/v1"
        self.logger = logging.getLogger(__name__)
    
    def validate_api_key(self) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        self.logger.info("üîë –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á pyannote.ai...")
        
        result = {
            "is_valid": False,
            "error": None,
            "account_info": None
        }
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
            headers = {"Authorization": f"Bearer {self.api_key}"}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ endpoint, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            response = requests.get(
                f"{self.base_url}/jobs",  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ jobs
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                result["is_valid"] = True
                self.logger.info("‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω")
            elif response.status_code == 401:
                result["error"] = "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"
                self.logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            elif response.status_code == 403:
                result["error"] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
                self.logger.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            else:
                result["error"] = f"HTTP {response.status_code}: {response.text}"
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {result['error']}")
                
        except requests.RequestException as e:
            result["error"] = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        return result
    
    def get_recent_jobs(self, limit: int = 20) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö jobs —Å —Å–µ—Ä–≤–µ—Ä–∞.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jobs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è

        Returns:
            –°–ø–∏—Å–æ–∫ jobs
        """
        self.logger.info(f"üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö jobs (–ª–∏–º–∏—Ç: {limit})...")

        try:
            headers = {"Authorization": f"Bearer {self.api_key}"}

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ jobs —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            response = requests.get(
                f"{self.base_url}/jobs",
                headers=headers,
                params={"take": min(limit, 100)},  # API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 100
                timeout=30
            )

            if response.status_code != 200:
                error_text = ""
                try:
                    error_detail = response.json().get("detail", response.text)
                    error_text = f": {error_detail}"
                except:
                    error_text = f": {response.text}"
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è jobs: HTTP {response.status_code}{error_text}")

            jobs_data = response.json()
            jobs = jobs_data.get("items", [])
            total = jobs_data.get("total", 0)

            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(jobs)} jobs –∏–∑ {total} –æ–±—â–∏—Ö")

            return jobs

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è jobs: {e}")
            return []
    
    def get_voiceprint_jobs(self, limit: int = 50) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ voiceprint jobs —Å —Å–µ—Ä–≤–µ—Ä–∞.

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jobs –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è

        Returns:
            –°–ø–∏—Å–æ–∫ voiceprint jobs —Å –¥–µ—Ç–∞–ª—è–º–∏
        """
        self.logger.info(f"üéØ –ò—â—É voiceprint jobs (–ª–∏–º–∏—Ç: {limit})...")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ jobs
        successful_jobs = self.get_jobs_by_status("succeeded", limit)
        self.logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(successful_jobs)} —É—Å–ø–µ—à–Ω—ã—Ö jobs")

        voiceprint_jobs = []

        for job in successful_jobs:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ job
            job_details = self.get_job_details(job.get("id", ""))
            if job_details and self._is_voiceprint_job_from_details(job_details):
                voiceprint_jobs.append(job_details)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ jobs
        if len(voiceprint_jobs) < 5:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ jobs –¥–ª—è –ø–æ–∏—Å–∫–∞ voiceprint jobs...")
            all_jobs = self.get_recent_jobs(limit)

            for job in all_jobs:
                if job.get("id") not in [vj.get("id") for vj in voiceprint_jobs]:
                    job_details = self.get_job_details(job.get("id", ""))
                    if job_details and self._is_voiceprint_job_from_details(job_details):
                        voiceprint_jobs.append(job_details)

        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(voiceprint_jobs)} voiceprint jobs")
        return voiceprint_jobs

    def get_jobs_by_status(self, status: str, limit: int = 50) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç jobs —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.

        Args:
            status: –°—Ç–∞—Ç—É—Å jobs (succeeded, failed, pending, etc.)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jobs

        Returns:
            –°–ø–∏—Å–æ–∫ jobs
        """
        try:
            headers = {"Authorization": f"Bearer {self.api_key}"}

            response = requests.get(
                f"{self.base_url}/jobs",
                headers=headers,
                params={"take": min(limit, 100), "status": status},
                timeout=30
            )

            if response.status_code == 200:
                jobs_data = response.json()
                return jobs_data.get("items", [])
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å jobs —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}: HTTP {response.status_code}")
                return []

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è jobs —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}: {e}")
            return []

    def _is_voiceprint_job_from_details(self, job_details: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ job voiceprint job –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

        Args:
            job_details: –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ job'–∞

        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ voiceprint job
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ voiceprint –≤ output
        output = job_details.get("output", {})
        has_voiceprint = "voiceprint" in output and output.get("voiceprint") is not None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø job'–∞ –∏–ª–∏ endpoint
        job_type = str(job_details.get("type", "")).lower()
        endpoint = str(job_details.get("endpoint", "")).lower()

        return (
            has_voiceprint or
            "voiceprint" in job_type or
            "voiceprint" in endpoint
        )
    
    def get_job_details(self, job_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ job.
        
        Args:
            job_id: ID job'–∞
            
        Returns:
            –î–µ—Ç–∞–ª–∏ job'–∞ –∏–ª–∏ None
        """
        if not job_id:
            return None
            
        try:
            headers = {"Authorization": f"Bearer {self.api_key}"}
            
            response = requests.get(
                f"{self.base_url}/jobs/{job_id}",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ job {job_id}: HTTP {response.status_code}")
                return None
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π job {job_id}: {e}")
            return None
    

    
    def analyze_voiceprint_jobs(self, jobs: List[Dict]) -> Dict[str, any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç voiceprint jobs.
        
        Args:
            jobs: –°–ø–∏—Å–æ–∫ voiceprint jobs
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        analysis = {
            "total_jobs": len(jobs),
            "successful_jobs": 0,
            "failed_jobs": 0,
            "pending_jobs": 0,
            "voiceprints_created": [],
            "recent_activity": [],
            "status_distribution": {},
            "creation_dates": []
        }
        
        for job in jobs:
            status = job.get("status", "unknown").lower()
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            analysis["status_distribution"][status] = analysis["status_distribution"].get(status, 0) + 1
            
            if status == "succeeded":
                analysis["successful_jobs"] += 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º voiceprint
                output = job.get("output", {})
                voiceprint_data = output.get("voiceprint")

                if voiceprint_data:
                    voiceprint_info = {
                        "job_id": job.get("id"),
                        "created_at": job.get("createdAt") or job.get("created_at"),
                        "voiceprint_size": len(voiceprint_data) if voiceprint_data else 0,
                        "input_url": job.get("input", {}).get("url", "")
                    }
                    analysis["voiceprints_created"].append(voiceprint_info)
                    
            elif status == "failed":
                analysis["failed_jobs"] += 1
            elif status in ["created", "processing", "running"]:
                analysis["pending_jobs"] += 1
            
            # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
            created_at = job.get("createdAt") or job.get("created_at")
            if created_at:
                analysis["creation_dates"].append(created_at)

            # –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            analysis["recent_activity"].append({
                "job_id": job.get("id", "unknown"),
                "status": status,
                "created_at": created_at or "unknown",
                "input_url": job.get("input", {}).get("url", "")
            })
        
        return analysis


def compare_with_local_database(remote_analysis: Dict, local_manager: VoiceprintManager) -> Dict:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ voiceprints —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        remote_analysis: –ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints
        local_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    logger = logging.getLogger(__name__)
    logger.info("üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    local_voiceprints = local_manager.list_voiceprints()
    
    comparison = {
        "local_count": len(local_voiceprints),
        "remote_successful_count": remote_analysis["successful_jobs"],
        "remote_total_count": remote_analysis["total_jobs"],
        "sync_status": "unknown",
        "recommendations": []
    }
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if comparison["local_count"] == 0 and comparison["remote_successful_count"] == 0:
        comparison["sync_status"] = "both_empty"
        comparison["recommendations"].append("–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–µ voiceprints")
    elif comparison["local_count"] > 0 and comparison["remote_successful_count"] == 0:
        comparison["sync_status"] = "local_only"
        comparison["recommendations"].append("–õ–æ–∫–∞–ª—å–Ω—ã–µ voiceprints –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    elif comparison["local_count"] == 0 and comparison["remote_successful_count"] > 0:
        comparison["sync_status"] = "remote_only"
        comparison["recommendations"].append("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å voiceprints, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞")
    else:
        comparison["sync_status"] = "both_have_data"
        comparison["recommendations"].append("–ò –ª–æ–∫–∞–ª—å–Ω–æ, –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    return comparison


def print_analysis_report(api_result: Dict, jobs_analysis: Dict, comparison: Dict) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints.
    
    Args:
        api_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ API
        jobs_analysis: –ê–Ω–∞–ª–∏–∑ jobs
        comparison: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π
    """
    print("\n" + "="*80)
    print("üåê –û–¢–ß–ï–¢ –ü–û –ü–†–û–í–ï–†–ö–ï –£–î–ê–õ–ï–ù–ù–´–• –û–ë–†–ê–ó–¶–û–í –ì–û–õ–û–°–û–í (PYANNOTE.AI)")
    print("="*80)
    
    # –°—Ç–∞—Ç—É—Å API
    print(f"\nüîë –°–¢–ê–¢–£–° API:")
    if api_result["is_valid"]:
        print("   ‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω")
    else:
        print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API: {api_result['error']}")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ jobs
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê JOBS:")
    print(f"   –í—Å–µ–≥–æ voiceprint jobs: {jobs_analysis['total_jobs']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {jobs_analysis['successful_jobs']}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {jobs_analysis['failed_jobs']}")
    print(f"   –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {jobs_analysis['pending_jobs']}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    if jobs_analysis['status_distribution']:
        print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–¢–ê–¢–£–°–ê–ú:")
        for status, count in jobs_analysis['status_distribution'].items():
            percentage = (count / jobs_analysis['total_jobs']) * 100 if jobs_analysis['total_jobs'] > 0 else 0
            print(f"   {status}: {count} ({percentage:.1f}%)")
    
    # –°–æ–∑–¥–∞–Ω–Ω—ã–µ voiceprints
    print(f"\nüéØ –°–û–ó–î–ê–ù–ù–´–ï VOICEPRINTS:")
    if jobs_analysis['voiceprints_created']:
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(jobs_analysis['voiceprints_created'])}")
        for i, vp in enumerate(jobs_analysis['voiceprints_created'][:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            job_id = vp.get('job_id', 'unknown') or 'unknown'
            job_id_short = job_id[:8] + "..." if job_id and len(job_id) > 8 else job_id
            size = vp.get('voiceprint_size', 0)
            created = vp.get('created_at', 'unknown') or 'unknown'
            print(f"   {i+1}. Job: {job_id_short} | –†–∞–∑–º–µ—Ä: {size} —Å–∏–º–≤–æ–ª–æ–≤ | –°–æ–∑–¥–∞–Ω: {created}")
        if len(jobs_analysis['voiceprints_created']) > 5:
            print(f"   ... –∏ –µ—â–µ {len(jobs_analysis['voiceprints_created']) - 5}")
    else:
        print("   –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö voiceprints")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π
    print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° –õ–û–ö–ê–õ–¨–ù–û–ô –ë–ê–ó–û–ô:")
    print(f"   –õ–æ–∫–∞–ª—å–Ω—ã—Ö voiceprints: {comparison['local_count']}")
    print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö: {comparison['remote_successful_count']}")
    print(f"   –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {comparison['sync_status']}")
    
    if comparison['recommendations']:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in comparison['recommendations']:
            print(f"   ‚Ä¢ {rec}")
    
    # –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if jobs_analysis['recent_activity']:
        print(f"\nüìÖ –ù–ï–î–ê–í–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
        for activity in jobs_analysis['recent_activity'][:5]:
            print(f"   {activity['created_at']} | {activity['status']} | Job: {activity['job_id'][:8]}...")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ pyannote.ai",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python check_remote_voiceprints.py                    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  python check_remote_voiceprints.py --jobs-limit 100   # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–ª—å—à–µ jobs
  python check_remote_voiceprints.py --export report.json  # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
  python check_remote_voiceprints.py --verbose          # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
    )
    
    parser.add_argument(
        "--jobs-limit",
        type=int,
        default=50,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jobs –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)"
    )
    
    parser.add_argument(
        "--export",
        type=Path,
        help="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"
    )
    
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –≥–æ–ª–æ—Å–æ–≤ –≤ pyannote.ai")
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        try:
            config = get_config()
            api_key = config.get_api_key("pyannote")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ pyannote: {e}")
            logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PYANNOTE_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º checker –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        checker = PyannoteAPIChecker(api_key)
        local_manager = VoiceprintManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_result = checker.validate_api_key()
        if not api_result["is_valid"]:
            logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {api_result['error']}")
            return 1
        
        # –ü–æ–ª—É—á–∞–µ–º voiceprint jobs
        voiceprint_jobs = checker.get_voiceprint_jobs(args.jobs_limit)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º jobs
        jobs_analysis = checker.analyze_voiceprint_jobs(voiceprint_jobs)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π
        comparison = compare_with_local_database(jobs_analysis, local_manager)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print_analysis_report(api_result, jobs_analysis, comparison)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if args.export:
            report_data = {
                "timestamp": datetime.now().isoformat(),
                "api_status": api_result,
                "jobs_analysis": jobs_analysis,
                "local_comparison": comparison
            }
            
            with open(args.export, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {args.export}")
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
