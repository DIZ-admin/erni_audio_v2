# pipeline/audio_agent.py

import subprocess
import tempfile
import uuid
import os
from pathlib import Path
from typing import Tuple, Union, Optional

from .base_agent import BaseAgent
from .validation_mixin import ValidationMixin
from .rate_limit_mixin import RateLimitMixin
from .pyannote_media_agent import PyannoteMediaAgent

TARGET_SR = 16_000  # 16 kHz for Whisper & Pyannote

class AudioLoaderAgent(BaseAgent, ValidationMixin, RateLimitMixin):
    """
    –ê–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥:
      - –ª–∏–±–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (mp3, wav, mp4 ‚Ä¶)
      - –ª–∏–±–æ URL –Ω–∞ WAV
    –∏ –≤—ã–¥–∞—ë—Ç:
      (local_wav_path: Path, wav_url: str)
    –ï—Å–ª–∏ input_path.exists(), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ 16kHz-mono WAV.
    –ï—Å–ª–∏ —É –Ω–∞—Å —Ñ–ª–∞–≥ --remote-wav-url, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º upload –∏ –±–µ—Ä—ë–º URL.
    –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ pyannote.ai Media API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å.
    """

    def __init__(self,
                 remote_wav_url: Optional[str] = None,
                 pyannote_api_key: Optional[str] = None):
        """
        Args:
            remote_wav_url: –ì–æ—Ç–æ–≤—ã–π URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É)
            pyannote_api_key: API –∫–ª—é—á –¥–ª—è pyannote.ai (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ env)
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        BaseAgent.__init__(self, "AudioLoaderAgent")
        ValidationMixin.__init__(self)
        RateLimitMixin.__init__(self, "pyannote")

        self.remote_wav_url = remote_wav_url

        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
        try:
            api_key = pyannote_api_key or self.get_api_key(
                "pyannote.ai",
                ["PYANNOTEAI_API_TOKEN", "PYANNOTE_API_KEY"]
            )
        except ValueError as e:
            self.handle_error(e, "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª—é—á–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pyannote.ai Media –∞–≥–µ–Ω—Ç
        try:
            self.pyannote_media_agent = PyannoteMediaAgent(api_key)
            if not self.pyannote_media_agent.validate_api_key():
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á pyannote.ai")
            self.log_with_emoji("info", "‚úÖ", "Pyannote.ai Media –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.handle_error(e, "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pyannote.ai Media API")

    def to_wav16k_mono(self, src: Union[str, Path]) -> Path:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ WAV 16kHz mono —Ñ–æ—Ä–º–∞—Ç.

        Args:
            src: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ URL

        Returns:
            –ü—É—Ç—å –∫ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
        """
        src = Path(src) if not str(src).startswith(('http://', 'https://')) else src
        tmp = Path(tempfile.gettempdir()) / f"{uuid.uuid4()}.wav"

        cmd = [
            "ffmpeg", "-y",
            "-i", str(src),
            "-ac", "1",
            "-ar", str(TARGET_SR),
            "-vn", tmp.as_posix(),
        ]

        try:
            self.log_with_emoji("debug", "üîÑ", f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {src} ‚Üí {tmp}")
            subprocess.run(cmd, capture_output=True, check=True, text=True)
            self.log_with_emoji("debug", "‚úÖ", "FFmpeg –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            return tmp
        except subprocess.CalledProcessError as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {src}: {e}"
            if e.stderr:
                error_msg += f"\nFFmpeg stderr: {e.stderr}"
            self.handle_error(RuntimeError(error_msg), "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ")



    def upload_file(self, wav_path: Path) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ pyannote.ai Media API —Å rate limiting.

        Args:
            wav_path: –ü—É—Ç—å –∫ WAV —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

        Returns:
            –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ pyannote.ai Media API
        """
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        self.validate_audio_file(wav_path, max_size_mb=100)  # pyannote.ai –ª–∏–º–∏—Ç

        def _upload():
            self.log_with_emoji("info", "üì§", f"–ó–∞–≥—Ä—É–∂–∞—é {wav_path.name} –≤ pyannote.ai...")
            virtual_path = self.pyannote_media_agent.upload_file(wav_path)
            self.log_with_emoji("info", "‚úÖ", f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ pyannote.ai: {virtual_path}")
            return virtual_path

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å rate limiting
            return self.with_rate_limit(_upload, "upload", timeout=300.0)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        except Exception as e:
            self.handle_error(e, "–∑–∞–≥—Ä—É–∑–∫–∞ –≤ pyannote.ai")

    def run(self, input_src: str) -> Tuple[Path, str]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.

        –ü—Ä–æ—Ü–µ—Å—Å:
        1) –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV 16kHz mono
        2) –ï—Å–ª–∏ input_src ‚Äî URL ‚Üí —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        3) –ó–∞–≥—Ä—É–∑–∫–∞ –≤ pyannote.ai Media API (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω remote_wav_url)

        Args:
            input_src: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ URL

        Returns:
            Tuple[Path, str]: (–ª–æ–∫–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª, URL –¥–ª—è API)
        """
        self.start_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ")

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            is_local_file = Path(input_src).exists()

            if is_local_file:
                self.log_with_emoji("info", "üìÅ", f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {input_src}")
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                input_path = Path(input_src)
                self.validate_audio_file(input_path, max_size_mb=300)
                wav_local = self.to_wav16k_mono(input_src)
            else:
                self.log_with_emoji("info", "üåê", f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é URL: {input_src}")
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
                is_valid, message = self.validate_url(input_src, require_https=False)
                if not is_valid:
                    raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {message}")
                wav_local = self.to_wav16k_mono(input_src)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è API
            if self.remote_wav_url:
                self.log_with_emoji("info", "üîó", f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π URL: {self.remote_wav_url}")
                wav_url = self.remote_wav_url
            else:
                wav_url = self.upload_file(wav_local)

            self.end_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ", success=True)
            self.log_with_emoji("info", "‚úÖ", f"–ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ: {wav_local} ‚Üí {wav_url}")

            return wav_local, wav_url

        except Exception as e:
            self.end_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ", success=False)
            self.handle_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ")
