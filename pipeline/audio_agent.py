# pipeline/audio_agent.py

import logging
import subprocess
import tempfile
import uuid
import os
from pathlib import Path
from typing import Tuple, Union, Optional

from .pyannote_media_agent import PyannoteMediaAgent

TARGET_SR = 16_000  # 16 kHz for Whisper & Pyannote

class AudioLoaderAgent:
    """
    –ê–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥:
      - –ª–∏–±–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (mp3, wav, mp4 ‚Ä¶)
      - –ª–∏–±–æ URL –Ω–∞ WAV
    –∏ –≤—ã–¥–∞—ë—Ç:
      (local_wav_path: Path, wav_url: str)
    –ï—Å–ª–∏ input_path.exists(), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ 16kHz-mono WAV.
    –ï—Å–ª–∏ —É –Ω–∞—Å —Ñ–ª–∞–≥ --remote-wav-url, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º upload –∏ –±–µ—Ä—ë–º URL.
    –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ pyannote.ai Media API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å.
    """

    def __init__(self,
                 remote_wav_url: Optional[str] = None,
                 pyannote_api_key: Optional[str] = None):
        """
        Args:
            remote_wav_url: –ì–æ—Ç–æ–≤—ã–π URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É)
            pyannote_api_key: API –∫–ª—é—á –¥–ª—è pyannote.ai (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ env)
        """
        self.remote_wav_url = remote_wav_url
        self.logger = logging.getLogger(__name__)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pyannote.ai Media –∞–≥–µ–Ω—Ç
        api_key = pyannote_api_key or os.getenv("PYANNOTEAI_API_TOKEN") or os.getenv("PYANNOTE_API_KEY")
        if not api_key:
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á pyannote.ai. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PYANNOTEAI_API_TOKEN –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ pyannote_api_key")

        try:
            self.pyannote_media_agent = PyannoteMediaAgent(api_key)
            if not self.pyannote_media_agent.validate_api_key():
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á pyannote.ai")
            self.logger.info("‚úÖ Pyannote.ai Media –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å pyannote.ai Media: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å pyannote.ai Media API: {e}") from e

    def to_wav16k_mono(self, src: Union[str, Path]) -> Path:
        src = Path(src)
        tmp = Path(tempfile.gettempdir()) / f"{uuid.uuid4()}.wav"
        cmd = [
            "ffmpeg", "-y",
            "-i", src.as_posix(),
            "-ac", "1",
            "-ar", str(TARGET_SR),
            "-vn", tmp.as_posix(),
        ]
        try:
            self.logger.debug(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {src} ‚Üí {tmp}")
            subprocess.run(cmd, capture_output=True, check=True, text=True)
            self.logger.debug(f"FFmpeg –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            return tmp
        except subprocess.CalledProcessError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {src}: {e}")
            if e.stderr:
                self.logger.error(f"FFmpeg stderr: {e.stderr}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {src}") from e



    def upload_file(self, wav_path: Path) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ pyannote.ai Media API.
        """
        try:
            self.logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é {wav_path.name} –≤ pyannote.ai...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            virtual_path = self.pyannote_media_agent.upload_file(wav_path)

            self.logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ pyannote.ai: {virtual_path}")
            return virtual_path

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ pyannote.ai: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ pyannote.ai: {e}") from e

    def run(self, input_src: str) -> Tuple[Path, str]:
        """
        1) –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ ‚Üí to_wav16k_mono ‚Üí –ø–æ–ª—É—á–∏—Ç—å wav_local.
           ‚Äì –ï—Å–ª–∏ –∑–∞–¥–∞–Ω --remote-wav-url, –≤–∑—è—Ç—å –µ–≥–æ (wav_url) –∏ –≤–µ—Ä–Ω—É—Ç—å –≤–º–µ—Å—Ç–µ —Å wav_local.
           ‚Äì –ò–Ω–∞—á–µ upload wav_local ‚Üí wav_url.
        2) –ï—Å–ª–∏ input_src ‚Äî —ç—Ç–æ URL, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É–∂–µ WAV (–∏–ª–∏ –ª—é–±–æ–π URL ‚Üí ffmpeg ¬´—á–∏—Ç–∞—Ç—å¬ª URL).
           ‚Äì –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ–º –≤ tmp WAV ‚Üí to_wav16k_mono
           ‚Äì –ø–æ–ª—É—á–∞–µ–º wav_url:
             ‚Ä¢ –ï—Å–ª–∏ --remote-wav-url –∑–∞–¥–∞–Ω, ignore (—Ä–µ–∞–ª—å–Ω–æ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ
               input_src == remote_wav_url), –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–¥–∞–¥–∏–º –µ–≥–æ.
             ‚Ä¢ –ò–Ω–∞—á–µ —Å–Ω–æ–≤–∞ upload –Ω–∞—à tmp WAV –Ω–∞ transfer.sh ‚Üí wav_url.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (wav_local: Path, wav_url: str).
        """
        if Path(input_src).exists():
            wav_local = self.to_wav16k_mono(input_src)
            if self.remote_wav_url:
                wav_url = self.remote_wav_url
            else:
                wav_url = self.upload_file(wav_local)
        else:
            # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ input_src ‚Äì URL –Ω–∞ –∞—É–¥–∏–æ (mp3/wav)
            # ffmpeg —É–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ URL:
            wav_local = self.to_wav16k_mono(input_src)
            if self.remote_wav_url:
                wav_url = self.remote_wav_url
            else:
                wav_url = self.upload_file(wav_local)
        return wav_local, wav_url
