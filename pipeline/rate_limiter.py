# pipeline/rate_limiter.py

import time
import threading
from collections import defaultdict, deque
from typing import Dict, Optional
import logging


class RateLimiter:
    """
    –ü—Ä–æ—Å—Ç–æ–π rate limiter –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º sliding window –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤.
    Thread-safe –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
    """
    
    def __init__(self, max_requests: int = 60, window_seconds: int = 60):
        """
        Args:
            max_requests: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–∫–Ω–µ
            window_seconds: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests: Dict[str, deque] = defaultdict(deque)
        self.lock = threading.Lock()
        self.logger = logging.getLogger(__name__)
        
    def is_allowed(self, key: str = "default") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, API endpoint)
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        """
        with self.lock:
            now = time.time()
            window_start = now - self.window_seconds
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –æ–∫–Ω–∞
            while self.requests[key] and self.requests[key][0] < window_start:
                self.requests[key].popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(self.requests[key]) >= self.max_requests:
                self.logger.warning(f"Rate limit exceeded for key: {key}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self.requests[key].append(now)
            return True
    
    def wait_if_needed(self, key: str = "default") -> None:
        """
        –ñ–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        while not self.is_allowed(key):
            sleep_time = 1.0  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            self.logger.info(f"Rate limit reached for {key}, waiting {sleep_time}s...")
            time.sleep(sleep_time)
    
    def get_remaining_requests(self, key: str = "default") -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        with self.lock:
            now = time.time()
            window_start = now - self.window_seconds
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            while self.requests[key] and self.requests[key][0] < window_start:
                self.requests[key].popleft()
            
            return max(0, self.max_requests - len(self.requests[key]))
    
    def reset(self, key: Optional[str] = None) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª—é—á–∞ –∏–ª–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π.
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —Å–±—Ä–æ—Å–∞ (–µ—Å–ª–∏ None, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ)
        """
        with self.lock:
            if key is None:
                self.requests.clear()
                self.logger.info("Rate limiter reset for all keys")
            else:
                self.requests[key].clear()
                self.logger.info(f"Rate limiter reset for key: {key}")


class DynamicRateLimiter(RateLimiter):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π rate limiter —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
    """

    def __init__(self, max_requests: int = 60, window_seconds: int = 60,
                 api_name: str = "unknown"):
        super().__init__(max_requests, window_seconds)
        self.api_name = api_name
        self.hit_count = 0
        self.blocked_count = 0
        self.total_wait_time = 0.0

    def is_allowed(self, key: str = "default") -> bool:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º."""
        allowed = super().is_allowed(key)

        if allowed:
            self.hit_count += 1
        else:
            self.blocked_count += 1
            self.logger.warning(
                f"üö¶ Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {self.api_name}.{key} "
                f"({self.blocked_count} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)"
            )

        return allowed

    def wait_if_needed(self, key: str = "default") -> float:
        """
        –ñ–¥–µ—Ç —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.

        Returns:
            –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        wait_start = time.time()

        while not self.is_allowed(key):
            sleep_time = 1.0
            self.logger.info(
                f"‚è≥ Rate limit –¥–ª—è {self.api_name}.{key}, –æ–∂–∏–¥–∞–Ω–∏–µ {sleep_time}—Å..."
            )
            time.sleep(sleep_time)

        wait_time = time.time() - wait_start
        self.total_wait_time += wait_time

        if wait_time > 0:
            self.logger.info(
                f"‚úÖ Rate limit –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {self.api_name}.{key} "
                f"({wait_time:.1f}—Å)"
            )

        return wait_time

    def get_statistics(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
        total_requests = self.hit_count + self.blocked_count
        block_rate = (self.blocked_count / total_requests * 100) if total_requests > 0 else 0

        return {
            "api_name": self.api_name,
            "max_requests": self.max_requests,
            "window_seconds": self.window_seconds,
            "hit_count": self.hit_count,
            "blocked_count": self.blocked_count,
            "total_requests": total_requests,
            "block_rate_percent": block_rate,
            "total_wait_time": self.total_wait_time
        }

    def log_statistics(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
        stats = self.get_statistics()
        self.logger.info(
            f"üìä Rate limiter {self.api_name}: "
            f"{stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤, "
            f"{stats['block_rate_percent']:.1f}% –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, "
            f"–æ–±—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {stats['total_wait_time']:.1f}—Å"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ rate limiters —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
def create_rate_limiters():
    """–°–æ–∑–¥–∞–µ—Ç rate limiters —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    import os

    # Pyannote.ai rate limiter
    pyannote_max_requests = int(os.getenv("PYANNOTE_RATE_LIMIT", "30"))
    pyannote_window = int(os.getenv("PYANNOTE_RATE_WINDOW", "60"))

    # OpenAI rate limiter
    openai_max_requests = int(os.getenv("OPENAI_RATE_LIMIT", "50"))
    openai_window = int(os.getenv("OPENAI_RATE_WINDOW", "60"))

    # Replicate rate limiter
    replicate_max_requests = int(os.getenv("REPLICATE_RATE_LIMIT", "100"))
    replicate_window = int(os.getenv("REPLICATE_RATE_WINDOW", "60"))

    return {
        "pyannote": DynamicRateLimiter(pyannote_max_requests, pyannote_window, "pyannote"),
        "openai": DynamicRateLimiter(openai_max_requests, openai_window, "openai"),
        "replicate": DynamicRateLimiter(replicate_max_requests, replicate_window, "replicate")
    }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ rate limiters
RATE_LIMITERS = create_rate_limiters()

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
PYANNOTE_RATE_LIMITER = RATE_LIMITERS["pyannote"]
OPENAI_RATE_LIMITER = RATE_LIMITERS["openai"]


def rate_limit_decorator(api_name: str, key: str = "default"):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è rate limiting –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.

    Args:
        api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API (pyannote, openai, replicate)
        key: –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            limiter = RATE_LIMITERS.get(api_name)
            if limiter:
                limiter.wait_if_needed(key)
            return func(*args, **kwargs)
        return wrapper
    return decorator


def get_rate_limiter(api_name: str) -> Optional[DynamicRateLimiter]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç rate limiter –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ API.

    Args:
        api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API

    Returns:
        Rate limiter –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    return RATE_LIMITERS.get(api_name)
