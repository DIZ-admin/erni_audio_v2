"""
Replicate Agent –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ thomasmol/whisper-diarization
"""

import logging
import time
from pathlib import Path
from typing import List, Dict, Optional
try:
    import replicate
    from replicate.exceptions import ReplicateError
except ImportError:
    replicate = None
    ReplicateError = Exception

from .base_agent import BaseAgent
from .validation_mixin import ValidationMixin
from .constants import REPLICATE_MODEL_NAME, REPLICATE_SUPPORTED_LANGUAGES


class ReplicateAgent(BaseAgent, ValidationMixin):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Replicate API
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ thomasmol/whisper-diarization.
    """

    # –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
    MODEL_NAME = REPLICATE_MODEL_NAME

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ (–∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
    SUPPORTED_LANGUAGES = REPLICATE_SUPPORTED_LANGUAGES

    def __init__(self, api_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Replicate –∞–≥–µ–Ω—Ç–∞.

        Args:
            api_token: Replicate API —Ç–æ–∫–µ–Ω
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        BaseAgent.__init__(self, name="ReplicateAgent")
        ValidationMixin.__init__(self)

        if replicate is None:
            raise ImportError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ replicate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install replicate")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è API —Ç–æ–∫–µ–Ω–∞
        self.validate_replicate_token(api_token)

        self.client = replicate.Client(api_token=api_token)
        self.api_token = api_token

        self.log_with_emoji("info", "‚úÖ", "ReplicateAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def validate_replicate_token(self, api_token: str) -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è API —Ç–æ–∫–µ–Ω–∞ Replicate.

        Args:
            api_token: API —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Raises:
            ValueError: –ï—Å–ª–∏ API —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        """
        if not isinstance(api_token, str):
            raise ValueError(f"API —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω {type(api_token)}")

        if not api_token or not api_token.strip():
            raise ValueError("Replicate API —Ç–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º)
        if len(api_token.strip()) < 10:
            raise ValueError("API —Ç–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")

    def validate_replicate_params(self,
                                audio_file: Path,
                                num_speakers: Optional[int] = None,
                                language: Optional[str] = None,
                                prompt: Optional[str] = None) -> List[str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Replicate –º–æ–¥–µ–ª–∏.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            num_speakers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤
            language: –ö–æ–¥ —è–∑—ã–∫–∞
            prompt: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        issues = []

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        try:
            self.validate_audio_file(audio_file)
        except ValueError as e:
            issues.append(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º: {e}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è num_speakers
        if num_speakers is not None:
            if not isinstance(num_speakers, int):
                issues.append("num_speakers –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            elif num_speakers < 1:
                issues.append("num_speakers –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            elif num_speakers > 50:
                issues.append("num_speakers —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 50)")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–∞
        if language is not None:
            if not isinstance(language, str):
                issues.append("language –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            elif language not in self.SUPPORTED_LANGUAGES:
                issues.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {language}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(self.SUPPORTED_LANGUAGES.keys())}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è prompt
        if prompt is not None:
            if not isinstance(prompt, str):
                issues.append("prompt –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            elif len(prompt) > 1000:
                issues.append("prompt —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)")

        return issues

    def validate_replicate_audio_file(self, audio_file: Path) -> List[str]:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è Replicate.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        issues = []

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        try:
            self.validate_audio_file(audio_file)
        except ValueError as e:
            issues.append(str(e))
            return issues  # –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (‚â§500MB –¥–ª—è Replicate)
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        if file_size_mb > 500:
            issues.append(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f}MB (–º–∞–∫—Å–∏–º—É–º 500MB)")
        elif file_size_mb > 100:
            issues.append(f"–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {file_size_mb:.1f}MB, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

        return issues

    def run(self,
            audio_file: Path,
            num_speakers: Optional[int] = None,
            language: Optional[str] = None,
            prompt: Optional[str] = None) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            num_speakers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ (None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
            language: –ö–æ–¥ —è–∑—ã–∫–∞ ('en', 'de', 'ru' –∏ —Ç.–¥., None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
            prompt: –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏, –∞–∫—Ä–æ–Ω–∏–º–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        """
        self.start_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Replicate")

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param_issues = self.validate_replicate_params(audio_file, num_speakers, language, prompt)
            if param_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {len(param_issues)}")
                for issue in param_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    self.log_with_emoji("warning", "   ", issue)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                if any("–Ω–µ –Ω–∞–π–¥–µ–Ω" in issue or "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π" in issue for issue in param_issues):
                    raise ValueError(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {param_issues[0]}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è Replicate
            audio_issues = self.validate_replicate_audio_file(audio_file)
            if audio_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º: {len(audio_issues)}")
                for issue in audio_issues[:3]:
                    self.log_with_emoji("warning", "   ", issue)

            file_size_mb = audio_file.stat().st_size / (1024 * 1024)
            self.log_with_emoji("info", "üéµ", f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Replicate: {audio_file.name} ({file_size_mb:.1f}MB)")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            input_params = self._prepare_input_params(
                audio_file, num_speakers, language, prompt
            )

            # –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏
            self.log_with_emoji("info", "üöÄ", f"–ó–∞–ø—É—Å–∫–∞—é –º–æ–¥–µ–ª—å {self.MODEL_NAME}...")
            output = self.client.run(self.MODEL_NAME, input=input_params)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            segments = self._process_output(output)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.log_with_emoji("info", "‚úÖ", f"Replicate –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

            self.end_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Replicate", success=True)
            return segments

        except ReplicateError as e:
            self.end_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Replicate", success=False)
            self.handle_error(e, "Replicate API", reraise=True)
        except Exception as e:
            self.end_operation("–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Replicate", success=False)
            self.handle_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Replicate", reraise=True)
    
    # –ú–µ—Ç–æ–¥ _validate_audio_file —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è validate_replicate_audio_file
    
    def _prepare_input_params(self,
                            audio_file: Path,
                            num_speakers: Optional[int],
                            language: Optional[str],
                            prompt: Optional[str]) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Replicate API."""

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º file handle –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        params = {
            "file": open(audio_file, "rb"),
            "file_url": "",  # –ü—É—Å—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if num_speakers is not None:
            if 1 <= num_speakers <= 50:
                params["num_speakers"] = num_speakers
                self.log_with_emoji("info", "üë•", f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {num_speakers}")
            else:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {num_speakers}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

        if language and language != "auto":
            if language in self.SUPPORTED_LANGUAGES:
                params["language"] = language
                self.log_with_emoji("info", "üåç", f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {self.SUPPORTED_LANGUAGES[language]} ({language})")
            else:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {language}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

        if prompt:
            params["prompt"] = prompt
            self.log_with_emoji("info", "üí°", f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: {prompt[:50]}...")

        return params
    
    def _process_output(self, output) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ Replicate API."""

        # Replicate –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if isinstance(output, dict):
            segments = output.get('segments', [])
        elif hasattr(output, 'segments'):
            segments = output.segments
        elif isinstance(output, list):
            segments = output
        else:
            self.log_with_emoji("error", "‚ùå", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(output)}")
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Replicate API")

        if not segments:
            self.log_with_emoji("warning", "‚ö†Ô∏è", "Replicate –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        processed_segments = []
        
        for segment in segments:
            # Replicate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            # {
            #   "start": float,
            #   "end": float, 
            #   "text": str,
            #   "speaker": str,
            #   "words": [...],
            #   "avg_logprob": float
            # }
            
            processed_segment = {
                "start": float(segment.get("start", 0.0)),
                "end": float(segment.get("end", 0.0)),
                "text": segment.get("text", "").strip(),
                "speaker": segment.get("speaker", "UNKNOWN"),
                "avg_logprob": segment.get("avg_logprob", 0.0),
                "words": segment.get("words", [])
            }
            
            processed_segments.append(processed_segment)
        
        self.log_with_emoji("info", "üìä", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∏–∫–µ—Ä–æ–≤
        speakers = set(seg["speaker"] for seg in processed_segments)
        self.log_with_emoji("info", "üë•", f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {len(speakers)} ({', '.join(sorted(speakers))})")
        
        return processed_segments
    
    def estimate_cost(self, audio_file: Path) -> Dict[str, any]:
        """
        –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å Replicate: ~$0.0077 –∑–∞ –∑–∞–ø—É—Å–∫
        # –ù–æ –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        base_cost = 0.0077
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        # (—ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        if file_size_mb <= 25:
            estimated_cost = base_cost
        else:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏
            estimated_cost = base_cost * (file_size_mb / 25)
        
        return {
            "estimated_cost_usd": round(estimated_cost, 4),
            "base_cost_usd": base_cost,
            "file_size_mb": round(file_size_mb, 1),
            "note": "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"
        }
