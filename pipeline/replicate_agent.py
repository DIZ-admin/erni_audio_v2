"""
Replicate Agent –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ thomasmol/whisper-diarization
"""

import logging
import time
from pathlib import Path
from typing import List, Dict, Optional
try:
    import replicate
    from replicate.exceptions import ReplicateError
except ImportError:
    replicate = None
    ReplicateError = Exception


class ReplicateAgent:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Replicate API
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ thomasmol/whisper-diarization.
    """
    
    # –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π)
    MODEL_NAME = "thomasmol/whisper-diarization:1495a9cddc83b2203b0d8d3516e38b80fd1572ebc4bc5700ac1da56a9b3ed886"
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
    SUPPORTED_LANGUAGES = {
        "auto": "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        "en": "English",
        "de": "Deutsch", 
        "fr": "Fran√ßais",
        "es": "Espa√±ol",
        "it": "Italiano",
        "pt": "Portugu√™s",
        "ru": "–†—É—Å—Å–∫–∏–π",
        "zh": "‰∏≠Êñá",
        "ja": "Êó•Êú¨Ë™û",
        "ko": "ÌïúÍµ≠Ïñ¥"
    }
    
    def __init__(self, api_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Replicate –∞–≥–µ–Ω—Ç–∞.

        Args:
            api_token: Replicate API —Ç–æ–∫–µ–Ω
        """
        if replicate is None:
            raise ImportError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ replicate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install replicate")

        if not api_token:
            raise ValueError("Replicate API —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

        self.client = replicate.Client(api_token=api_token)
        self.logger = logging.getLogger(__name__)

        self.logger.info("‚úÖ ReplicateAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def run(self, 
            audio_file: Path, 
            num_speakers: Optional[int] = None,
            language: Optional[str] = None,
            prompt: Optional[str] = None) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
        
        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            num_speakers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ (None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
            language: –ö–æ–¥ —è–∑—ã–∫–∞ ('en', 'de', 'ru' –∏ —Ç.–¥., None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
            prompt: –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏, –∞–∫—Ä–æ–Ω–∏–º–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        """
        start_time = time.time()
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            self._validate_audio_file(audio_file)
            
            file_size_mb = audio_file.stat().st_size / (1024 * 1024)
            self.logger.info(f"üéµ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Replicate: {audio_file.name} ({file_size_mb:.1f}MB)")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            input_params = self._prepare_input_params(
                audio_file, num_speakers, language, prompt
            )
            
            # –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –º–æ–¥–µ–ª—å {self.MODEL_NAME}...")
            output = self.client.run(self.MODEL_NAME, input=input_params)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            segments = self._process_output(output)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            duration = time.time() - start_time
            self.logger.info(f"‚úÖ Replicate –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞ {duration:.2f}—Å")
            
            return segments
            
        except ReplicateError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Replicate API: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ Replicate API: {e}") from e
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}") from e
    
    def _validate_audio_file(self, audio_file: Path) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
        if not audio_file.exists():
            raise FileNotFoundError(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        
        # Replicate –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        if file_size_mb > 500:  # 500MB –ª–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self.logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {file_size_mb:.1f}MB")
    
    def _prepare_input_params(self,
                            audio_file: Path,
                            num_speakers: Optional[int],
                            language: Optional[str],
                            prompt: Optional[str]) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Replicate API."""

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º file handle –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        params = {
            "file": open(audio_file, "rb"),
            "file_url": "",  # –ü—É—Å—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if num_speakers is not None:
            if 1 <= num_speakers <= 50:
                params["num_speakers"] = num_speakers
                self.logger.info(f"üë• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {num_speakers}")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {num_speakers}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

        if language and language != "auto":
            if language in self.SUPPORTED_LANGUAGES:
                params["language"] = language
                self.logger.info(f"üåç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: {self.SUPPORTED_LANGUAGES[language]} ({language})")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {language}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

        if prompt:
            params["prompt"] = prompt
            self.logger.info(f"üí° –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: {prompt[:50]}...")

        return params
    
    def _process_output(self, output) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ Replicate API."""

        # Replicate –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if isinstance(output, dict):
            segments = output.get('segments', [])
        elif hasattr(output, 'segments'):
            segments = output.segments
        elif isinstance(output, list):
            segments = output
        else:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(output)}")
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Replicate API")

        if not segments:
            self.logger.warning("‚ö†Ô∏è Replicate –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        processed_segments = []
        
        for segment in segments:
            # Replicate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            # {
            #   "start": float,
            #   "end": float, 
            #   "text": str,
            #   "speaker": str,
            #   "words": [...],
            #   "avg_logprob": float
            # }
            
            processed_segment = {
                "start": float(segment.get("start", 0.0)),
                "end": float(segment.get("end", 0.0)),
                "text": segment.get("text", "").strip(),
                "speaker": segment.get("speaker", "UNKNOWN"),
                "avg_logprob": segment.get("avg_logprob", 0.0),
                "words": segment.get("words", [])
            }
            
            processed_segments.append(processed_segment)
        
        self.logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∏–∫–µ—Ä–æ–≤
        speakers = set(seg["speaker"] for seg in processed_segments)
        self.logger.info(f"üë• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {len(speakers)} ({', '.join(sorted(speakers))})")
        
        return processed_segments
    
    def estimate_cost(self, audio_file: Path) -> Dict[str, any]:
        """
        –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å Replicate: ~$0.0077 –∑–∞ –∑–∞–ø—É—Å–∫
        # –ù–æ –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        base_cost = 0.0077
        
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        # (—ç—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        if file_size_mb <= 25:
            estimated_cost = base_cost
        else:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç —Ä–∞—Å—Ç–∏
            estimated_cost = base_cost * (file_size_mb / 25)
        
        return {
            "estimated_cost_usd": round(estimated_cost, 4),
            "base_cost_usd": base_cost,
            "file_size_mb": round(file_size_mb, 1),
            "note": "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"
        }
