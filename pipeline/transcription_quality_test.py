#!/usr/bin/env python3
"""
CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å WER/CER –º–µ—Ç—Ä–∏–∫–∞–º–∏
"""

import argparse
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

from pipeline.transcription_quality_tester import TranscriptionQualityTester, TestScenario


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = logging.DEBUG if verbose else logging.INFO
    
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('logs/transcription_quality_test.log', encoding='utf-8')
        ]
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path('logs').mkdir(exist_ok=True)


def load_api_keys() -> tuple:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    openai_key = os.getenv('OPENAI_API_KEY')
    replicate_key = os.getenv('REPLICATE_API_TOKEN')
    
    if not openai_key:
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á: export OPENAI_API_KEY='your-key-here'")
        sys.exit(1)
    
    if not replicate_key:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: REPLICATE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("Replicate –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        print("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è Replicate —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export REPLICATE_API_TOKEN='your-token-here'")
    
    return openai_key, replicate_key


def create_custom_scenarios(audio_files: list, reference_texts: list) -> list:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    scenarios = []
    
    for i, audio_file in enumerate(audio_files):
        audio_path = Path(audio_file)
        if not audio_path.exists():
            print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
            continue
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
        if i < len(reference_texts):
            reference_text = reference_texts[i]
        else:
            reference_text = f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è {audio_path.name} –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        
        scenario = TestScenario(
            name=audio_path.stem,
            audio_file=audio_path,
            reference_text=reference_text,
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è {audio_path.name}",
            language=None,  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            expected_speakers=None  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        )
        scenarios.append(scenario)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name}")
    
    return scenarios


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏:
   python transcription_quality_test.py

2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:
   python transcription_quality_test.py --audio-files audio1.wav audio2.mp3

3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏:
   python transcription_quality_test.py --audio-files audio.wav --reference-texts "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä"

4. –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥:
   python transcription_quality_test.py --verbose

5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:
   python transcription_quality_test.py --output-dir results/

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- OPENAI_API_KEY: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á OpenAI API
- REPLICATE_API_TOKEN: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω Replicate API
        """
    )
    
    parser.add_argument(
        '--audio-files',
        nargs='+',
        help='–°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    parser.add_argument(
        '--reference-texts',
        nargs='+',
        help='–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ)'
    )
    
    parser.add_argument(
        '--output-dir',
        type=Path,
        default=Path('data/interim'),
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/interim)'
    )
    
    parser.add_argument(
        '--models',
        nargs='+',
        choices=['whisper-1', 'gpt-4o-mini-transcribe', 'gpt-4o-transcribe', 'replicate'],
        help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)'
    )
    
    parser.add_argument(
        '--language',
        help='–ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: en, ru, de)'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)
    
    print("üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
    openai_key, replicate_key = load_api_keys()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = TranscriptionQualityTester(
        openai_api_key=openai_key,
        replicate_api_key=replicate_key
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    if args.audio_files:
        scenarios = create_custom_scenarios(args.audio_files, args.reference_texts or [])
        if not scenarios:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
            sys.exit(1)
    else:
        print("üìã –°–æ–∑–¥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏...")
        scenarios = tester.create_test_scenarios()
        if not scenarios:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --audio-files –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\nüìã –ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–°—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
    for scenario in scenarios:
        print(f"  - {scenario.name}: {scenario.description}")
    
    available_models = tester.openai_models.copy()
    if tester.replicate_available:
        available_models.append("replicate-whisper-diarization")
    
    if args.models:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        filtered_models = []
        for model in args.models:
            if model == "replicate":
                if tester.replicate_available:
                    filtered_models.append("replicate-whisper-diarization")
            elif model in tester.openai_models:
                filtered_models.append(model)
        available_models = filtered_models
    
    print(f"–ú–æ–¥–µ–ª–∏: {', '.join(available_models)}")
    print(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.output_dir}")
    
    if args.dry_run:
        print("\nüîç –†–µ–∂–∏–º dry-run: –ø–ª–∞–Ω –ø–æ–∫–∞–∑–∞–Ω, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    try:
        results = tester.run_comprehensive_test(scenarios)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print(f"\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        report_path = tester.generate_report(results, args.output_dir)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        print(f"üìä JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {args.output_dir / 'wer_evaluation_results.json'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –º–æ–¥–µ–ª–∏ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
        comparison = results["model_comparison"]
        if comparison:
            print(f"\nüèÜ –¢–æ–ø-3 –º–æ–¥–µ–ª–∏ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤:")
            sorted_models = sorted(comparison.items(), key=lambda x: x[1]["word_accuracy"], reverse=True)
            for i, (model_name, stats) in enumerate(sorted_models[:3], 1):
                print(f"  {i}. {model_name}: {stats['word_accuracy']:.3f} (WER: {stats['average_wer']:.3f})")
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
