#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º–∏ (voiceprints)
"""

import argparse
import logging
import os
import sys
from pathlib import Path
from typing import List

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from pipeline.voiceprint_agent import VoiceprintAgent
from pipeline.voiceprint_manager import VoiceprintManager


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


def create_voiceprint(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞"""
    logger = logging.getLogger(__name__)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("PYANNOTEAI_API_TOKEN") or os.getenv("PYANNOTE_API_KEY")
    if not api_key:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PYANNOTEAI_API_TOKEN –∏–ª–∏ PYANNOTE_API_KEY")
        sys.exit(1)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    audio_file = Path(args.audio_file)
    if not audio_file.exists():
        logger.error(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        sys.exit(1)
    
    try:
        # –°–æ–∑–¥–∞–µ–º voiceprint
        logger.info(f"üéµ –°–æ–∑–¥–∞—é voiceprint –¥–ª—è '{args.label}' –∏–∑ {audio_file.name}")
        
        voiceprint_agent = VoiceprintAgent(api_key)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.show_cost:
            cost_info = voiceprint_agent.estimate_cost(audio_file)
            print(f"\nüí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
            print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {cost_info['file_size_mb']} MB")
            print(f"üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cost_info['estimated_cost_usd']}")
            print(f"üí° {cost_info['note']}\n")
        
        voiceprint_data = voiceprint_agent.create_voiceprint(
            audio_file=audio_file,
            label=args.label,
            max_duration_check=not args.skip_duration_check
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        manager = VoiceprintManager()
        voiceprint_id = manager.add_voiceprint(
            label=args.label,
            voiceprint_data=voiceprint_data["voiceprint"],
            source_file=str(audio_file),
            metadata={
                "duration": voiceprint_data["duration"],
                "file_size_mb": voiceprint_data["file_size_mb"],
                "created_via": "voiceprint_cli"
            }
        )
        
        print(f"‚úÖ Voiceprint —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìù –ò–º—è: {args.label}")
        print(f"üÜî ID: {voiceprint_id}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {voiceprint_data['duration']:.2f}—Å")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint: {e}")
        sys.exit(1)


def list_voiceprints(args):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤"""
    manager = VoiceprintManager()
    voiceprints = manager.list_voiceprints()
    
    if not voiceprints:
        print("üì≠ –ë–∞–∑–∞ voiceprints –ø—É—Å—Ç–∞")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(voiceprints)} voiceprints:\n")
    
    for vp in sorted(voiceprints, key=lambda x: x["created_at"]):
        print(f"üë§ {vp['label']}")
        print(f"   üÜî ID: {vp['id']}")
        print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {vp['created_at']}")
        if vp.get("source_file"):
            print(f"   üìÅ –§–∞–π–ª: {Path(vp['source_file']).name}")
        print()


def search_voiceprints(args):
    """–ü–æ–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤"""
    manager = VoiceprintManager()
    results = manager.search_voiceprints(args.query)
    
    if not results:
        print(f"üîç Voiceprints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{args.query}'")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} voiceprints –ø–æ –∑–∞–ø—Ä–æ—Å—É '{args.query}':\n")
    
    for vp in results:
        print(f"üë§ {vp['label']}")
        print(f"   üÜî ID: {vp['id']}")
        print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {vp['created_at']}")
        print()


def delete_voiceprint(args):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞"""
    manager = VoiceprintManager()
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID
    voiceprint = None
    if args.identifier.startswith("vp_") or len(args.identifier) > 20:
        # –ü–æ—Ö–æ–∂–µ –Ω–∞ ID
        voiceprint = manager.get_voiceprint(args.identifier)
    else:
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        voiceprint = manager.get_voiceprint_by_label(args.identifier)
    
    if not voiceprint:
        print(f"‚ùå Voiceprint –Ω–µ –Ω–∞–π–¥–µ–Ω: '{args.identifier}'")
        sys.exit(1)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if not args.force:
        response = input(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å voiceprint '{voiceprint['label']}'? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    if manager.delete_voiceprint(voiceprint["id"]):
        print(f"‚úÖ Voiceprint '{voiceprint['label']}' —É–¥–∞–ª–µ–Ω")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è voiceprint")


def show_statistics(args):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã voiceprints"""
    manager = VoiceprintManager()
    stats = manager.get_statistics()
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã voiceprints:")
    print(f"üìù –í—Å–µ–≥–æ voiceprints: {stats['total']}")
    
    if stats['total'] > 0:
        print(f"üë• –ò–º–µ–Ω–∞: {', '.join(stats['labels'])}")
        print(f"üìÖ –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π: {stats['oldest']}")
        print(f"üìÖ –°–∞–º—ã–π –Ω–æ–≤—ã–π: {stats['newest']}")
    
    print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {stats['database_path']}")
    print(f"üìè –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {stats['database_size_kb']} KB")


def export_voiceprints(args):
    """–≠–∫—Å–ø–æ—Ä—Ç voiceprints –≤ JSON —Ñ–∞–π–ª"""
    manager = VoiceprintManager()
    
    labels = args.labels.split(',') if args.labels else None
    if labels:
        labels = [label.strip() for label in labels]
    
    output_path = Path(args.output)
    manager.export_voiceprints(output_path, labels)
    
    print(f"‚úÖ Voiceprints —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_path}")


def import_voiceprints(args):
    """–ò–º–ø–æ—Ä—Ç voiceprints –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    manager = VoiceprintManager()
    
    input_path = Path(args.input)
    if not input_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        sys.exit(1)
    
    count = manager.import_voiceprints(input_path, args.overwrite)
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} voiceprints –∏–∑ {input_path}")


def main():
    parser = argparse.ArgumentParser(
        description="CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º–∏ (voiceprints)"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ create
    create_parser = subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π voiceprint')
    create_parser.add_argument('audio_file', help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (‚â§30 —Å–µ–∫—É–Ω–¥)')
    create_parser.add_argument('label', help='–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "John Doe")')
    create_parser.add_argument('--show-cost', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
    create_parser.add_argument('--skip-duration-check', action='store_true', 
                              help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ list
    list_parser = subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ voiceprints')
    
    # –ö–æ–º–∞–Ω–¥–∞ search
    search_parser = subparsers.add_parser('search', help='–ü–æ–∏—Å–∫ voiceprints')
    search_parser.add_argument('query', help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    
    # –ö–æ–º–∞–Ω–¥–∞ delete
    delete_parser = subparsers.add_parser('delete', help='–£–¥–∞–ª–∏—Ç—å voiceprint')
    delete_parser.add_argument('identifier', help='–ò–º—è –∏–ª–∏ ID voiceprint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    delete_parser.add_argument('--force', action='store_true', help='–£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ stats
    stats_parser = subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ export
    export_parser = subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç voiceprints –≤ JSON')
    export_parser.add_argument('output', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞')
    export_parser.add_argument('--labels', help='–°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ)')
    
    # –ö–æ–º–∞–Ω–¥–∞ import
    import_parser = subparsers.add_parser('import', help='–ò–º–ø–æ—Ä—Ç voiceprints –∏–∑ JSON')
    import_parser.add_argument('input', help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É')
    import_parser.add_argument('--overwrite', action='store_true', 
                              help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ voiceprints')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    setup_logging()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    if args.command == 'create':
        create_voiceprint(args)
    elif args.command == 'list':
        list_voiceprints(args)
    elif args.command == 'search':
        search_voiceprints(args)
    elif args.command == 'delete':
        delete_voiceprint(args)
    elif args.command == 'stats':
        show_statistics(args)
    elif args.command == 'export':
        export_voiceprints(args)
    elif args.command == 'import':
        import_voiceprints(args)


if __name__ == "__main__":
    main()
