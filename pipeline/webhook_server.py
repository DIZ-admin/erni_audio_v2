"""
Webhook HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±-—Ö—É–∫–æ–≤ pyannote.ai

FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç pyannote.ai
—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π.
"""

import os
import time
import json
import logging
from pathlib import Path
from typing import Dict, Any
import uvicorn
from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from .webhook_agent import WebhookAgent, WebhookVerificationError


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class WebhookServer:
    """
    HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ pyannote.ai.
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ü—Ä–∏–µ–º POST –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ /webhook
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    - –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - Health checks
    """
    
    def __init__(self, webhook_secret: str = None, data_dir: Path = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞.
        
        Args:
            webhook_secret: –°–µ–∫—Ä–µ—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–∑ env –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
            data_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        self.webhook_secret = webhook_secret or os.getenv("PYANNOTEAI_WEBHOOK_SECRET")
        if not self.webhook_secret:
            raise ValueError("PYANNOTEAI_WEBHOOK_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.data_dir = data_dir or Path("data/interim")
        self.host = os.getenv("WEBHOOK_SERVER_HOST", "0.0.0.0")
        self.port = int(os.getenv("WEBHOOK_SERVER_PORT", "8000"))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º webhook –∞–≥–µ–Ω—Ç
        self.webhook_agent = WebhookAgent(self.webhook_secret, self.data_dir)
        
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = FastAPI(
            title="Pyannote.ai Webhook Server",
            description="–°–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ pyannote.ai",
            version="1.0.0"
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
        self._setup_middleware()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self._setup_routes()
        
        logger.info(f"‚úÖ WebhookServer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.host}:{self.port}")
    
    def _setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è CORS –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # CORS middleware
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],  # –í production –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ pyannote.ai
            allow_credentials=True,
            allow_methods=["POST", "GET"],
            allow_headers=["*"],
        )
        
        # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        @self.app.middleware("http")
        async def log_requests(request: Request, call_next):
            start_time = time.time()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
            logger.info(f"üì• {request.method} {request.url.path} –æ—Ç {request.client.host}")
            
            response = await call_next(request)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_time = time.time() - start_time
            logger.info(f"‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {process_time:.3f}s, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            return response
    
    def _setup_routes(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API"""
        
        @self.app.post("/webhook")
        async def handle_webhook(request: Request, background_tasks: BackgroundTasks):
            """
            –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±-—Ö—É–∫–æ–≤ pyannote.ai.
            
            –û–∂–∏–¥–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å —Å JSON payload –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏:
            - X-Request-Timestamp: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            - X-Signature: –ø–æ–¥–ø–∏—Å—å HMAC-SHA256
            """
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = dict(request.headers)
                timestamp = headers.get("x-request-timestamp")
                signature = headers.get("x-signature")
                
                if not timestamp or not signature:
                    logger.warning("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
                    raise HTTPException(
                        status_code=400, 
                        detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ X-Request-Timestamp –∏–ª–∏ X-Signature"
                    )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                body = await request.body()
                body_str = body.decode('utf-8')
                
                # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                if not self.webhook_agent.verify_signature(timestamp, body_str, signature):
                    logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±-—Ö—É–∫–∞ –æ—Ç {request.client.host}")
                    raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
                
                # –ü–∞—Ä—Å–∏–º JSON payload
                try:
                    payload = json.loads(body_str)
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π JSON")
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–µ–±-—Ö—É–∫–∞
                event = self.webhook_agent.parse_webhook_payload(payload, headers)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ–Ω–µ
                background_tasks.add_task(self._process_event_background, event)
                
                logger.info(f"‚úÖ Webhook –ø—Ä–∏–Ω—è—Ç: {event.job_id} ({event.job_type})")
                
                return JSONResponse(
                    status_code=200,
                    content={"status": "success", "message": "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω"}
                )
                
            except HTTPException:
                raise
            except WebhookVerificationError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                raise HTTPException(status_code=403, detail=str(e))
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        
        @self.app.get("/health")
        async def health_check():
            """Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
            metrics = self.webhook_agent.get_metrics()
            return JSONResponse(
                status_code=200,
                content={
                    "status": "healthy",
                    "service": "pyannote-webhook-server",
                    "metrics": metrics
                }
            )
        
        @self.app.get("/metrics")
        async def get_metrics():
            """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
            metrics = self.webhook_agent.get_metrics()
            return JSONResponse(status_code=200, content=metrics)
        
        @self.app.get("/")
        async def root():
            """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
            return JSONResponse(
                status_code=200,
                content={
                    "service": "Pyannote.ai Webhook Server",
                    "version": "1.0.0",
                    "endpoints": {
                        "webhook": "/webhook (POST)",
                        "health": "/health (GET)",
                        "metrics": "/metrics (GET)"
                    }
                }
            )
    
    async def _process_event_background(self, event):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤–µ–±-—Ö—É–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
        
        Args:
            event: WebhookEvent –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            success = self.webhook_agent.process_webhook_event(event)
            if success:
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event.job_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.job_id}")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.job_id}: {e}")
    
    def run(self, debug: bool = False):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä.
        
        Args:
            debug: –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{self.host}:{self.port}")
        logger.info(f"üì° Webhook endpoint: http://{self.host}:{self.port}/webhook")
        
        uvicorn.run(
            self.app,
            host=self.host,
            port=self.port,
            log_level="info" if not debug else "debug",
            access_log=True
        )
    
    def register_event_handler(self, job_type: str, handler):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π.
        
        Args:
            job_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ ('diarization', 'identify', 'voiceprint')
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        self.webhook_agent.register_event_handler(job_type, handler)


def create_webhook_server() -> WebhookServer:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞.
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π WebhookServer
    """
    return WebhookServer()


if __name__ == "__main__":
    import time
    import json
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    server = create_webhook_server()
    
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    def handle_diarization(event):
        logger.info(f"üé§ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {event.job_id}")
    
    def handle_voiceprint(event):
        logger.info(f"üë§ Voiceprint —Å–æ–∑–¥–∞–Ω: {event.job_id}")
    
    server.register_event_handler("diarization", handle_diarization)
    server.register_event_handler("voiceprint", handle_voiceprint)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server.run(debug=True)
