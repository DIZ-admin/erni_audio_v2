#!/usr/bin/env python3
"""
CLI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞ pyannote.ai

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±-—Ö—É–∫–æ–≤ –æ—Ç pyannote.ai
—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π.
"""

import os
import sys
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from pipeline.webhook_server import WebhookServer


def setup_logging(debug: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = logging.DEBUG if debug else logging.INFO
    
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('logs/webhook_server.log')
        ]
    )


def create_event_handlers():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
    
    def handle_diarization(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        logger = logging.getLogger(__name__)
        logger.info(f"üé§ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {event.job_id}")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {event.status}")
        
        if event.output and event.status == "succeeded":
            diarization = event.output.get("diarization", [])
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(diarization)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
    
    def handle_voiceprint(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è voiceprint"""
        logger = logging.getLogger(__name__)
        logger.info(f"üë§ Voiceprint —Å–æ–∑–¥–∞–Ω: {event.job_id}")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {event.status}")
        
        if event.output and event.status == "succeeded":
            voiceprint = event.output.get("voiceprint")
            if voiceprint:
                logger.info(f"‚úÖ Voiceprint –≥–æ—Ç–æ–≤ (—Ä–∞–∑–º–µ—Ä: {len(voiceprint)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    def handle_identify(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        logger = logging.getLogger(__name__)
        logger.info(f"üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {event.job_id}")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {event.status}")
        
        if event.output and event.status == "succeeded":
            identification = event.output.get("identification", [])
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(identification)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    return {
        "diarization": handle_diarization,
        "voiceprint": handle_voiceprint,
        "identify": handle_identify
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è pyannote.ai",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  python webhook_server_cli.py

  # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
  python webhook_server_cli.py --debug

  # –ó–∞–ø—É—Å–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
  python webhook_server_cli.py --port 9000

  # –ó–∞–ø—É—Å–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º webhook —Å–µ–∫—Ä–µ—Ç–æ–º
  python webhook_server_cli.py --webhook-secret "whs_your_secret_here"

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  PYANNOTEAI_WEBHOOK_SECRET - —Å–µ–∫—Ä–µ—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–µ–±-—Ö—É–∫–æ–≤
  WEBHOOK_SERVER_PORT       - –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8000)
  WEBHOOK_SERVER_HOST       - —Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.0.0.0)
        """
    )
    
    parser.add_argument(
        "--port", "-p",
        type=int,
        default=None,
        help="–ü–æ—Ä—Ç –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ env –∏–ª–∏ 8000)"
    )
    
    parser.add_argument(
        "--host",
        type=str,
        default=None,
        help="–•–æ—Å—Ç –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ env –∏–ª–∏ 0.0.0.0)"
    )
    
    parser.add_argument(
        "--webhook-secret",
        type=str,
        default=None,
        help="–°–µ–∫—Ä–µ—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–µ–±-—Ö—É–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ env)"
    )
    
    parser.add_argument(
        "--data-dir",
        type=Path,
        default=Path("data/interim"),
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é data/interim)"
    )
    
    parser.add_argument(
        "--debug",
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"
    )
    
    parser.add_argument(
        "--no-handlers",
        action="store_true",
        help="–ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.debug)
    logger = logging.getLogger(__name__)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        args.data_dir.mkdir(parents=True, exist_ok=True)
        Path("logs").mkdir(exist_ok=True)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if args.port:
            os.environ["WEBHOOK_SERVER_PORT"] = str(args.port)
        if args.host:
            os.environ["WEBHOOK_SERVER_HOST"] = args.host
        if args.webhook_secret:
            os.environ["PYANNOTEAI_WEBHOOK_SECRET"] = args.webhook_secret
        
        # –°–æ–∑–¥–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook —Å–µ—Ä–≤–µ—Ä–∞...")
        server = WebhookServer(
            webhook_secret=args.webhook_secret,
            data_dir=args.data_dir
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if not args.no_handlers:
            logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...")
            handlers = create_event_handlers()
            for job_type, handler in handlers.items():
                server.register_event_handler(job_type, handler)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        host = os.getenv("WEBHOOK_SERVER_HOST", "0.0.0.0")
        port = int(os.getenv("WEBHOOK_SERVER_PORT", "8000"))
        
        logger.info("=" * 60)
        logger.info("üåê WEBHOOK –°–ï–†–í–ï–† PYANNOTE.AI")
        logger.info("=" * 60)
        logger.info(f"üì° Webhook endpoint: http://{host}:{port}/webhook")
        logger.info(f"üè• Health check:     http://{host}:{port}/health")
        logger.info(f"üìä Metrics:          http://{host}:{port}/metrics")
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:       {args.data_dir.absolute()}")
        logger.info("=" * 60)
        logger.info("üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        logger.info("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.run(debug=args.debug)
        
    except KeyboardInterrupt:
        logger.info("\nüëã Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
