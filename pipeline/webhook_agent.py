"""
WebhookAgent –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ pyannote.ai

–≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP POST –∑–∞–ø—Ä–æ—Å—ã –æ—Ç pyannote.ai —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (diarization, identify, voiceprint).
"""

import hmac
import hashlib
import json
import logging
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional, Callable
import asyncio
from dataclasses import dataclass

from .base_agent import BaseAgent
from .validation_mixin import ValidationMixin
from .retry_mixin import RetryMixin
from .rate_limit_mixin import RateLimitMixin
from .utils import save_json


@dataclass
class WebhookEvent:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è –≤–µ–±-—Ö—É–∫–∞"""
    job_id: str
    status: str
    job_type: str  # 'diarization', 'identify', 'voiceprint'
    output: Optional[Dict] = None
    timestamp: datetime = None
    retry_num: Optional[int] = None
    retry_reason: Optional[str] = None


class WebhookVerificationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±-—Ö—É–∫–∞"""
    pass


class WebhookAgent(BaseAgent, ValidationMixin, RetryMixin, RateLimitMixin):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ö—É–∫–æ–≤ pyannote.ai.

    –§—É–Ω–∫—Ü–∏–∏:
    - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±-—Ö—É–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ pyannote.ai
    - –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è payload
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ data/interim/
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    """

    def __init__(self, webhook_secret: str, data_dir: Path = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebhookAgent.

        Args:
            webhook_secret: –°–µ–∫—Ä–µ—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±-—Ö—É–∫–∞
            data_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é data/interim)
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        BaseAgent.__init__(self, name="WebhookAgent")
        ValidationMixin.__init__(self)
        RetryMixin.__init__(self)
        RateLimitMixin.__init__(self, api_name="webhook")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è webhook secret
        if not webhook_secret or len(webhook_secret) < 10:
            raise ValueError("webhook_secret –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")

        self.webhook_secret = webhook_secret
        self.data_dir = data_dir or Path("data/interim")
        self.data_dir.mkdir(parents=True, exist_ok=True)

        self.event_handlers: Dict[str, Callable] = {}

        # –ú–µ—Ç—Ä–∏–∫–∏
        self.processed_webhooks = 0
        self.failed_verifications = 0
        self.successful_events = 0

        self.log_with_emoji("info", "‚úÖ", "WebhookAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def verify_signature(self, timestamp: str, body: str, received_signature: str) -> bool:
        """
        –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤–µ–±-—Ö—É–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ pyannote.ai.
        
        Args:
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Request-Timestamp
            body: –°—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            received_signature: –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Signature
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
            
        Raises:
            WebhookVerificationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: v0:timestamp:body
            signed_content = f"v0:{timestamp}:{body}"
            
            # 2. –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256 —Ö–µ—à
            calculated_signature = hmac.new(
                key=self.webhook_secret.encode('utf-8'),
                msg=signed_content.encode('utf-8'),
                digestmod=hashlib.sha256
            ).hexdigest()
            
            # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ (–∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
            is_valid = hmac.compare_digest(calculated_signature, received_signature)
            
            if is_valid:
                self.logger.debug(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–µ–±-—Ö—É–∫–∞ –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è job timestamp {timestamp}")
            else:
                self.logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±-—Ö—É–∫–∞ –¥–ª—è timestamp {timestamp}")
                self.failed_verifications += 1
                
            return is_valid
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
            raise WebhookVerificationError(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def parse_webhook_payload(self, payload: Dict[str, Any], headers: Dict[str, str]) -> WebhookEvent:
        """
        –ü–∞—Ä—Å–∏—Ç payload –≤–µ–±-—Ö—É–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.
        
        Args:
            payload: JSON payload –≤–µ–±-—Ö—É–∫–∞
            headers: HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            WebhookEvent —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        job_id = payload.get("jobId")
        status = payload.get("status")
        output = payload.get("output")
        
        if not job_id or not status:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è jobId –∏–ª–∏ status")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ output
        job_type = self._detect_job_type(output)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–∞—Ö –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        retry_num = headers.get("x-retry-num")
        retry_reason = headers.get("x-retry-reason")
        
        if retry_num:
            retry_num = int(retry_num)
            self.logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #{retry_num} –¥–ª—è job {job_id}, –ø—Ä–∏—á–∏–Ω–∞: {retry_reason}")
        
        return WebhookEvent(
            job_id=job_id,
            status=status,
            job_type=job_type,
            output=output,
            timestamp=datetime.now(),
            retry_num=retry_num,
            retry_reason=retry_reason
        )
    
    def _detect_job_type(self, output: Optional[Dict]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ output.
        
        Args:
            output: –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            
        Returns:
            –¢–∏–ø –∑–∞–¥–∞—á–∏: 'diarization', 'identify', 'voiceprint'
        """
        if not output:
            return "unknown"
        
        if "diarization" in output:
            return "diarization"
        elif "identification" in output:
            return "identify"
        elif "voiceprint" in output:
            return "voiceprint"
        else:
            return "unknown"
    
    def process_webhook_event(self, event: WebhookEvent) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤–µ–±-—Ö—É–∫–∞ —Å rate limiting.

        Args:
            event: –°–æ–±—ã—Ç–∏–µ –≤–µ–±-—Ö—É–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Returns:
            True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        operation_name = f"process_webhook_{event.job_type}"
        self.start_operation(operation_name)

        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting –¥–ª—è webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.wait_for_rate_limit("webhook_processing")

            self.log_with_emoji("info", "üéØ", f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {event.job_type} webhook: {event.job_id} (—Å—Ç–∞—Ç—É—Å: {event.status})")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            if event.status == "succeeded" and event.output:
                self._save_webhook_result(event)
                self.successful_events += 1
            elif event.status == "canceled":
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ó–∞–¥–∞—á–∞ {event.job_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                self.log_with_emoji("error", "‚ùå", f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {event.status}")

            # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
            if event.job_type in self.event_handlers:
                def handler_operation():
                    return self.event_handlers[event.job_type](event)

                self.retry_operation(
                    operation=handler_operation,
                    operation_name=f"webhook_handler_{event.job_type}",
                    max_retries=3
                )

            self.processed_webhooks += 1
            self.end_operation(operation_name)
            return True

        except Exception as e:
            self.handle_error(e, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Å–æ–±—ã—Ç–∏—è {event.job_id}")
            self.end_operation(operation_name)
            return False
    
    def _save_webhook_result(self, event: WebhookEvent) -> Path:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ–±-—Ö—É–∫–∞ –≤ —Ñ–∞–π–ª.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –≤–µ–±-—Ö—É–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = event.timestamp.strftime("%Y%m%d_%H%M%S")
        filename = f"{event.job_id}_{event.job_type}_{timestamp}.json"
        output_path = self.data_dir / filename
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        result_data = {
            "job_id": event.job_id,
            "job_type": event.job_type,
            "status": event.status,
            "timestamp": event.timestamp.isoformat(),
            "output": event.output,
            "retry_info": {
                "retry_num": event.retry_num,
                "retry_reason": event.retry_reason
            } if event.retry_num else None
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        save_json(result_data, output_path)
        
        self.logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        return output_path
    
    def register_event_handler(self, job_type: str, handler: Callable[[WebhookEvent], None]):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á.
        
        Args:
            job_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ ('diarization', 'identify', 'voiceprint')
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        self.event_handlers[job_type] = handler
        self.logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {job_type}")
    
    def run(self, payload: Dict[str, Any], headers: Dict[str, str]) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è WebhookAgent.

        Args:
            payload: JSON payload –≤–µ–±-—Ö—É–∫–∞
            headers: HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            True –µ—Å–ª–∏ webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        """
        try:
            # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
            timestamp = headers.get("x-request-timestamp", "")
            signature = headers.get("x-signature", "")
            body = json.dumps(payload, separators=(',', ':'))

            if not self.verify_signature(timestamp, body, signature):
                raise WebhookVerificationError("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")

            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è
            event = self.parse_webhook_payload(payload, headers)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è
            return self.process_webhook_event(event)

        except Exception as e:
            self.handle_error(e, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")
            return False

    def get_metrics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        return {
            "processed_webhooks": self.processed_webhooks,
            "failed_verifications": self.failed_verifications,
            "successful_events": self.successful_events,
            "verification_success_rate": (
                (self.processed_webhooks - self.failed_verifications) / max(self.processed_webhooks, 1)
            ) * 100
        }
