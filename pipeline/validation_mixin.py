# pipeline/validation_mixin.py

import mimetypes
import urllib.parse
from pathlib import Path
from typing import Set, Optional, Tuple

# Temporary workaround for Python 3.13 compatibility with pydub
try:
    from pydub import AudioSegment
    PYDUB_AVAILABLE = True
except ImportError:
    PYDUB_AVAILABLE = False
    print("‚ö†Ô∏è Warning: pydub not available, audio duration validation disabled")


class ValidationMixin:
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
    - MIME type –≤–∞–ª–∏–¥–∞—Ü–∏—è
    - URL –≤–∞–ª–∏–¥–∞—Ü–∏—è
    """
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ MIME —Ç–∏–ø—ã –¥–ª—è –∞—É–¥–∏–æ
    ALLOWED_AUDIO_MIME_TYPES: Set[str] = {
        'audio/mpeg',           # MP3
        'audio/wav',            # WAV
        'audio/x-wav',          # WAV (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
        'audio/wave',           # WAV (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
        'audio/mp4',            # M4A/MP4 audio
        'audio/x-m4a',          # M4A
        'audio/flac',           # FLAC
        'audio/ogg',            # OGG
        'audio/webm',           # WebM audio
        'video/mp4',            # MP4 video (—Å –∞—É–¥–∏–æ)
        'video/avi',            # AVI
        'video/mov',            # MOV
        'video/quicktime',      # QuickTime
    }
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    ALLOWED_AUDIO_EXTENSIONS: Set[str] = {
        '.mp3', '.wav', '.m4a', '.mp4', '.avi', '.mov', 
        '.flac', '.ogg', '.webm', '.aac', '.wma'
    }
    
    def validate_audio_file(self, file_path: Path, max_size_mb: int = 300, 
                           check_duration: bool = False, max_duration_hours: float = 24.0) -> None:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
            check_duration: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            max_duration_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
            
        Raises:
            FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            ValueError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not file_path.exists():
            raise FileNotFoundError(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        if not file_path.is_file():
            raise ValueError(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if file_path.suffix.lower() not in self.ALLOWED_AUDIO_EXTENSIONS:
            raise ValueError(
                f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path.suffix}. "
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(sorted(self.ALLOWED_AUDIO_EXTENSIONS))}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size_mb = file_path.stat().st_size / (1024 * 1024)
        if file_size_mb > max_size_mb:
            raise ValueError(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f}MB "
                f"(–º–∞–∫—Å–∏–º—É–º {max_size_mb}MB)"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME —Ç–∏–ø–∞
        mime_type, _ = mimetypes.guess_type(str(file_path))
        if mime_type and mime_type not in self.ALLOWED_AUDIO_MIME_TYPES:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            if hasattr(self, 'logger'):
                self.logger.warning(
                    f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π MIME —Ç–∏–ø: {mime_type} –¥–ª—è —Ñ–∞–π–ª–∞ {file_path.name}"
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if check_duration and PYDUB_AVAILABLE:
            try:
                audio = AudioSegment.from_file(str(file_path))
                duration_hours = len(audio) / (1000 * 60 * 60)  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã
                
                if duration_hours > max_duration_hours:
                    raise ValueError(
                        f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {duration_hours:.1f}—á "
                        f"(–º–∞–∫—Å–∏–º—É–º {max_duration_hours}—á)"
                    )
                
                if hasattr(self, 'logger'):
                    self.logger.debug(
                        f"üìä –§–∞–π–ª {file_path.name}: {file_size_mb:.1f}MB, "
                        f"{duration_hours:.1f}—á"
                    )
                    
            except Exception as e:
                if hasattr(self, 'logger'):
                    self.logger.warning(
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ {file_path.name}: {e}"
                    )
        elif check_duration and not PYDUB_AVAILABLE:
            if hasattr(self, 'logger'):
                self.logger.warning(
                    f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞: pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if hasattr(self, 'logger'):
            self.logger.debug(f"‚úÖ –§–∞–π–ª {file_path.name} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é ({file_size_mb:.1f}MB)")
    
    def validate_file_size(self, file_path: Path, max_size_mb: int, 
                          operation_name: str = "–æ–ø–µ—Ä–∞—Ü–∏—è") -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        """
        if not file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        file_size_mb = file_path.stat().st_size / (1024 * 1024)
        
        if file_size_mb > max_size_mb:
            raise ValueError(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è {operation_name}: {file_size_mb:.1f}MB "
                f"(–º–∞–∫—Å–∏–º—É–º {max_size_mb}MB)"
            )
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        if file_size_mb > max_size_mb * 0.8:  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
            if hasattr(self, 'logger'):
                self.logger.warning(
                    f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –¥–ª—è {operation_name}: {file_size_mb:.1f}MB, "
                    f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
                )
    
    def validate_url(self, url: str, require_https: bool = True) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è URL.
        
        Args:
            url: URL –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            require_https: –¢—Ä–µ–±–æ–≤–∞—Ç—å –ª–∏ HTTPS
            
        Returns:
            Tuple[bool, str]: (–≤–∞–ª–∏–¥–µ–Ω –ª–∏ URL, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        try:
            parsed = urllib.parse.urlparse(url)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã
            if not parsed.scheme:
                return False, "URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ö–µ–º—É (http/https)"
            
            if require_https and parsed.scheme != 'https':
                return False, "–¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            
            if parsed.scheme not in ['http', 'https']:
                return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Ö–µ–º–∞: {parsed.scheme}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–∞
            if not parsed.netloc:
                return False, "URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Å—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
            if parsed.hostname in ['localhost', '127.0.0.1', '0.0.0.0']:
                return False, "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã"
            
            return True, "URL –≤–∞–ª–∏–¥–µ–Ω"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL: {e}"
    
    def validate_voiceprint_ids(self, voiceprint_ids: list, min_count: int = 1, 
                               max_count: int = 100) -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ voiceprint ID.
        
        Args:
            voiceprint_ids: –°–ø–∏—Å–æ–∫ ID –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
            min_count: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ID
            max_count: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ID
            
        Raises:
            ValueError: –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é
        """
        if not isinstance(voiceprint_ids, list):
            raise ValueError("voiceprint_ids –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        
        if len(voiceprint_ids) < min_count:
            raise ValueError(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ voiceprint ID: {len(voiceprint_ids)} "
                f"(–º–∏–Ω–∏–º—É–º {min_count})"
            )
        
        if len(voiceprint_ids) > max_count:
            raise ValueError(
                f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ voiceprint ID: {len(voiceprint_ids)} "
                f"(–º–∞–∫—Å–∏–º—É–º {max_count})"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_ids = set(voiceprint_ids)
        if len(unique_ids) != len(voiceprint_ids):
            duplicates = len(voiceprint_ids) - len(unique_ids)
            raise ValueError(f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è voiceprint ID: {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏)
        for i, vp_id in enumerate(voiceprint_ids):
            if not isinstance(vp_id, str):
                raise ValueError(f"Voiceprint ID #{i} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω {type(vp_id)}")
            
            if not vp_id.strip():
                raise ValueError(f"Voiceprint ID #{i} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    def validate_language_code(self, language: Optional[str]) -> Optional[str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞.
        
        Args:
            language: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru', 'de')
            
        Returns:
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ –∏–ª–∏ None
            
        Raises:
            ValueError: –ï—Å–ª–∏ –∫–æ–¥ —è–∑—ã–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        """
        if language is None:
            return None
        
        if not isinstance(language, str):
            raise ValueError(f"–ö–æ–¥ —è–∑—ã–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω {type(language)}")
        
        language = language.strip().lower()
        
        if not language:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (ISO 639-1 –∫–æ–¥—ã –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 2)
        if len(language) != 2:
            raise ValueError(
                f"–ö–æ–¥ —è–∑—ã–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–º (ISO 639-1): '{language}'"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–∫–≤—ã
        if not language.isalpha():
            raise ValueError(f"–ö–æ–¥ —è–∑—ã–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã: '{language}'")
        
        return language
