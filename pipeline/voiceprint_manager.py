"""
VoiceprintManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
"""

import json
import logging
from pathlib import Path
from typing import Dict, List, Optional
import uuid
from datetime import datetime
import threading


class VoiceprintManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–ø–µ—á–∞—Ç–∫–∞–º–∏
    –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π JSON –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self, database_path: Path = Path("voiceprints/voiceprints.json")):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VoiceprintManager.
        
        Args:
            database_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
        """
        self.database_path = database_path
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.database_path.parent.mkdir(parents=True, exist_ok=True)

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π
        self._lock = threading.Lock()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        self.voiceprints = self._load_database()
        
        self.logger.info(f"‚úÖ VoiceprintManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.voiceprints)} voiceprints")
    
    def add_voiceprint(self,
                      label: str,
                      voiceprint_data: str,
                      source_file: str = "",
                      metadata: Optional[Dict] = None) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –≤ –±–∞–∑—É.

        Args:
            label: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "John Doe")
            voiceprint_data: Base64 –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
            source_file: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

        Returns:
            UUID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ voiceprint
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not label or not label.strip():
            raise ValueError("Label –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if not voiceprint_data or not voiceprint_data.strip():
            raise ValueError("Voiceprint data –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        voiceprint_id = str(uuid.uuid4())
        
        voiceprint_entry = {
            "id": voiceprint_id,
            "label": label,
            "voiceprint": voiceprint_data,
            "source_file": source_file,
            "created_at": datetime.now().isoformat(),
            "metadata": metadata or {}
        }
        
        self.voiceprints[voiceprint_id] = voiceprint_entry
        self._save_database()
        
        self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω voiceprint '{label}' (ID: {voiceprint_id[:8]}...)")
        return voiceprint_id
    
    def get_voiceprint(self, voiceprint_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–æ ID.
        
        Args:
            voiceprint_id: UUID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ voiceprint –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return self.voiceprints.get(voiceprint_id)
    
    def get_voiceprint_by_label(self, label: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–æ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏.
        
        Args:
            label: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ voiceprint –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for voiceprint in self.voiceprints.values():
            if voiceprint["label"].lower() == label.lower():
                return voiceprint
        return None
    
    def list_voiceprints(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ voiceprints
        """
        return list(self.voiceprints.values())
    
    def search_voiceprints(self, query: str) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏—â–µ—Ç –≤ label –∏ metadata)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö voiceprints
        """
        query_lower = query.lower()
        results = []
        
        for voiceprint in self.voiceprints.values():
            # –ü–æ–∏—Å–∫ –≤ label
            if query_lower in voiceprint["label"].lower():
                results.append(voiceprint)
                continue
            
            # –ü–æ–∏—Å–∫ –≤ metadata
            metadata_str = json.dumps(voiceprint.get("metadata", {})).lower()
            if query_lower in metadata_str:
                results.append(voiceprint)
        
        return results
    
    def delete_voiceprint(self, voiceprint_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∏–∑ –±–∞–∑—ã.
        
        Args:
            voiceprint_id: UUID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if voiceprint_id in self.voiceprints:
            label = self.voiceprints[voiceprint_id]["label"]
            del self.voiceprints[voiceprint_id]
            self._save_database()
            self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω voiceprint '{label}' (ID: {voiceprint_id[:8]}...)")
            return True
        return False
    
    def update_voiceprint(self, voiceprint_id: str, **updates) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞.
        
        Args:
            voiceprint_id: UUID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
            **updates: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if voiceprint_id not in self.voiceprints:
            return False
        
        voiceprint = self.voiceprints[voiceprint_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        allowed_fields = ["label", "metadata", "source_file"]
        for field, value in updates.items():
            if field in allowed_fields:
                voiceprint[field] = value
        
        voiceprint["updated_at"] = datetime.now().isoformat()
        self._save_database()
        
        self.logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω voiceprint '{voiceprint['label']}' (ID: {voiceprint_id[:8]}...)")
        return True
    
    def get_voiceprints_for_identification(self, labels: List[str]) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç voiceprints –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Identification API.
        
        Args:
            labels: –°–ø–∏—Å–æ–∫ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –∏–º–µ–Ω
            
        Returns:
            –°–ø–∏—Å–æ–∫ voiceprints –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"label": str, "voiceprint": str}, ...]
        """
        result = []
        
        for label in labels:
            voiceprint = self.get_voiceprint_by_label(label)
            if voiceprint:
                result.append({
                    "label": voiceprint["label"],
                    "voiceprint": voiceprint["voiceprint"]
                })
            else:
                self.logger.warning(f"‚ö†Ô∏è Voiceprint –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{label}'")
        
        return result
    
    def export_voiceprints(self, output_path: Path, labels: Optional[List[str]] = None) -> None:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç voiceprints –≤ JSON —Ñ–∞–π–ª.
        
        Args:
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            labels: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (None –¥–ª—è –≤—Å–µ—Ö)
        """
        if labels:
            voiceprints_to_export = {}
            for label in labels:
                voiceprint = self.get_voiceprint_by_label(label)
                if voiceprint:
                    voiceprints_to_export[voiceprint["id"]] = voiceprint
        else:
            voiceprints_to_export = self.voiceprints
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(voiceprints_to_export, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(voiceprints_to_export)} voiceprints –≤ {output_path}")
    
    def import_voiceprints(self, input_path: Path, overwrite: bool = False) -> int:
        """
        –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç voiceprints –∏–∑ JSON —Ñ–∞–π–ª–∞.
        
        Args:
            input_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
            overwrite: –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ voiceprints
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö voiceprints
        """
        with open(input_path, 'r', encoding='utf-8') as f:
            imported_voiceprints = json.load(f)
        
        imported_count = 0
        
        for voiceprint_id, voiceprint_data in imported_voiceprints.items():
            if voiceprint_id in self.voiceprints and not overwrite:
                self.logger.warning(f"‚ö†Ô∏è Voiceprint {voiceprint_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            self.voiceprints[voiceprint_id] = voiceprint_data
            imported_count += 1
        
        self._save_database()
        self.logger.info(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} voiceprints –∏–∑ {input_path}")
        return imported_count
    
    def get_statistics(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ voiceprints.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        created_dates = [vp.get("created_at", "") for vp in self.voiceprints.values()]
        valid_dates = [date for date in created_dates if date]

        stats = {
            "total": len(self.voiceprints),
            "labels": [vp["label"] for vp in self.voiceprints.values()] if self.voiceprints else [],
            "oldest": min(valid_dates) if valid_dates else None,
            "newest": max(valid_dates) if valid_dates else None,
            "database_path": str(self.database_path),
            "database_size_kb": round(self.database_path.stat().st_size / 1024, 2) if self.database_path.exists() else 0
        }

        return stats
    
    def _load_database(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É voiceprints –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        if self.database_path.exists():
            try:
                with open(self.database_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                self.logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ voiceprints: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                return data
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã voiceprints: {e}")
                self.logger.info("üÜï –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –±–∞–∑—É voiceprints")
        
        return {}
    
    def _save_database(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É voiceprints –≤ JSON —Ñ–∞–π–ª."""
        try:
            with self._lock:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                voiceprints_copy = dict(self.voiceprints)
                with open(self.database_path, 'w', encoding='utf-8') as f:
                    json.dump(voiceprints_copy, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã voiceprints: {e}")
            raise
