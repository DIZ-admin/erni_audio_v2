#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WER –æ—Ü–µ–Ω–∫–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
"""

import logging
import sys
import json
from pathlib import Path
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

from pipeline.transcription_quality_tester import TranscriptionQualityTester, TestScenario
from pipeline.wer_evaluator import TranscriptionResult


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler(sys.stdout)]
    )


def create_demo_scenarios():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    scenarios = []
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    scenarios.append(TestScenario(
        name="russian_business_meeting",
        audio_file=Path("demo_audio_ru.wav"),  # –§–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
        reference_text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞. –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–º–µ–º –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
        description="–î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
        language="ru",
        expected_speakers=2
    ))
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–µ–º–µ—Ü–∫–∏–π —Ç–µ–∫—Å—Ç
    scenarios.append(TestScenario(
        name="german_conference",
        audio_file=Path("demo_audio_de.wav"),  # –§–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
        reference_text="Guten Tag und herzlich willkommen zur Konferenz. Heute besprechen wir die wichtigsten Themen unserer Agenda.",
        description="–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ",
        language="de",
        expected_speakers=3
    ))
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    scenarios.append(TestScenario(
        name="english_presentation",
        audio_file=Path("demo_audio_en.wav"),  # –§–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
        reference_text="Welcome to our quarterly presentation. Today we will review our achievements and discuss future plans.",
        description="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
        language="en",
        expected_speakers=1
    ))
    
    return scenarios


def create_mock_transcription_results(reference_text: str, model_name: str):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if model_name == "whisper-1":
        # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
        if "—Ä—É—Å—Å–∫–æ–º" in reference_text or "–î–æ–±—Ä–æ" in reference_text:
            hypothesis = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–º–µ–º –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏–µ."
        elif "Guten" in reference_text:
            hypothesis = "Guten Tag und herzlich willkommen zur Konferenz. Heute besprechen wir die wichtigsten Themen unsere Agenda."
        else:
            hypothesis = "Welcome to our quarterly presentation. Today we will review our achievements and discuss future plan."
        
        return TranscriptionResult(
            model_name=model_name,
            segments=[{"text": hypothesis}],
            processing_time=2.5,
            estimated_cost="$0.006",
            success=True
        )
    
    elif model_name == "gpt-4o-mini-transcribe":
        # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if "—Ä—É—Å—Å–∫–æ–º" in reference_text or "–î–æ–±—Ä–æ" in reference_text:
            hypothesis = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞. –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–º–µ–º –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."
        elif "Guten" in reference_text:
            hypothesis = "Guten Tag und herzlich willkommen zur Konferenz. Heute besprechen wir wichtigsten Themen unserer Agenda."
        else:
            hypothesis = "Welcome to our quarterly presentation. Today we will review achievements and discuss future plans."
        
        return TranscriptionResult(
            model_name=model_name,
            segments=[{"text": hypothesis}],
            processing_time=3.2,
            estimated_cost="$0.012",
            success=True
        )
    
    elif model_name == "gpt-4o-transcribe":
        # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if "—Ä—É—Å—Å–∫–æ–º" in reference_text or "–î–æ–±—Ä–æ" in reference_text:
            hypothesis = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞. –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–º–µ–º –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."
        elif "Guten" in reference_text:
            hypothesis = "Guten Tag und herzlich willkommen zur Konferenz. Heute besprechen wir die wichtigsten Themen unserer Agenda."
        else:
            hypothesis = "Welcome to our quarterly presentation. Today we will review our achievements and discuss future plans."
        
        return TranscriptionResult(
            model_name=model_name,
            segments=[{"text": hypothesis}],
            processing_time=4.1,
            estimated_cost="$0.024",
            success=True
        )
    
    elif model_name == "replicate-whisper-diarization":
        # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        if "—Ä—É—Å—Å–∫–æ–º" in reference_text or "–î–æ–±—Ä–æ" in reference_text:
            hypothesis = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞. –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–º–µ–º –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."
        elif "Guten" in reference_text:
            hypothesis = "Guten Tag und herzlich willkommen zur Konferenz. Heute besprechen wir die wichtigsten Themen unserer Agenda."
        else:
            hypothesis = "Welcome to our quarterly presentation. Today we will review our achievements and discuss future plans."
        
        return TranscriptionResult(
            model_name=model_name,
            segments=[
                {"text": hypothesis, "speaker": "SPEAKER_00"}
            ],
            processing_time=1.8,
            estimated_cost="$0.008",
            success=True
        )
    
    # –û—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    return TranscriptionResult(
        model_name=model_name,
        segments=[],
        processing_time=0.0,
        estimated_cost="N/A",
        success=False,
        error="Unknown model"
    )


def mock_test_methods(tester, scenarios):
    """–ú–æ–∫–∞–µ—Ç –º–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def mock_test_openai_model(model, scenario):
        return create_mock_transcription_results(scenario.reference_text, model)
    
    def mock_test_replicate_model(scenario):
        return create_mock_transcription_results(scenario.reference_text, "replicate-whisper-diarization")
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –Ω–∞ –º–æ–∫–æ–≤—ã–µ
    tester.test_openai_model = mock_test_openai_model
    tester.test_replicate_model = mock_test_replicate_model
    
    return tester


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    print("=" * 70)
    print("üìù –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã WER –æ—Ü–µ–Ω–∫–∏ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("üîß –†–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = TranscriptionQualityTester(
        openai_api_key="demo-key",
        replicate_api_key="demo-replicate-key"
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = create_demo_scenarios()
    
    print(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(scenarios)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:")
    for scenario in scenarios:
        print(f"  - {scenario.name}: {scenario.description}")
    print()
    
    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tester = mock_test_methods(tester, scenarios)
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = tester.run_comprehensive_test(scenarios)
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("üìä –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        comparison = results["model_comparison"]
        
        print(f"{'–ú–æ–¥–µ–ª—å':<30} {'–¢–æ—á–Ω–æ—Å—Ç—å —Å–ª–æ–≤':<15} {'WER':<8} {'–í—Ä–µ–º—è (—Å)':<10} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<12}")
        print("-" * 80)
        
        for model_name, stats in sorted(comparison.items(), key=lambda x: x[1]["word_accuracy"], reverse=True):
            print(f"{model_name:<30} {stats['word_accuracy']:.3f}           {stats['average_wer']:.3f}    "
                  f"{stats['average_processing_time']:.1f}        ${stats['average_cost_usd']:.4f}")
        
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        best_accuracy = max(comparison.values(), key=lambda x: x["word_accuracy"])
        fastest = min([v for v in comparison.values() if v["success_rate"] > 0], key=lambda x: x["average_processing_time"])
        cheapest = min([v for v in comparison.values() if v["success_rate"] > 0], key=lambda x: x["average_cost_usd"])
        
        best_model = [k for k, v in comparison.items() if v == best_accuracy][0]
        fastest_model = [k for k, v in comparison.items() if v == fastest][0]
        cheapest_model = [k for k, v in comparison.items() if v == cheapest][0]
        
        print("üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"  üéØ –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {best_model} (—Ç–æ—á–Ω–æ—Å—Ç—å —Å–ª–æ–≤: {best_accuracy['word_accuracy']:.3f})")
        print(f"  ‚ö° –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è: {fastest_model} (–≤—Ä–µ–º—è: {fastest['average_processing_time']:.1f}—Å)")
        print(f"  üí∞ –°–∞–º–∞—è —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è: {cheapest_model} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cheapest['average_cost_usd']:.4f})")
        print()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        output_dir = Path("data/interim")
        report_path = tester.generate_report(results, output_dir)
        
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        print(f"üìä JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_dir / 'wer_evaluation_results.json'}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print("üîç –ü—Ä–∏–º–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:")
        first_scenario = list(results["scenarios"].keys())[0]
        scenario_data = results["scenarios"][first_scenario]
        
        print(f"–°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_data['scenario_info']['name']}")
        print(f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {scenario_data['scenario_info']['reference_text'][:60]}...")
        print()
        
        for model_name, result in scenario_data["model_results"].items():
            if result.get("success", False):
                metrics = result["quality_metrics"]
                print(f"  {model_name}:")
                print(f"    WER: {metrics['wer']:.3f} | CER: {metrics['cer']:.3f}")
                print(f"    –í—Ä–µ–º—è: {result['processing_time']:.1f}—Å | –°—Ç–æ–∏–º–æ—Å—Ç—å: {result['estimated_cost']}")
                print()
        
        print("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
