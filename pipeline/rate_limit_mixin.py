# pipeline/rate_limit_mixin.py

from typing import Optional, Callable, Any
from .rate_limiter import get_rate_limiter, DynamicRateLimiter


class RateLimitMixin:
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ rate limiting –≤ –∞–≥–µ–Ω—Ç—ã.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ rate limiting API –≤—ã–∑–æ–≤–æ–≤
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    - Graceful degradation –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
    """
    
    def __init__(self, api_name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rate limiting.
        
        Args:
            api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API –¥–ª—è rate limiting (pyannote, openai, replicate)
        """
        self.api_name = api_name
        self._rate_limiter: Optional[DynamicRateLimiter] = None
        
        if api_name:
            self._rate_limiter = get_rate_limiter(api_name)
            if self._rate_limiter and hasattr(self, 'logger'):
                self.logger.debug(
                    f"üö¶ Rate limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {api_name}: "
                    f"{self._rate_limiter.max_requests} req/{self._rate_limiter.window_seconds}s"
                )
    
    def with_rate_limit(self, func: Callable, operation_key: str = "default", 
                       timeout: Optional[float] = None) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å rate limiting.
        
        Args:
            func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            operation_key: –ö–ª—é—á –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è rate limit (—Å–µ–∫—É–Ω–¥—ã)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Raises:
            TimeoutError: –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è rate limit
        """
        if not self._rate_limiter:
            # –ï—Å–ª–∏ rate limiter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            return func()
        
        # –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç rate limiter
        wait_time = self._rate_limiter.wait_if_needed(operation_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if timeout and wait_time > timeout:
            error_msg = (
                f"Rate limit –æ–∂–∏–¥–∞–Ω–∏–µ ({wait_time:.1f}—Å) –ø—Ä–µ–≤—ã—Å–∏–ª–æ —Ç–∞–π–º–∞—É—Ç ({timeout}—Å) "
                f"–¥–ª—è {self.api_name}.{operation_key}"
            )
            if hasattr(self, 'logger'):
                self.logger.error(f"‚è∞ {error_msg}")
            raise TimeoutError(error_msg)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        try:
            result = func()
            
            if wait_time > 0 and hasattr(self, 'logger'):
                self.logger.debug(
                    f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è {self.api_name}.{operation_key} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ "
                    f"–ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è {wait_time:.1f}—Å"
                )
            
            return result
            
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {self.api_name}.{operation_key} "
                    f"–ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è {wait_time:.1f}—Å: {e}"
                )
            raise
    
    def check_rate_limit_status(self, operation_key: str = "default") -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å rate limit.
        
        Args:
            operation_key: –ö–ª—é—á –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º rate limit
        """
        if not self._rate_limiter:
            return {
                "rate_limit_enabled": False,
                "remaining_requests": float('inf'),
                "api_name": self.api_name or "unknown"
            }
        
        remaining = self._rate_limiter.get_remaining_requests(operation_key)
        is_allowed = self._rate_limiter.is_allowed(operation_key)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ is_allowed, –Ω—É–∂–Ω–æ "–≤–µ—Ä–Ω—É—Ç—å" –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ
        if is_allowed and self._rate_limiter.requests[operation_key]:
            self._rate_limiter.requests[operation_key].pop()
        
        return {
            "rate_limit_enabled": True,
            "api_name": self.api_name,
            "remaining_requests": remaining,
            "is_allowed": is_allowed,
            "max_requests": self._rate_limiter.max_requests,
            "window_seconds": self._rate_limiter.window_seconds
        }
    
    def log_rate_limit_statistics(self) -> Optional[dict]:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–ª–∏ None –µ—Å–ª–∏ rate limiter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        if not self._rate_limiter:
            return None
        
        stats = self._rate_limiter.get_statistics()
        
        if hasattr(self, 'logger'):
            self.logger.info(
                f"üìä Rate limit —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.api_name}: "
                f"{stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤, "
                f"{stats['blocked_count']} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ "
                f"({stats['block_rate_percent']:.1f}%), "
                f"–æ–±—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {stats['total_wait_time']:.1f}—Å"
            )
        
        return stats
    
    def reset_rate_limit_stats(self, operation_key: Optional[str] = None) -> None:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting.
        
        Args:
            operation_key: –ö–ª—é—á –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ (–µ—Å–ª–∏ None, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ)
        """
        if not self._rate_limiter:
            return
        
        self._rate_limiter.reset(operation_key)
        
        if hasattr(self, 'logger'):
            if operation_key:
                self.logger.debug(f"üîÑ Rate limit —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è {operation_key}")
            else:
                self.logger.debug("üîÑ –í—Å—è rate limit —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def get_rate_limit_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö rate limiting.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ rate limiting
        """
        if not self._rate_limiter:
            return {
                "enabled": False,
                "api_name": self.api_name or "unknown",
                "reason": "Rate limiter not configured"
            }
        
        return {
            "enabled": True,
            "api_name": self.api_name,
            "max_requests": self._rate_limiter.max_requests,
            "window_seconds": self._rate_limiter.window_seconds,
            "current_statistics": self._rate_limiter.get_statistics()
        }
    
    def is_rate_limited(self, operation_key: str = "default") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è rate limiting.
        
        Args:
            operation_key: –ö–ª—é—á –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ rate limiting
        """
        if not self._rate_limiter:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫
        with self._rate_limiter.lock:
            import time
            now = time.time()
            window_start = now - self._rate_limiter.window_seconds
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –æ–∫–Ω–∞
            while (self._rate_limiter.requests[operation_key] and 
                   self._rate_limiter.requests[operation_key][0] < window_start):
                self._rate_limiter.requests[operation_key].popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            return len(self._rate_limiter.requests[operation_key]) >= self._rate_limiter.max_requests
