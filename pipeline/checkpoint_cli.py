#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è checkpoint'–∞–º–∏
"""

import argparse
import logging
import sys
from pathlib import Path
from typing import List, Dict, Any
import json
from datetime import datetime, timedelta

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

from checkpoint_manager import CheckpointManager, PipelineStage

def load_json(file_path):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    import json
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )


def list_checkpoints(checkpoint_manager: CheckpointManager, detailed: bool = False) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö checkpoint'–æ–≤"""
    checkpoints_dir = checkpoint_manager.checkpoints_dir
    state_files = list(checkpoints_dir.glob("*_state.json"))
    
    if not state_files:
        print("üìã Checkpoint'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(state_files)} checkpoint'–æ–≤:")
    print("=" * 80)
    
    for state_file in sorted(state_files):
        try:
            data = load_json(state_file)
            pipeline_id = data.get('pipeline_id', 'unknown')
            input_file = data.get('input_file', 'unknown')
            created_at = data.get('created_at', 'unknown')
            status = "completed" if not data.get('failed_stage') else "failed"
            completed_stages = data.get('completed_stages', [])
            
            print(f"üîπ Pipeline ID: {pipeline_id}")
            print(f"   –§–∞–π–ª: {input_file}")
            print(f"   –°–æ–∑–¥–∞–Ω: {created_at}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status}")
            print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã: {', '.join(completed_stages) if completed_stages else '–Ω–µ—Ç'}")
            
            if detailed:
                checkpoints = data.get('checkpoints', [])
                print(f"   Checkpoint'—ã ({len(checkpoints)}):")
                for cp in checkpoints:
                    status_icon = "‚úÖ" if cp.get('success') else "‚ùå"
                    print(f"     {status_icon} {cp.get('stage', 'unknown')} - {cp.get('timestamp', 'unknown')}")
                    if not cp.get('success') and cp.get('error_message'):
                        print(f"       –û—à–∏–±–∫–∞: {cp.get('error_message')}")
            
            print("-" * 80)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {state_file}: {e}")


def show_checkpoint(checkpoint_manager: CheckpointManager, pipeline_id: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ checkpoint'–∞"""
    checkpoints_dir = checkpoint_manager.checkpoints_dir
    state_file = checkpoints_dir / f"{pipeline_id}_state.json"
    
    if not state_file.exists():
        print(f"‚ùå Checkpoint —Å ID {pipeline_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        data = load_json(state_file)
        
        print(f"üìã –î–µ—Ç–∞–ª–∏ checkpoint'–∞: {pipeline_id}")
        print("=" * 80)
        print(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {data.get('input_file', 'unknown')}")
        print(f"–°–æ–∑–¥–∞–Ω: {data.get('created_at', 'unknown')}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω: {data.get('last_updated', 'unknown')}")
        print(f"–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {data.get('current_stage', '–Ω–µ—Ç')}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã–π —ç—Ç–∞–ø: {data.get('failed_stage', '–Ω–µ—Ç')}")
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã: {', '.join(data.get('completed_stages', []))}")
        
        checkpoints = data.get('checkpoints', [])
        print(f"\nCheckpoint'—ã ({len(checkpoints)}):")
        print("-" * 80)
        
        for i, cp in enumerate(checkpoints, 1):
            status_icon = "‚úÖ" if cp.get('success') else "‚ùå"
            print(f"{i}. {status_icon} {cp.get('stage', 'unknown')}")
            print(f"   –í—Ä–µ–º—è: {cp.get('timestamp', 'unknown')}")
            print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {cp.get('output_file', '–Ω–µ—Ç')}")
            
            if cp.get('metadata'):
                print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {json.dumps(cp['metadata'], indent=2, ensure_ascii=False)}")
            
            if not cp.get('success') and cp.get('error_message'):
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {cp.get('error_message')}")
            
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è checkpoint'–∞: {e}")


def validate_checkpoint(checkpoint_manager: CheckpointManager, pipeline_id: str) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è checkpoint'–∞"""
    checkpoints_dir = checkpoint_manager.checkpoints_dir
    state_file = checkpoints_dir / f"{pipeline_id}_state.json"
    
    if not state_file.exists():
        print(f"‚ùå Checkpoint —Å ID {pipeline_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        data = load_json(state_file)
        input_file = data.get('input_file', '')
        
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è checkpoint'–∞: {pipeline_id}")
        print("=" * 80)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        validation_results = checkpoint_manager.validate_checkpoint_files(input_file)
        
        if not validation_results:
            print("üìã –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return
        
        valid_count = sum(1 for valid in validation_results.values() if valid)
        total_count = len(validation_results)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {valid_count}/{total_count} —Ñ–∞–π–ª–æ–≤ –≤–∞–ª–∏–¥–Ω—ã")
        print("-" * 80)
        
        for file_path, is_valid in validation_results.items():
            status_icon = "‚úÖ" if is_valid else "‚ùå"
            file_exists = Path(file_path).exists()
            existence_icon = "üìÅ" if file_exists else "üö´"
            
            print(f"{status_icon} {existence_icon} {file_path}")
            
            if not is_valid and file_exists:
                print(f"   ‚ö†Ô∏è –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ")
            elif not file_exists:
                print(f"   üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if valid_count == total_count:
            print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã checkpoint'–∞ –≤–∞–ª–∏–¥–Ω—ã")
        else:
            print(f"\n‚ö†Ô∏è {total_count - valid_count} —Ñ–∞–π–ª–æ–≤ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


def cleanup_checkpoints(checkpoint_manager: CheckpointManager, 
                       older_than_hours: int = None, 
                       invalid_only: bool = False,
                       dry_run: bool = False) -> None:
    """–û—á–∏—Å—Ç–∫–∞ checkpoint'–æ–≤"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ checkpoint'–æ–≤")
    print("=" * 80)
    
    if dry_run:
        print("üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)")
    
    if invalid_only:
        print("üéØ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö checkpoint'–æ–≤")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö checkpoint'–æ–≤
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö checkpoint'–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        return
    
    if older_than_hours:
        days_old = older_than_hours / 24
        print(f"üïí –£–¥–∞–ª–µ–Ω–∏–µ checkpoint'–æ–≤ —Å—Ç–∞—Ä—à–µ {older_than_hours} —á–∞—Å–æ–≤")
    else:
        days_old = 7
        print(f"üïí –£–¥–∞–ª–µ–Ω–∏–µ checkpoint'–æ–≤ —Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π")
    
    if not dry_run:
        removed_count = checkpoint_manager.cleanup_old_checkpoints(days_old=days_old)
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} checkpoint'–æ–≤")
    else:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        checkpoints_dir = checkpoint_manager.checkpoints_dir
        cutoff_date = datetime.now() - timedelta(days=days_old)
        
        to_remove = []
        for state_file in checkpoints_dir.glob("*_state.json"):
            try:
                data = load_json(state_file)
                created_at = datetime.fromisoformat(data.get('created_at', ''))
                if created_at < cutoff_date:
                    to_remove.append(state_file)
            except:
                continue
        
        print(f"üìã –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(to_remove)} checkpoint'–æ–≤:")
        for file_path in to_remove:
            print(f"   üóëÔ∏è {file_path.name}")


def export_checkpoint(checkpoint_manager: CheckpointManager, 
                     pipeline_id: str, 
                     output_file: str) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç checkpoint'–∞"""
    checkpoints_dir = checkpoint_manager.checkpoints_dir
    state_file = checkpoints_dir / f"{pipeline_id}_state.json"
    
    if not state_file.exists():
        print(f"‚ùå Checkpoint —Å ID {pipeline_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        data = load_json(state_file)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "export_timestamp": datetime.now().isoformat(),
            "export_version": "1.0",
            "checkpoint_data": data
        }
        
        output_path = Path(output_file)
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Checkpoint —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {output_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ checkpoint'–∞–º–∏ Speech Pipeline",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s list                          # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö checkpoint'–æ–≤
  %(prog)s list --detailed               # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
  %(prog)s show abc123def456             # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π checkpoint
  %(prog)s validate abc123def456         # –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å checkpoint
  %(prog)s cleanup --older-than 24       # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
  %(prog)s cleanup --invalid --dry-run   # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–∏—Å—Ç–∫–∏
  %(prog)s export abc123def456 backup.json  # –≠–∫—Å–ø–æ—Ä—Ç checkpoint'–∞
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ list
    list_parser = subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ checkpoint\'–æ–≤')
    list_parser.add_argument('--detailed', action='store_true', 
                           help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    
    # –ö–æ–º–∞–Ω–¥–∞ show
    show_parser = subparsers.add_parser('show', help='–ü–æ–∫–∞–∑–∞—Ç—å checkpoint')
    show_parser.add_argument('pipeline_id', help='ID checkpoint\'–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ validate
    validate_parser = subparsers.add_parser('validate', help='–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å checkpoint')
    validate_parser.add_argument('pipeline_id', help='ID checkpoint\'–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ cleanup
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∏—Ç—å checkpoint\'—ã')
    cleanup_parser.add_argument('--older-than', type=int, metavar='HOURS',
                               help='–£–¥–∞–ª–∏—Ç—å checkpoint\'—ã —Å—Ç–∞—Ä—à–µ N —á–∞—Å–æ–≤')
    cleanup_parser.add_argument('--invalid', action='store_true',
                               help='–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ checkpoint\'—ã')
    cleanup_parser.add_argument('--dry-run', action='store_true',
                               help='–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (–Ω–µ —É–¥–∞–ª—è—Ç—å)')
    
    # –ö–æ–º–∞–Ω–¥–∞ export
    export_parser = subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç checkpoint\'–∞')
    export_parser.add_argument('pipeline_id', help='ID checkpoint\'–∞')
    export_parser.add_argument('output_file', help='–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    setup_logging()
    checkpoint_manager = CheckpointManager()
    
    try:
        if args.command == 'list':
            list_checkpoints(checkpoint_manager, detailed=args.detailed)
        elif args.command == 'show':
            show_checkpoint(checkpoint_manager, args.pipeline_id)
        elif args.command == 'validate':
            validate_checkpoint(checkpoint_manager, args.pipeline_id)
        elif args.command == 'cleanup':
            cleanup_checkpoints(
                checkpoint_manager,
                older_than_hours=args.older_than,
                invalid_only=args.invalid,
                dry_run=args.dry_run
            )
        elif args.command == 'export':
            export_checkpoint(checkpoint_manager, args.pipeline_id, args.output_file)
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
