# pipeline/qc_agent.py

import json
from pathlib import Path
from typing import List, Dict, Any, Optional
from pydub import AudioSegment

TARGET_SR = 16_000

class QCAgent:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è ¬´–∫–∞—á–µ—Å—Ç–≤–∞¬ª –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —ç—Ç–∞–ª–æ–Ω–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤.
    –§—É–Ω–∫—Ü–∏—è run() –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–ª–∞–≥ --voiceprints-dir, —Ç–æ
    —Ä–µ–∂–µ—Ç WAV –ø–æ 30 —Å–µ–∫ ¬´—á–∏—Å—Ç–æ–π —Ä–µ—á–∏¬ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SPEAKER_XX ‚Üí voiceprints/*.wav.
    –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ raw_diar –¥–∞–ª–µ–µ, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """

    def __init__(self, manifest_dir: Optional[Path] = None, per_speaker_sec: int = 30):
        """
        :param manifest_dir: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫—É–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å WAV-—ç—Ç–∞–ª–æ–Ω—ã (voiceprints/).
                             –ï—Å–ª–∏ None, QCAgent –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç raw_diar.
        :param per_speaker_sec: —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Ä–µ—á–∏ —Å–æ–±—Ä–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ (‚â§ 30).
        """
        self.manifest_dir = manifest_dir
        self.per_speaker_sec = per_speaker_sec

    def extract_voiceprints(self, wav_path: Path, diar: List[Dict[str, Any]]):
        """
        –°–æ–∑–¥–∞—ë—Ç WAV-—ç—Ç–∞–ª–æ–Ω—ã ‚â§ per_speaker_sec –¥–ª—è –∫–∞–∂–¥–æ–≥–æ speaker –≤ diar.
        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É extract_voiceprints, —Ç–æ–ª—å–∫–æ –Ω–∞–∑—ã–≤–∞–µ–º Skeleton "Agent".
        """
        if not self.manifest_dir:
            return

        self.manifest_dir.mkdir(parents=True, exist_ok=True)
        audio = AudioSegment.from_wav(wav_path)
        manifest = {}
        grouped = {}
        for seg in diar:
            grouped.setdefault(seg["speaker"], []).append(seg)

        for spk, segs in grouped.items():
            collected = AudioSegment.empty()
            for seg in segs:
                snippet = audio[int(1000 * seg["start"]) : int(1000 * seg["end"])]
                collected += snippet
                if len(collected) >= self.per_speaker_sec * 1000:
                    break
            if len(collected) < 5_000:
                continue

            out_file = self.manifest_dir / f"{spk}.wav"
            collected.set_frame_rate(TARGET_SR).set_channels(1).export(out_file, format="wav")
            manifest[spk] = out_file.as_posix()
            print(f"üíæ  QCAgent: saved voiceprint ‚Üí {out_file}")

        manifest_path = self.manifest_dir / "manifest.json"
        manifest_path.write_text(json.dumps(manifest, indent=2, ensure_ascii=False))
        print(f"üìÑ  QCAgent: manifest written ‚Üí {manifest_path}")

    def run(self, wav_local: Path, diar: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ï—Å–ª–∏ manifest_dir –∑–∞–¥–∞–Ω, —Ä–µ–∂–µ–º WAV –Ω–∞ —ç—Ç–∞–ª–æ–Ω—ã –∏ –≤—ã—Ö–æ–¥–∏–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º [], –ø–æ—Ç–æ–º—É —á—Ç–æ
        –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è). –ï—Å–ª–∏ manifest_dir = None, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º diar –¥–∞–ª—å—à–µ.
        """
        if self.manifest_dir:
            self.extract_voiceprints(wav_local, diar)
            return []  # —Å–∏–≥–Ω–∞–ª, —á—Ç–æ pipeline –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        else:
            return diar  # –ø–µ—Ä–µ–¥–∞—ë–º ¬´–≤–ø–µ—Ä–µ–¥¬ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
