# pipeline/pyannote_media_agent.py

import logging
import os
import requests
import uuid
from pathlib import Path
from typing import Optional
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type


class PyannoteMediaAgent:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å pyannote.ai Media API.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ pyannote.ai:
    - –°–æ–∑–¥–∞–µ—Ç pre-signed URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    - –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 24-48 —á–∞—Å–æ–≤
    - –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ transfer.sh
    """

    def __init__(self, api_key: str):
        """
        Args:
            api_key: API –∫–ª—é—á pyannote.ai
        """
        self.api_key = api_key
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        self.logger = logging.getLogger(__name__)
        self.base_url = "https://api.pyannote.ai/v1"

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=1, max=10),
        retry=retry_if_exception_type((requests.RequestException,)),
        before_sleep=lambda retry_state: logging.getLogger(__name__).warning(
            f"–ü–æ–≤—Ç–æ—Ä {retry_state.attempt_number} —Å–æ–∑–¥–∞–Ω–∏—è pre-signed URL"
        )
    )
    def _create_presigned_url(self, virtual_path: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç pre-signed URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.
        
        Args:
            virtual_path: –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ media://folder/filename.wav
            
        Returns:
            Pre-signed URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            self.logger.debug(f"–°–æ–∑–¥–∞—é pre-signed URL –¥–ª—è: {virtual_path}")

            payload = {"url": virtual_path}

            response = requests.post(
                f"{self.base_url}/media/input",
                json=payload,
                headers=self.headers,
                timeout=30
            )
            response.raise_for_status()
            
            data = response.json()
            presigned_url = data["url"]
            
            self.logger.debug(f"Pre-signed URL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return presigned_url
            
        except requests.Timeout as e:
            self.logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ pre-signed URL: {e}")
            raise
        except requests.HTTPError as e:
            self.logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ pre-signed URL: {e}")
            if hasattr(e, 'response') and e.response is not None:
                if e.response.status_code == 401:
                    raise RuntimeError("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á pyannote.ai") from e
                elif e.response.status_code == 429:
                    raise RuntimeError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ pyannote.ai") from e
                else:
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ pyannote.ai API: {e}") from e
            else:
                raise RuntimeError(f"–û—à–∏–±–∫–∞ pyannote.ai API: {e}") from e
        except KeyError as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {e}")
            raise RuntimeError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ pyannote.ai API") from e

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=20),
        retry=retry_if_exception_type((requests.RequestException,)),
        before_sleep=lambda retry_state: logging.getLogger(__name__).warning(
            f"–ü–æ–≤—Ç–æ—Ä {retry_state.attempt_number} –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"
        )
    )
    def _upload_file_to_presigned_url(self, file_path: Path, presigned_url: str) -> None:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–æ pre-signed URL.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            presigned_url: Pre-signed URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            self.logger.debug(f"–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª {file_path.name} –ø–æ pre-signed URL")
            
            with open(file_path, "rb") as file_data:
                response = requests.put(
                    presigned_url,
                    data=file_data,
                    timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                )
                response.raise_for_status()
            
            self.logger.debug(f"–§–∞–π–ª {file_path.name} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except requests.Timeout as e:
            self.logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            raise RuntimeError(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}") from e
        except requests.HTTPError as e:
            self.logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}") from e
        except IOError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}") from e

    def upload_file(self, file_path: Path, custom_name: Optional[str] = None) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ pyannote.ai.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            custom_name: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Jobs API (media://...)
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: media://example/conversation.wav
            if custom_name:
                filename = custom_name
            else:
                unique_id = uuid.uuid4().hex[:8]
                filename = f"conversation-{unique_id}.wav"

            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            virtual_path = f"media://example/{filename}"
            
            self.logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞—é {file_path.name} –≤ pyannote.ai –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
            
            # –°–æ–∑–¥–∞–µ–º pre-signed URL
            presigned_url = self._create_presigned_url(virtual_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            self._upload_file_to_presigned_url(file_path, presigned_url)
            
            self.logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ pyannote.ai: {virtual_path}")
            self.logger.info("‚ÑπÔ∏è –§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 24-48 —á–∞—Å–æ–≤")
            
            return virtual_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ pyannote.ai: {e}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ pyannote.ai: {e}") from e

    def validate_api_key(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞.
        
        Returns:
            True –µ—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
            response = requests.get(
                f"{self.base_url}/test",
                headers=self.headers,
                timeout=10
            )
            response.raise_for_status()
            return True
            
        except requests.RequestException:
            return False
