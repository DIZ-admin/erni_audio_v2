#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è WER —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å (gpt-4o-transcribe) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
"""

import argparse
import logging
import sys
import os
import time
from pathlib import Path
from typing import Dict, List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # –ï—Å–ª–∏ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    env_file = Path('.env')
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

from pipeline.transcription_agent import TranscriptionAgent


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = logging.DEBUG if verbose else logging.INFO
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path('logs').mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler('logs/create_references.log', encoding='utf-8')
    file_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(level)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('openai').setLevel(logging.WARNING)


def validate_api_key() -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞"""
    openai_key = os.getenv('OPENAI_API_KEY')
    
    if not openai_key:
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á: export OPENAI_API_KEY='your-key-here'")
        sys.exit(1)
    
    print(f"‚úÖ OpenAI API –∫–ª—é—á: {openai_key[:10]}...")
    return openai_key


def find_audio_files() -> List[Tuple[Path, str]]:
    """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–æ–≤"""
    audio_files = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
    test_files = [
        ("data/raw/Testdatei.m4a", "–ù–µ–º–µ—Ü–∫–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å"),
        ("data/interim/Sitzung Erweiterte GL 17.04.2025_converted.wav", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"),
        ("data/interim/Schongiland 3_converted.wav", "–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å Schongiland"),
    ]
    
    for file_path, description in test_files:
        audio_path = Path(file_path)
        if audio_path.exists():
            audio_files.append((audio_path, description))
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {audio_path}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            print(f"   –†–∞–∑–º–µ—Ä: {audio_path.stat().st_size / (1024*1024):.2f} MB")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
    
    return audio_files


def extract_short_segment(audio_path: Path, duration_minutes: float = 2.5) -> Path:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–∞"""
    logger = logging.getLogger(__name__)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    segment_name = f"{audio_path.stem}_segment_{duration_minutes}min{audio_path.suffix}"
    segment_path = audio_path.parent / segment_name
    
    # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if segment_path.exists():
        logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç: {segment_path}")
        return segment_path
    
    try:
        logger.info(f"‚úÇÔ∏è –ò–∑–≤–ª–µ–∫–∞—é {duration_minutes} –º–∏–Ω—É—Ç –∏–∑ {audio_path.name}...")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –∏ –æ–±—Ä–µ–∑–∞–µ–º
        duration_seconds = int(duration_minutes * 60)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
        import subprocess
        
        cmd = [
            'ffmpeg', '-i', str(audio_path),
            '-t', str(duration_seconds),
            '-acodec', 'pcm_s16le',
            '-ar', '16000',
            '-ac', '1',
            str(segment_path),
            '-y'  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"‚úÖ –°–µ–≥–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {segment_path}")
            logger.info(f"   –†–∞–∑–º–µ—Ä: {segment_path.stat().st_size / (1024*1024):.2f} MB")
            return segment_path
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            # –ï—Å–ª–∏ ffmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {audio_path}")
            return audio_path
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: {e}")
        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {audio_path}")
        return audio_path


def create_reference_transcription(audio_path: Path, openai_key: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏"""
    logger = logging.getLogger(__name__)
    
    logger.info(f"üéØ –°–æ–∑–¥–∞—é —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è: {audio_path.name}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–∞
        agent = TranscriptionAgent(
            api_key=openai_key,
            model="gpt-4o-transcribe"
        )
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Ñ–∞–π–ª
        start_time = time.time()
        segments = agent.run(audio_path)
        processing_time = time.time() - start_time

        if segments:
            logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å")
            logger.info(f"   –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}")

            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            text = " ".join([segment.get('text', '') for segment in segments])
            logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(text)}")

            return text.strip()
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return ""
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–∞–ª–æ–Ω–∞: {e}")
        return ""


def save_reference_text(audio_path: Path, reference_text: str) -> Path:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª"""
    logger = logging.getLogger(__name__)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    reference_filename = f"{audio_path.stem}_accurate_reference.txt"
    reference_path = Path("data/raw") / reference_filename
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    reference_path.parent.mkdir(parents=True, exist_ok=True)
    
    try:
        with open(reference_path, 'w', encoding='utf-8') as f:
            f.write(reference_text)
        
        logger.info(f"üíæ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {reference_path}")
        logger.info(f"   –î–ª–∏–Ω–∞: {len(reference_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   –°–ª–æ–≤: {len(reference_text.split())} —Å–ª–æ–≤")
        
        return reference_path
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —ç—Ç–∞–ª–æ–Ω–∞: {e}")
        raise


def create_all_references(duration_minutes: float = 2.5, force_recreate: bool = False) -> Dict[str, Path]:
    """–°–æ–∑–¥–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    logger = logging.getLogger(__name__)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    openai_key = validate_api_key()
    
    # –ù–∞—Ö–æ–¥–∏–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
    audio_files = find_audio_files()
    if not audio_files:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–æ–≤")
        return {}
    
    logger.info(f"üìã –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {len(audio_files)} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
    logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {duration_minutes} –º–∏–Ω—É—Ç")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not force_recreate:
        confirm = input(f"\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–æ–≤? –≠—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å ~${len(audio_files) * 0.5:.2f} (y/N): ")
        if confirm.lower() != 'y':
            logger.info("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return {}
    
    created_references = {}
    total_cost = 0.0
    
    for i, (audio_path, description) in enumerate(audio_files, 1):
        logger.info(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª {i}/{len(audio_files)}: {audio_path.name}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            reference_filename = f"{audio_path.stem}_accurate_reference.txt"
            reference_path = Path("data/raw") / reference_filename
            
            if reference_path.exists() and not force_recreate:
                logger.info(f"üìÅ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {reference_path}")
                created_references[audio_path.stem] = reference_path
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç
            segment_path = extract_short_segment(audio_path, duration_minutes)
            
            # –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            reference_text = create_reference_transcription(segment_path, openai_key)
            
            if reference_text:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                saved_path = save_reference_text(audio_path, reference_text)
                created_references[audio_path.stem] = saved_path
                
                # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                estimated_cost = len(reference_text) / 1000 * 0.024  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å gpt-4o-transcribe
                total_cost += estimated_cost
                
                logger.info(f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimated_cost:.3f}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω –¥–ª—è {audio_path.name}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {audio_path.name}: {e}")
            continue
    
    logger.info(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ —ç—Ç–∞–ª–æ–Ω–æ–≤: {len(created_references)}")
    logger.info(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.3f}")
    
    return created_references


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
    parser = argparse.ArgumentParser(
        description="–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è WER —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--duration',
        type=float,
        default=2.5,
        help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2.5)'
    )
    
    parser.add_argument(
        '--force',
        action='store_true',
        help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω—ã –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)
    
    print("üéØ –°–û–ó–î–ê–ù–ò–ï –¢–û–ß–ù–´–• –≠–¢–ê–õ–û–ù–ù–´–• –¢–ï–ö–°–¢–û–í")
    print("=" * 50)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–µ API –≤—ã–∑–æ–≤—ã!")
    print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –∏ —Å—Ç–æ–∏—Ç—å –¥–µ–Ω–µ–≥!")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        created_references = create_all_references(
            duration_minutes=args.duration,
            force_recreate=args.force
        )
        
        if created_references:
            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_references)} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤:")
            for name, path in created_references.items():
                print(f"  ‚úÖ {name}: {path}")
            
            print(f"\nüìÅ –í—Å–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: data/raw/")
            print(f"üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—á–Ω–æ–µ WER —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã")
            sys.exit(1)
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–∞–ª–æ–Ω–æ–≤: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
