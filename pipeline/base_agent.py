# pipeline/base_agent.py

import logging
import time
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any, Dict, Optional, Union
import os


class BaseAgent(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ pipeline.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã
    """
    
    def __init__(self, name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            name: –ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–º—è –∫–ª–∞—Å—Å–∞)
        """
        self.name = name or self.__class__.__name__
        self.logger = logging.getLogger(self.name)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._start_time: Optional[float] = None
        self._operation_count = 0
        self._total_processing_time = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        self._error_count = 0
        self._last_error: Optional[Exception] = None
        
        self.logger.debug(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {self.name}")
    
    def start_operation(self, operation_name: str = "operation") -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self._start_time = time.time()
        self._operation_count += 1
        self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é {operation_name}...")
    
    def end_operation(self, operation_name: str = "operation", success: bool = True) -> float:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
            
        Returns:
            –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if self._start_time is None:
            self.logger.warning("‚ö†Ô∏è end_operation –≤—ã–∑–≤–∞–Ω –±–µ–∑ start_operation")
            return 0.0
        
        duration = time.time() - self._start_time
        self._total_processing_time += duration
        
        if success:
            self.logger.info(f"‚úÖ {operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f}—Å")
        else:
            self.logger.error(f"‚ùå {operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π –∑–∞ {duration:.2f}—Å")
            self._error_count += 1
        
        self._start_time = None
        return duration
    
    def log_performance_metrics(self) -> Dict[str, Any]:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        metrics = {
            "agent_name": self.name,
            "operation_count": self._operation_count,
            "total_processing_time": self._total_processing_time,
            "average_processing_time": (
                self._total_processing_time / self._operation_count 
                if self._operation_count > 0 else 0.0
            ),
            "error_count": self._error_count,
            "success_rate": (
                (self._operation_count - self._error_count) / self._operation_count * 100
                if self._operation_count > 0 else 100.0
            )
        }
        
        self.logger.info(
            f"üìä –ú–µ—Ç—Ä–∏–∫–∏ {self.name}: "
            f"{metrics['operation_count']} –æ–ø–µ—Ä–∞—Ü–∏–π, "
            f"{metrics['success_rate']:.1f}% —É—Å–ø–µ—Ö, "
            f"—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics['average_processing_time']:.2f}—Å"
        )
        
        return metrics
    
    def handle_error(self, error: Exception, operation_name: str = "operation", 
                    reraise: bool = True) -> None:
        """
        –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            reraise: –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self._last_error = error
        self._error_count += 1
        
        error_type = type(error).__name__
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {operation_name}: {error_type}: {error}")
        
        if reraise:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –≤ {self.name}.{operation_name}: {error}") from error
    
    def get_api_key(self, key_name: str, env_vars: list[str]) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        
        Args:
            key_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
            env_vars: –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞
            
        Returns:
            API –∫–ª—é—á
            
        Raises:
            ValueError: –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for env_var in env_vars:
            api_key = os.getenv(env_var)
            if api_key:
                self.logger.debug(f"üîë {key_name} –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ {env_var}")
                return api_key
        
        env_vars_str = ", ".join(env_vars)
        error_msg = f"–¢—Ä–µ–±—É–µ—Ç—Å—è {key_name} –∫–ª—é—á. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {env_vars_str}"
        self.logger.error(f"‚ùå {error_msg}")
        raise ValueError(error_msg)
    
    def log_with_emoji(self, level: str, emoji: str, message: str) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏.
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (info, warning, error, debug)
            emoji: –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        formatted_message = f"{emoji} {message}"
        
        if level == "info":
            self.logger.info(formatted_message)
        elif level == "warning":
            self.logger.warning(formatted_message)
        elif level == "error":
            self.logger.error(formatted_message)
        elif level == "debug":
            self.logger.debug(formatted_message)
        else:
            self.logger.info(formatted_message)
    
    @abstractmethod
    def run(self, *args, **kwargs) -> Any:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞.
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –∫–∞–∂–¥–æ–º –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ.
        """
        pass
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞."""
        return f"{self.name}(operations={self._operation_count}, errors={self._error_count})"
    
    def __repr__(self) -> str:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞."""
        return (
            f"{self.__class__.__name__}("
            f"name='{self.name}', "
            f"operations={self._operation_count}, "
            f"errors={self._error_count}, "
            f"total_time={self._total_processing_time:.2f}s"
            f")"
        )
