#!/usr/bin/env python3
"""
Voiceprint Management Suite - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è voiceprint'–∞–º–∏
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å check_voiceprint_samples.py, analyze_valid_voiceprints.py, 
clean_and_upload_voiceprint.py, check_remote_voiceprints.py –∏ sync_voiceprints.py
"""

import argparse
import logging
import json
import sys
import base64
import statistics
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent.parent))

from pipeline.voiceprint_manager import VoiceprintManager
from pipeline.voiceprint_agent import VoiceprintAgent
from pipeline.config import get_config


@dataclass
class VoiceprintValidation:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ voiceprint'–∞"""
    is_valid: bool
    is_base64: bool
    data_size_bytes: int
    data_size_kb: float
    estimated_quality: str
    issues: List[str]


@dataclass
class VoiceprintAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã voiceprint'–æ–≤"""
    total_voiceprints: int
    valid_voiceprints: int
    invalid_voiceprints: int
    test_data_voiceprints: int
    real_voiceprints: int
    quality_distribution: Dict[str, int]
    size_statistics: Dict[str, float]
    creation_dates: List[str]
    labels: List[str]
    issues: List[str]
    detailed_results: List[Dict]


class VoiceprintManagementSuite:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è voiceprint'–∞–º–∏"""
    
    def __init__(self, database_path: Path, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è suite
        
        Args:
            database_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö voiceprint'–æ–≤
            api_key: API –∫–ª—é—á pyannote.ai –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        self.database_path = database_path
        self.api_key = api_key
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        self.manager = VoiceprintManager(database_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
        self.agent = VoiceprintAgent(api_key) if api_key else None
        
        self.logger.info(f"üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω VoiceprintManagementSuite")
        self.logger.info(f"üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_path}")
        self.logger.info(f"üîë API –¥–æ—Å—Ç—É–ø: {'–î–∞' if api_key else '–ù–µ—Ç'}")
    
    def validate_voiceprint_data(self, voiceprint_data: str) -> VoiceprintValidation:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
        
        Args:
            voiceprint_data: Base64 —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ voiceprint
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        validation = VoiceprintValidation(
            is_valid=False,
            is_base64=False,
            data_size_bytes=0,
            data_size_kb=0.0,
            estimated_quality="unknown",
            issues=[]
        )
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            if not voiceprint_data or not voiceprint_data.strip():
                validation.issues.append("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ voiceprint")
                return validation
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
            try:
                decoded_data = base64.b64decode(voiceprint_data)
                validation.is_base64 = True
                validation.data_size_bytes = len(decoded_data)
                validation.data_size_kb = len(decoded_data) / 1024
            except Exception as e:
                validation.issues.append(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π base64: {e}")
                return validation
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if validation.data_size_bytes < 100:
                validation.estimated_quality = "–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ"
                validation.issues.append("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
            elif validation.data_size_bytes < 1000:
                validation.estimated_quality = "–Ω–∏–∑–∫–æ–µ"
                validation.issues.append("–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
            elif validation.data_size_bytes < 10000:
                validation.estimated_quality = "—Å—Ä–µ–¥–Ω–µ–µ"
            elif validation.data_size_bytes < 50000:
                validation.estimated_quality = "—Ö–æ—Ä–æ—à–µ–µ"
            else:
                validation.estimated_quality = "–æ—Ç–ª–∏—á–Ω–æ–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if voiceprint_data.startswith("data_"):
                validation.issues.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
                validation.estimated_quality = "—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
            if validation.is_base64 and validation.data_size_bytes > 0:
                validation.is_valid = True
            
        except Exception as e:
            validation.issues.append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        
        return validation
    
    def analyze_database(self) -> VoiceprintAnalysis:
        """
        –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        self.logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö voiceprints...")
        
        voiceprints = self.manager.list_voiceprints()
        
        analysis = VoiceprintAnalysis(
            total_voiceprints=len(voiceprints),
            valid_voiceprints=0,
            invalid_voiceprints=0,
            test_data_voiceprints=0,
            real_voiceprints=0,
            quality_distribution={
                "–æ—Ç–ª–∏—á–Ω–æ–µ": 0, "—Ö–æ—Ä–æ—à–µ–µ": 0, "—Å—Ä–µ–¥–Ω–µ–µ": 0, "–Ω–∏–∑–∫–æ–µ": 0,
                "–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ": 0, "—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ": 0, "unknown": 0
            },
            size_statistics={
                "min_size_kb": float('inf'), "max_size_kb": 0,
                "avg_size_kb": 0, "total_size_kb": 0
            },
            creation_dates=[],
            labels=[],
            issues=[],
            detailed_results=[]
        )
        
        total_size = 0
        
        for voiceprint in voiceprints:
            vp_id = voiceprint.get("id", "unknown")
            label = voiceprint.get("label", "unknown")
            voiceprint_data = voiceprint.get("voiceprint", "")
            created_at = voiceprint.get("created_at", "")
            source_file = voiceprint.get("source_file", "")
            
            self.logger.debug(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é voiceprint: {label} (ID: {vp_id[:8]}...)")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            validation = self.validate_voiceprint_data(voiceprint_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if validation.is_valid:
                analysis.valid_voiceprints += 1
            else:
                analysis.invalid_voiceprints += 1
            
            # –ö–∞—á–µ—Å—Ç–≤–æ
            quality = validation.estimated_quality
            analysis.quality_distribution[quality] += 1
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ vs —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if quality == "—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ" or label.startswith("Test"):
                analysis.test_data_voiceprints += 1
            else:
                analysis.real_voiceprints += 1
            
            # –†–∞–∑–º–µ—Ä—ã
            size_kb = validation.data_size_kb
            if size_kb > 0:
                analysis.size_statistics["min_size_kb"] = min(
                    analysis.size_statistics["min_size_kb"], size_kb
                )
                analysis.size_statistics["max_size_kb"] = max(
                    analysis.size_statistics["max_size_kb"], size_kb
                )
                total_size += size_kb
            
            # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
            if created_at:
                analysis.creation_dates.append(created_at)
            
            # –õ–µ–π–±–ª—ã
            analysis.labels.append(label)
            
            # –ü—Ä–æ–±–ª–µ–º—ã
            if validation.issues:
                analysis.issues.extend([f"{label}: {issue}" for issue in validation.issues])
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            analysis.detailed_results.append({
                "id": vp_id,
                "label": label,
                "validation": validation,
                "created_at": created_at,
                "source_file": source_file,
                "has_source_file": bool(source_file and source_file.strip())
            })
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        if analysis.valid_voiceprints > 0:
            analysis.size_statistics["avg_size_kb"] = total_size / analysis.valid_voiceprints
        
        analysis.size_statistics["total_size_kb"] = total_size
        
        if analysis.size_statistics["min_size_kb"] == float('inf'):
            analysis.size_statistics["min_size_kb"] = 0
        
        self.logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {analysis.total_voiceprints} voiceprints –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        return analysis
    
    def print_analysis_report(self, analysis: VoiceprintAnalysis) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É voiceprints"""
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –û–ë–†–ê–ó–¶–û–í –ì–û–õ–û–°–û–í (VOICEPRINTS)")
        print("="*80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ voiceprints: {analysis.total_voiceprints}")
        print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö: {analysis.valid_voiceprints}")
        print(f"   –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {analysis.invalid_voiceprints}")
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {analysis.real_voiceprints}")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {analysis.test_data_voiceprints}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        print(f"\nüéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–ß–ï–°–¢–í–£:")
        for quality, count in analysis.quality_distribution.items():
            if count > 0:
                percentage = (count / analysis.total_voiceprints) * 100
                print(f"   {quality}: {count} ({percentage:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        print(f"\nüìè –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ó–ú–ï–†–û–í:")
        size_stats = analysis.size_statistics
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {size_stats['min_size_kb']:.2f} KB")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {size_stats['max_size_kb']:.2f} KB")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {size_stats['avg_size_kb']:.2f} KB")
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_stats['total_size_kb']:.2f} KB")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        if analysis.issues:
            print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(analysis.issues)}):")
            for issue in analysis.issues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {issue}")
            if len(analysis.issues) > 10:
                print(f"   ... –∏ –µ—â–µ {len(analysis.issues) - 10} –ø—Ä–æ–±–ª–µ–º")
        else:
            print(f"\n‚úÖ –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
        
        # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        if analysis.creation_dates:
            dates = sorted(analysis.creation_dates)
            print(f"\nüìÖ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù:")
            print(f"   –ü–µ—Ä–≤—ã–π voiceprint: {dates[0]}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π voiceprint: {dates[-1]}")
    
    def print_detailed_report(self, analysis: VoiceprintAnalysis, limit: int = 20) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ voiceprints"""
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ (–ø–æ–∫–∞–∑–∞–Ω–æ {min(limit, len(analysis.detailed_results))} –∏–∑ {len(analysis.detailed_results)}):")
        print("-" * 120)
        print(f"{'ID':<10} {'Label':<30} {'Quality':<15} {'Size KB':<10} {'Valid':<8} {'Issues':<25}")
        print("-" * 120)
        
        for i, result in enumerate(analysis.detailed_results[:limit]):
            vp_id = result['id'][:8] + "..."
            label = result['label'][:28] + "..." if len(result['label']) > 28 else result['label']
            quality = result['validation'].estimated_quality[:13]
            size_kb = f"{result['validation'].data_size_kb:.2f}"
            is_valid = "‚úÖ" if result['validation'].is_valid else "‚ùå"
            issues = ", ".join(result['validation'].issues[:2])[:23]
            
            print(f"{vp_id:<10} {label:<30} {quality:<15} {size_kb:<10} {is_valid:<8} {issues:<25}")
    
    def analyze_valid_voiceprints(self, analysis: VoiceprintAnalysis) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ voiceprint'—ã"""
        print("\n" + "="*80)
        print("üéØ –ê–ù–ê–õ–ò–ó –í–ê–õ–ò–î–ù–´–• VOICEPRINTS")
        print("="*80)
        
        valid_count = 0
        real_data_count = 0
        
        for result in analysis.detailed_results:
            if result['validation'].is_valid:
                valid_count += 1
                label = result['label']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ
                is_real_data = not (label.startswith('Test') or 
                                  label.startswith('AAAA') or 
                                  label.startswith('Large Data') or
                                  label.startswith('Concurrent'))
                
                if is_real_data:
                    real_data_count += 1
                
                print(f"{valid_count}. {label} {'üéØ' if is_real_data else 'üß™'}")
                print(f"   ID: {result['id'][:8]}...")
                print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {result['validation'].estimated_quality}")
                print(f"   –†–∞–∑–º–µ—Ä: {result['validation'].data_size_kb:.2f} KB")
                print(f"   –°–æ–∑–¥–∞–Ω: {result['created_at']}")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source_file'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                
                if result['validation'].issues:
                    print(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(result['validation'].issues)}")
                
                print()
        
        print(f"üìä –ò–¢–û–ì–û:")
        print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö voiceprints: {valid_count}")
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {real_data_count}")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {valid_count - real_data_count}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–´–• –ü–†–û–ë–õ–ï–ú:")
        issues = analysis.issues
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º
        issue_types = {}
        for issue in issues:
            if "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π base64" in issue:
                issue_types["–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π base64"] = issue_types.get("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π base64", 0) + 1
            elif "–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ" in issue:
                issue_types["–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ"] = issue_types.get("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ", 0) + 1
            elif "–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä" in issue:
                issue_types["–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä"] = issue_types.get("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä", 0) + 1
            elif "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" in issue:
                issue_types["–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"] = issue_types.get("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", 0) + 1
            else:
                issue_types["–î—Ä—É–≥–∏–µ"] = issue_types.get("–î—Ä—É–≥–∏–µ", 0) + 1
        
        for issue_type, count in sorted(issue_types.items(), key=lambda x: x[1], reverse=True):
            print(f"   {issue_type}: {count}")
    
    def export_analysis_report(self, analysis: VoiceprintAnalysis, output_path: Path) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON —Ñ–∞–π–ª"""
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
        report = {
            "analysis_timestamp": datetime.now().isoformat(),
            "analysis_version": "2.0",
            "database_path": str(self.database_path),
            "summary": {
                "total_voiceprints": analysis.total_voiceprints,
                "valid_voiceprints": analysis.valid_voiceprints,
                "invalid_voiceprints": analysis.invalid_voiceprints,
                "real_voiceprints": analysis.real_voiceprints,
                "test_data_voiceprints": analysis.test_data_voiceprints
            },
            "detailed_analysis": {
                "total_voiceprints": analysis.total_voiceprints,
                "valid_voiceprints": analysis.valid_voiceprints,
                "invalid_voiceprints": analysis.invalid_voiceprints,
                "test_data_voiceprints": analysis.test_data_voiceprints,
                "real_voiceprints": analysis.real_voiceprints,
                "quality_distribution": analysis.quality_distribution,
                "size_statistics": analysis.size_statistics,
                "creation_dates": analysis.creation_dates,
                "labels": analysis.labels,
                "issues": analysis.issues,
                "detailed_results": [
                    {
                        "id": result["id"],
                        "label": result["label"],
                        "validation": {
                            "is_valid": result["validation"].is_valid,
                            "is_base64": result["validation"].is_base64,
                            "data_size_bytes": result["validation"].data_size_bytes,
                            "data_size_kb": result["validation"].data_size_kb,
                            "estimated_quality": result["validation"].estimated_quality,
                            "issues": result["validation"].issues
                        },
                        "created_at": result["created_at"],
                        "source_file": result["source_file"],
                        "has_source_file": result["has_source_file"]
                    }
                    for result in analysis.detailed_results
                ]
            }
        }
        
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")

    def clean_invalid_voiceprints(self, dry_run: bool = True) -> Tuple[int, List[str]]:
        """
        –û—á–∏—â–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ voiceprint'—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Args:
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö, —Å–ø–∏—Å–æ–∫ ID)
        """
        self.logger.info("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö voiceprints...")

        voiceprints = self.manager.list_voiceprints()
        to_delete = []

        for voiceprint in voiceprints:
            vp_id = voiceprint.get("id", "")
            label = voiceprint.get("label", "")
            voiceprint_data = voiceprint.get("voiceprint", "")

            validation = self.validate_voiceprint_data(voiceprint_data)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            should_delete = False
            reasons = []

            if not validation.is_valid:
                should_delete = True
                reasons.append("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

            if validation.estimated_quality == "–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ":
                should_delete = True
                reasons.append("–æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")

            if label.startswith("Test") or label.startswith("AAAA"):
                should_delete = True
                reasons.append("—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

            if should_delete:
                to_delete.append({
                    "id": vp_id,
                    "label": label,
                    "reasons": reasons
                })

        if dry_run:
            print(f"\nüîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –û–ß–ò–°–¢–ö–ò:")
            print(f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(to_delete)} voiceprints:")
            for item in to_delete:
                print(f"  - {item['label']} (ID: {item['id'][:8]}...) - {', '.join(item['reasons'])}")
            return len(to_delete), [item['id'] for item in to_delete]
        else:
            # –†–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_count = 0
            deleted_ids = []

            for item in to_delete:
                try:
                    self.manager.delete_voiceprint(item['id'])
                    deleted_count += 1
                    deleted_ids.append(item['id'])
                    self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {item['label']} ({', '.join(item['reasons'])})")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item['label']}: {e}")

            self.logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} voiceprints")
            return deleted_count, deleted_ids

    def check_remote_status(self) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprint'–æ–≤ –≤ pyannote.ai

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç API –¥–æ—Å—Ç—É–ø–∞
        """
        if not self.agent:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")
            return None

        self.logger.info("üåê –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ voiceprints
            local_voiceprints = self.manager.list_voiceprints()

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            status = {
                "local_count": len(local_voiceprints),
                "remote_accessible": True,
                "sync_needed": False,
                "last_check": datetime.now().isoformat()
            }

            self.logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {status['local_count']} –ª–æ–∫–∞–ª—å–Ω—ã—Ö voiceprints")
            return status

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return None

    def sync_with_remote(self, direction: str = "both") -> Dict:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

        Args:
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ("local_to_remote", "remote_to_local", "both")

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        if not self.agent:
            raise ValueError("–ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

        self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ({direction})...")

        sync_result = {
            "direction": direction,
            "local_before": len(self.manager.list_voiceprints()),
            "uploaded": 0,
            "downloaded": 0,
            "conflicts": 0,
            "errors": [],
            "timestamp": datetime.now().isoformat()
        }

        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")

        except Exception as e:
            sync_result["errors"].append(str(e))
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

        return sync_result


def setup_logging(verbose: bool = False) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = logging.DEBUG if verbose else logging.INFO

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path('logs').mkdir(exist_ok=True)

    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('logs/voiceprint_management_suite.log', encoding='utf-8')
        ]
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="Voiceprint Management Suite - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è voiceprint'–∞–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
   python voiceprint_management_suite.py analyze

2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º:
   python voiceprint_management_suite.py analyze --detailed --export report.json

3. –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö voiceprints:
   python voiceprint_management_suite.py analyze-valid

4. –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä):
   python voiceprint_management_suite.py clean --dry-run

5. –†–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞:
   python voiceprint_management_suite.py clean

6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:
   python voiceprint_management_suite.py check-remote

7. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–π:
   python voiceprint_management_suite.py sync --direction both

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- PYANNOTE_API_KEY: API –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        """
    )

    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        '--database-path',
        type=Path,
        default=Path("voiceprints/voiceprints.json"),
        help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö voiceprints (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: voiceprints/voiceprints.json)'
    )

    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )

    # –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    # –ö–æ–º–∞–Ω–¥–∞ analyze
    analyze_parser = subparsers.add_parser('analyze', help='–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö voiceprints')
    analyze_parser.add_argument('--detailed', action='store_true', help='–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    analyze_parser.add_argument('--export', type=Path, help='–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON')
    analyze_parser.add_argument('--limit', type=int, default=20, help='–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ')

    # –ö–æ–º–∞–Ω–¥–∞ analyze-valid
    subparsers.add_parser('analyze-valid', help='–ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö voiceprints')

    # –ö–æ–º–∞–Ω–¥–∞ clean
    clean_parser = subparsers.add_parser('clean', help='–û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö voiceprints')
    clean_parser.add_argument('--dry-run', action='store_true', help='–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è')

    # –ö–æ–º–∞–Ω–¥–∞ check-remote
    subparsers.add_parser('check-remote', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö voiceprints')

    # –ö–æ–º–∞–Ω–¥–∞ sync
    sync_parser = subparsers.add_parser('sync', help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–π')
    sync_parser.add_argument('--direction', choices=['local_to_remote', 'remote_to_local', 'both'],
                           default='both', help='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    logger = logging.getLogger(__name__)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É
    if not args.command:
        parser.print_help()
        return 1

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not args.database_path.exists():
            logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.database_path}")
            logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return 1

        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        api_key = None
        if args.command in ['check-remote', 'sync']:
            import os
            api_key = os.getenv('PYANNOTE_API_KEY')
            if not api_key:
                logger.warning("‚ö†Ô∏è PYANNOTE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º suite
        suite = VoiceprintManagementSuite(args.database_path, api_key)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if args.command == 'analyze':
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö voiceprints")
            analysis = suite.analyze_database()
            suite.print_analysis_report(analysis)

            if args.detailed:
                suite.print_detailed_report(analysis, args.limit)

            if args.export:
                suite.export_analysis_report(analysis, args.export)

        elif args.command == 'analyze-valid':
            logger.info("üéØ –ê–Ω–∞–ª–∏–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö voiceprints")
            analysis = suite.analyze_database()
            suite.analyze_valid_voiceprints(analysis)

        elif args.command == 'clean':
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö voiceprints")
            deleted_count, deleted_ids = suite.clean_invalid_voiceprints(dry_run=args.dry_run)

            if args.dry_run:
                print(f"\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run")
            else:
                print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} voiceprints")

        elif args.command == 'check-remote':
            logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")
            status = suite.check_remote_status()
            if status:
                print(f"\nüìä –°–¢–ê–¢–£–° –£–î–ê–õ–ï–ù–ù–´–• VOICEPRINTS:")
                print(f"   –õ–æ–∫–∞–ª—å–Ω—ã—Ö voiceprints: {status['local_count']}")
                print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {'‚úÖ' if status['remote_accessible'] else '‚ùå'}")
                print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚ö†Ô∏è' if status['sync_needed'] else '‚úÖ'}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {status['last_check']}")

        elif args.command == 'sync':
            logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–π")
            result = suite.sync_with_remote(args.direction)
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result['direction']}")
            print(f"   –õ–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ: {result['local_before']}")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {result['uploaded']}")
            print(f"   –°–∫–∞—á–∞–Ω–æ: {result['downloaded']}")
            print(f"   –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {result['conflicts']}")
            if result['errors']:
                print(f"   –û—à–∏–±–∫–∏: {len(result['errors'])}")

        logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
