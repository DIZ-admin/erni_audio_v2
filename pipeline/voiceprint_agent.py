"""
VoiceprintAgent –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ pyannote.ai API
"""

import logging
import time
from pathlib import Path
from typing import Dict, Optional, List
import requests
from .pyannote_media_agent import PyannoteMediaAgent
from .base_agent import BaseAgent
from .validation_mixin import ValidationMixin
from .retry_mixin import RetryMixin
from .rate_limit_mixin import RateLimitMixin


class VoiceprintAgent(BaseAgent, ValidationMixin, RetryMixin, RateLimitMixin):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ pyannote.ai Voiceprint API.

    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (‚â§30 —Å–µ–∫—É–Ω–¥),
    –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤.
    """

    def __init__(self, api_key: str, webhook_url: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VoiceprintAgent.

        Args:
            api_key: API –∫–ª—é—á pyannote.ai
            webhook_url: URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±-—Ö—É–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        BaseAgent.__init__(self, name="VoiceprintAgent")
        ValidationMixin.__init__(self)
        RetryMixin.__init__(self)
        RateLimitMixin.__init__(self, service_name="pyannote")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞
        self.validate_api_key(api_key)

        self.api_key = api_key
        self.webhook_url = webhook_url
        from .settings import SETTINGS
        self.base_url = SETTINGS.api.pyannote_url

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.media_agent = PyannoteMediaAgent(api_key)

        self.log_with_emoji("info", "‚úÖ", "VoiceprintAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def validate_api_key(self, api_key: str) -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ pyannote.ai.

        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Raises:
            ValueError: –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        """
        if not isinstance(api_key, str):
            raise ValueError(f"API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω {type(api_key)}")

        if not api_key or not api_key.strip():
            raise ValueError("API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º)
        if len(api_key.strip()) < 10:
            raise ValueError("API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")

    def validate_voiceprint_params(self, audio_file: Path, label: str) -> List[str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è voiceprint.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            label: –ú–µ—Ç–∫–∞ –¥–ª—è voiceprint

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        issues = []

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        try:
            self.validate_audio_file(audio_file)
        except ValueError as e:
            issues.append(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º: {e}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∫–∏
        if not isinstance(label, str):
            issues.append(f"–ú–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–∞ {type(label)}")
        elif not label or not label.strip():
            issues.append("–ú–µ—Ç–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
        elif len(label.strip()) > 100:
            issues.append("–ú–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")

        return issues

    def validate_voiceprint_audio_file(self, audio_file: Path, max_duration_check: bool = True) -> List[str]:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è voiceprint.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            max_duration_check: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        issues = []

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        try:
            self.validate_audio_file(audio_file)
        except ValueError as e:
            issues.append(str(e))
            return issues  # –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –¥–∞–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (‚â§100MB –¥–ª—è voiceprint)
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        if file_size_mb > 100:
            issues.append(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f}MB (–º–∞–∫—Å–∏–º—É–º 100MB)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (‚â§30 —Å–µ–∫—É–Ω–¥ –¥–ª—è voiceprint)
        if max_duration_check:
            try:
                import librosa
                duration = librosa.get_duration(path=str(audio_file))
                if duration > 30:
                    issues.append(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {duration:.1f}—Å (–º–∞–∫—Å–∏–º—É–º 30—Å)")
            except ImportError:
                issues.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Ç—Ä–µ–±—É–µ—Ç—Å—è librosa")
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

        return issues

    def create_voiceprint(self,
                         audio_file: Path,
                         label: str,
                         max_duration_check: bool = True) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Å–ø–∏–∫–µ—Ä–∞, ‚â§30—Å)
            label: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
            max_duration_check: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å–æ–≤–æ–º –æ—Ç–ø–µ—á–∞—Ç–∫–µ:
            {
                "label": str,
                "voiceprint": str (base64),
                "created_at": str,
                "source_file": str,
                "duration": float
            }
        """
        self.start_operation("—Å–æ–∑–¥–∞–Ω–∏–µ voiceprint")

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param_issues = self.validate_voiceprint_params(audio_file, label)
            if param_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {len(param_issues)}")
                for issue in param_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    self.log_with_emoji("warning", "   ", issue)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è voiceprint
            audio_issues = self.validate_voiceprint_audio_file(audio_file, max_duration_check)
            if audio_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º: {len(audio_issues)}")
                for issue in audio_issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    self.log_with_emoji("warning", "   ", issue)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                if any("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π" in issue or "—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" in issue for issue in audio_issues):
                    raise ValueError(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–æ–º: {audio_issues[0]}")

            file_size_mb = audio_file.stat().st_size / (1024 * 1024)
            self.log_with_emoji("info", "üéµ", f"–°–æ–∑–¥–∞—é voiceprint –¥–ª—è '{label}': {audio_file.name} ({file_size_mb:.1f}MB)")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ pyannote.ai –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.log_with_emoji("info", "üì§", "–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ pyannote.ai...")
            media_url = self.media_agent.upload_file(audio_file)
            self.log_with_emoji("info", "‚úÖ", f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_url}")

            # –°–æ–∑–¥–∞–µ–º voiceprint job
            job_id = self._submit_voiceprint_job(media_url)
            self.log_with_emoji("info", "üöÄ", f"Voiceprint job –∑–∞–ø—É—â–µ–Ω: {job_id}")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            voiceprint_data = self._wait_for_completion(job_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "label": label,
                "voiceprint": voiceprint_data,
                "created_at": time.strftime("%Y-%m-%d %H:%M:%S"),
                "source_file": str(audio_file),
                "file_size_mb": file_size_mb
            }

            self.log_with_emoji("info", "‚úÖ", f"Voiceprint —Å–æ–∑–¥–∞–Ω –¥–ª—è '{label}'")
            self.end_operation("—Å–æ–∑–¥–∞–Ω–∏–µ voiceprint", success=True)

            return result

        except Exception as e:
            self.end_operation("—Å–æ–∑–¥–∞–Ω–∏–µ voiceprint", success=False)
            self.handle_error(e, f"—Å–æ–∑–¥–∞–Ω–∏–µ voiceprint –¥–ª—è '{label}'", reraise=True)
    
    # –ú–µ—Ç–æ–¥ _validate_audio_file —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è validate_voiceprint_audio_file
    
    def _submit_voiceprint_job(self, media_url: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ voiceprint —Å rate limiting."""
        url = f"{self.base_url}/voiceprint"

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "url": media_url
        }

        if self.webhook_url:
            data["webhook"] = self.webhook_url
            self.log_with_emoji("info", "üîó", f"Webhook URL –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è voiceprint: {self.webhook_url}")

        def _submit_request():
            response = requests.post(url, json=data, headers=headers, timeout=30)

            if response.status_code != 200:
                error_msg = f"HTTP {response.status_code}"
                try:
                    error_detail = response.json().get("detail", "Unknown error")
                    error_msg += f": {error_detail}"
                except:
                    error_msg += f": {response.text}"
                raise RuntimeError(f"–û—à–∏–±–∫–∞ pyannote.ai API: {error_msg}")

            return response.json()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å rate limiting
        result = self.with_rate_limit(_submit_request, "voiceprint")
        return result["jobId"]
    
    def _wait_for_completion(self, job_id: str, max_wait_seconds: int = 300) -> str:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è voiceprint job –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 voiceprint —Å retry –ª–æ–≥–∏–∫–æ–π."""
        url = f"{self.base_url}/jobs/{job_id}"
        headers = {"Authorization": f"Bearer {self.api_key}"}

        def _check_job_status():
            response = requests.get(url, headers=headers, timeout=30)

            if response.status_code != 200:
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ job: HTTP {response.status_code}")

            job_data = response.json()
            status = job_data.get("status")

            if status == "succeeded":
                voiceprint = job_data.get("output", {}).get("voiceprint")
                if not voiceprint:
                    raise RuntimeError("Voiceprint –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
                return voiceprint

            elif status == "failed":
                error_msg = job_data.get("output", {}).get("error", "Unknown error")
                raise RuntimeError(f"Voiceprint job failed: {error_msg}")

            elif status == "canceled":
                raise RuntimeError("Voiceprint job –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")

            elif status in ["created", "processing", "running"]:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                raise RuntimeError("not-ready")

            else:
                raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å voiceprint job: {status}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º retry —Å rate limiting
        try:
            return self.retry_with_backoff(
                lambda: self.with_rate_limit(_check_job_status, "poll"),
                max_attempts=max_wait_seconds // 2,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                base_delay=2.0,
                max_delay=10.0,
                exceptions=(RuntimeError, requests.RequestException)
            )
        except Exception as e:
            if "not-ready" in str(e):
                raise RuntimeError(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è voiceprint job ({max_wait_seconds}—Å)")
            raise
    
    def estimate_cost(self, audio_file: Path) -> Dict[str, any]:
        """
        –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint.
        
        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å voiceprint –≤ pyannote.ai (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        # –û–±—ã—á–Ω–æ —ç—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ voiceprint
        estimated_cost = 0.01  # –ü—Ä–∏–º–µ—Ä–Ω–æ $0.01 –∑–∞ voiceprint
        
        return {
            "estimated_cost_usd": estimated_cost,
            "file_size_mb": round(file_size_mb, 1),
            "note": "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"
        }

    def create_voiceprint_async(self, audio_file: Path, label: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Å–ø–∏–∫–µ—Ä–∞, ‚â§30—Å)
            label: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Raises:
            ValueError: –ï—Å–ª–∏ webhook_url –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        self.start_operation("—Å–æ–∑–¥–∞–Ω–∏–µ voiceprint (async)")

        try:
            if not self.webhook_url:
                raise ValueError("webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param_issues = self.validate_voiceprint_params(audio_file, label)
            if param_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {len(param_issues)}")
                for issue in param_issues[:3]:
                    self.log_with_emoji("warning", "   ", issue)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            audio_issues = self.validate_voiceprint_audio_file(audio_file, max_duration_check=True)
            if audio_issues:
                self.log_with_emoji("warning", "‚ö†Ô∏è", f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º: {len(audio_issues)}")
                for issue in audio_issues[:3]:
                    self.log_with_emoji("warning", "   ", issue)

            file_size_mb = audio_file.stat().st_size / (1024 * 1024)
            self.log_with_emoji("info", "üöÄ", f"–ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ voiceprint –¥–ª—è '{label}': {audio_file.name} ({file_size_mb:.1f}MB)")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ pyannote.ai –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.log_with_emoji("info", "üì§", "–ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ pyannote.ai...")
            media_url = self.media_agent.upload_file(audio_file)
            self.log_with_emoji("info", "‚úÖ", f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_url}")

            # –°–æ–∑–¥–∞–µ–º voiceprint job —Å webhook
            job_id = self._submit_voiceprint_job(media_url)
            self.log_with_emoji("info", "‚úÖ", f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π voiceprint job –∑–∞–ø—É—â–µ–Ω: {job_id}")
            self.log_with_emoji("info", "üì°", f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.webhook_url}")

            self.end_operation("—Å–æ–∑–¥–∞–Ω–∏–µ voiceprint (async)", success=True)
            return job_id

        except Exception as e:
            self.end_operation("—Å–æ–∑–¥–∞–Ω–∏–µ voiceprint (async)", success=False)
            self.handle_error(e, "–∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint", reraise=True)
