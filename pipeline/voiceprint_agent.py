"""
VoiceprintAgent –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ pyannote.ai API
"""

import logging
import time
from pathlib import Path
from typing import Dict, Optional
import requests
from .pyannote_media_agent import PyannoteMediaAgent


class VoiceprintAgent:
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ pyannote.ai Voiceprint API.
    
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (‚â§30 —Å–µ–∫—É–Ω–¥),
    –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∏–∫–µ—Ä–æ–≤.
    """
    
    def __init__(self, api_key: str, webhook_url: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VoiceprintAgent.

        Args:
            api_key: API –∫–ª—é—á pyannote.ai
            webhook_url: URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±-—Ö—É–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.api_key = api_key
        self.webhook_url = webhook_url
        self.base_url = "https://api.pyannote.ai/v1"
        self.logger = logging.getLogger(__name__)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.media_agent = PyannoteMediaAgent(api_key)

        self.logger.info("‚úÖ VoiceprintAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_voiceprint(self, 
                         audio_file: Path, 
                         label: str,
                         max_duration_check: bool = True) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
        
        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Å–ø–∏–∫–µ—Ä–∞, ‚â§30—Å)
            label: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞
            max_duration_check: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ–ª–æ—Å–æ–≤–æ–º –æ—Ç–ø–µ—á–∞—Ç–∫–µ:
            {
                "label": str,
                "voiceprint": str (base64),
                "created_at": str,
                "source_file": str,
                "duration": float
            }
        """
        start_time = time.time()
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            self._validate_audio_file(audio_file, max_duration_check)
            
            file_size_mb = audio_file.stat().st_size / (1024 * 1024)
            self.logger.info(f"üéµ –°–æ–∑–¥–∞—é voiceprint –¥–ª—è '{label}': {audio_file.name} ({file_size_mb:.1f}MB)")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ pyannote.ai –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.logger.info("üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ pyannote.ai...")
            media_url = self.media_agent.upload_file(audio_file)
            self.logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_url}")
            
            # –°–æ–∑–¥–∞–µ–º voiceprint job
            job_id = self._submit_voiceprint_job(media_url)
            self.logger.info(f"üöÄ Voiceprint job –∑–∞–ø—É—â–µ–Ω: {job_id}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            voiceprint_data = self._wait_for_completion(job_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "label": label,
                "voiceprint": voiceprint_data,
                "created_at": time.strftime("%Y-%m-%d %H:%M:%S"),
                "source_file": str(audio_file),
                "duration": time.time() - start_time,
                "file_size_mb": file_size_mb
            }
            
            duration = time.time() - start_time
            self.logger.info(f"‚úÖ Voiceprint —Å–æ–∑–¥–∞–Ω –¥–ª—è '{label}' –∑–∞ {duration:.2f}—Å")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint –¥–ª—è '{label}': {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint: {e}") from e
    
    def _validate_audio_file(self, audio_file: Path, check_duration: bool = True) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è voiceprint."""
        if not audio_file.exists():
            raise FileNotFoundError(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ª–∏–º–∏—Ç pyannote.ai: 100MB)
        if file_size_mb > 100:
            raise ValueError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f}MB (–º–∞–∫—Å–∏–º—É–º 100MB)")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ª–∏–º–∏—Ç pyannote.ai: 30 —Å–µ–∫—É–Ω–¥)
        if check_duration:
            try:
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
                # –î–ª—è WAV 16kHz mono: ~1MB ‚âà 30 —Å–µ–∫—É–Ω–¥
                estimated_duration = file_size_mb * 30
                if estimated_duration > 30:
                    self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥ (~{estimated_duration:.1f}—Å)")
                    self.logger.warning("‚ö†Ô∏è pyannote.ai –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è voiceprint")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ü–µ–Ω–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    def _submit_voiceprint_job(self, media_url: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ voiceprint."""
        url = f"{self.base_url}/voiceprint"
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "url": media_url
        }

        if self.webhook_url:
            data["webhook"] = self.webhook_url
            self.logger.info(f"üîó Webhook URL –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è voiceprint: {self.webhook_url}")
        
        response = requests.post(url, json=data, headers=headers, timeout=30)
        
        if response.status_code != 200:
            error_msg = f"HTTP {response.status_code}"
            try:
                error_detail = response.json().get("detail", "Unknown error")
                error_msg += f": {error_detail}"
            except:
                error_msg += f": {response.text}"
            raise RuntimeError(f"–û—à–∏–±–∫–∞ pyannote.ai API: {error_msg}")
        
        result = response.json()
        return result["jobId"]
    
    def _wait_for_completion(self, job_id: str, max_wait_seconds: int = 300) -> str:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è voiceprint job –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 voiceprint."""
        url = f"{self.base_url}/jobs/{job_id}"
        headers = {"Authorization": f"Bearer {self.api_key}"}
        
        start_time = time.time()
        retry_count = 0
        
        while time.time() - start_time < max_wait_seconds:
            try:
                response = requests.get(url, headers=headers, timeout=30)
                
                if response.status_code != 200:
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ job: HTTP {response.status_code}")
                
                job_data = response.json()
                status = job_data.get("status")
                
                if status == "succeeded":
                    voiceprint = job_data.get("output", {}).get("voiceprint")
                    if not voiceprint:
                        raise RuntimeError("Voiceprint –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
                    return voiceprint
                
                elif status == "failed":
                    error_msg = job_data.get("output", {}).get("error", "Unknown error")
                    raise RuntimeError(f"Voiceprint job failed: {error_msg}")
                
                elif status == "canceled":
                    raise RuntimeError("Voiceprint job –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
                
                elif status in ["created", "processing", "running"]:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                    retry_count += 1
                    if retry_count <= 5:
                        self.logger.debug(f"Voiceprint job {job_id} –≤ —Å—Ç–∞—Ç—É—Å–µ '{status}', –∂–¥–µ–º...")
                    elif retry_count % 10 == 0:
                        elapsed = time.time() - start_time
                        self.logger.info(f"‚è≥ Voiceprint job {job_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —É–∂–µ {elapsed:.1f}—Å...")

                    time.sleep(2)
                    continue
                
                else:
                    raise RuntimeError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å voiceprint job: {status}")
                    
            except requests.RequestException as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ voiceprint job: {e}")
                time.sleep(5)
                continue
        
        raise RuntimeError(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è voiceprint job ({max_wait_seconds}—Å)")
    
    def estimate_cost(self, audio_file: Path) -> Dict[str, any]:
        """
        –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint.
        
        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ü–µ–Ω–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        """
        file_size_mb = audio_file.stat().st_size / (1024 * 1024)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å voiceprint –≤ pyannote.ai (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        # –û–±—ã—á–Ω–æ —ç—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ voiceprint
        estimated_cost = 0.01  # –ü—Ä–∏–º–µ—Ä–Ω–æ $0.01 –∑–∞ voiceprint
        
        return {
            "estimated_cost_usd": estimated_cost,
            "file_size_mb": round(file_size_mb, 1),
            "note": "–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"
        }

    def create_voiceprint_async(self, audio_file: Path, label: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–µ–±-—Ö—É–∫–æ–º.

        Args:
            audio_file: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 —Å–ø–∏–∫–µ—Ä–∞, ‚â§30—Å)
            label: –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞

        Returns:
            job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Raises:
            ValueError: –ï—Å–ª–∏ webhook_url –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        if not self.webhook_url:
            raise ValueError("webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            self._validate_audio_file(audio_file, max_duration_check=True)

            file_size_mb = audio_file.stat().st_size / (1024 * 1024)
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ voiceprint –¥–ª—è '{label}': {audio_file.name} ({file_size_mb:.1f}MB)")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ pyannote.ai –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.logger.info("üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ pyannote.ai...")
            media_url = self.media_agent.upload_file(audio_file)
            self.logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_url}")

            # –°–æ–∑–¥–∞–µ–º voiceprint job —Å webhook
            job_id = self._submit_voiceprint_job(media_url)
            self.logger.info(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π voiceprint job –∑–∞–ø—É—â–µ–Ω: {job_id}")
            self.logger.info(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {self.webhook_url}")

            return job_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint: {e}")
            raise
