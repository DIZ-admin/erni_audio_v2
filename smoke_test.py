#!/usr/bin/env python3
# smoke_test.py

"""
Smoke test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Speech Pipeline.

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç:
1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª
2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–≥–µ–Ω—Ç—ã
4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–∫ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python smoke_test.py                    # –ë–∞–∑–æ–≤—ã–π smoke test
    python smoke_test.py --with-api-keys    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
    python smoke_test.py --create-sample    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
"""

import argparse
import os
import sys
import tempfile
import time
from pathlib import Path
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

def create_test_audio_file(output_path: Path) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª"""
    # –ü—Ä–æ—Å—Ç–æ–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è 1 —Å–µ–∫—É–Ω–¥—ã –º–æ–Ω–æ –∞—É–¥–∏–æ 16kHz
    wav_header = (
        b'RIFF'
        b'\x24\x08\x00\x00'  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 8
        b'WAVE'
        b'fmt '
        b'\x10\x00\x00\x00'  # –†–∞–∑–º–µ—Ä fmt chunk
        b'\x01\x00'          # PCM —Ñ–æ—Ä–º–∞—Ç
        b'\x01\x00'          # –ú–æ–Ω–æ
        b'\x80\x3e\x00\x00'  # 16000 Hz
        b'\x00\x7d\x00\x00'  # Byte rate
        b'\x02\x00'          # Block align
        b'\x10\x00'          # Bits per sample
        b'data'
        b'\x00\x08\x00\x00'  # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    )
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (—Ç–∏—à–∏–Ω–∞)
    audio_data = b'\x00\x00' * 16000  # 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
    
    with open(output_path, 'wb') as f:
        f.write(wav_header + audio_data)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª: {output_path}")


def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from pipeline.audio_agent import AudioLoaderAgent
        from pipeline.diarization_agent import DiarizationAgent
        from pipeline.transcription_agent import TranscriptionAgent
        from pipeline.merge_agent import MergeAgent
        from pipeline.export_agent import ExportAgent
        from pipeline.security_validator import SECURITY_VALIDATOR
        from pipeline.rate_limiter import PYANNOTE_RATE_LIMITER
        from pipeline.monitoring import PERFORMANCE_MONITOR
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_security_validation():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        from pipeline.security_validator import SECURITY_VALIDATOR
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
        is_valid, message = SECURITY_VALIDATOR.validate_url("https://example.com/test.wav")
        if not is_valid:
            print(f"‚ùå URL –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {message}")
            return False
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ URL
        is_valid, message = SECURITY_VALIDATOR.validate_url("http://example.com/test.wav")
        if is_valid:
            print("‚ùå HTTP URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            return False
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_rate_limiting():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã rate limiting"""
    print("‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting...")
    
    try:
        from pipeline.rate_limiter import PYANNOTE_RATE_LIMITER, OPENAI_RATE_LIMITER
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ rate limiters –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        pyannote_remaining = PYANNOTE_RATE_LIMITER.get_remaining_requests("test")
        openai_remaining = OPENAI_RATE_LIMITER.get_remaining_requests("test")
        
        if pyannote_remaining <= 0 or openai_remaining <= 0:
            print("‚ùå Rate limiters –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
        
        print(f"‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç (Pyannote: {pyannote_remaining}, OpenAI: {openai_remaining})")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ rate limiting: {e}")
        return False


def test_audio_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    print("üéµ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
            create_test_audio_file(Path(tmp_file.name))
            
            from pipeline.audio_agent import AudioLoaderAgent
            
            # –ú–æ–∫–∏—Ä—É–µ–º API –∫–ª—é—á –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
            with patch('pipeline.pyannote_media_agent.PyannoteMediaAgent.validate_api_key') as mock_validate:
                mock_validate.return_value = True
                
                agent = AudioLoaderAgent(pyannote_api_key="test_key")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                converted_path = agent.to_wav16k_mono(tmp_file.name)
                
                if not converted_path.exists():
                    print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    return False
                
                print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –û—á–∏—Å—Ç–∫–∞
                os.unlink(tmp_file.name)
                if converted_path.exists():
                    os.unlink(converted_path)
                
                return True
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return False


def test_pipeline_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –º–æ–∫ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    try:
        from pipeline.merge_agent import MergeAgent
        from pipeline.export_agent import ExportAgent
        
        # –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
        mock_diarization = [
            {"start": 0.0, "end": 2.5, "speaker": "SPEAKER_00", "confidence": 0.95},
            {"start": 2.5, "end": 5.0, "speaker": "SPEAKER_01", "confidence": 0.90}
        ]
        
        mock_transcription = [
            {"start": 0.0, "end": 2.5, "text": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"},
            {"start": 2.5, "end": 5.0, "text": "–í—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!"}
        ]
        
        # –¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
        merge_agent = MergeAgent()
        merged_segments = merge_agent.run(mock_diarization, mock_transcription)
        
        if len(merged_segments) != 2:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(merged_segments)}")
            return False
        
        # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_agent = ExportAgent("srt")
        
        with tempfile.NamedTemporaryFile(suffix=".srt", delete=False) as tmp_file:
            export_agent.run(merged_segments, Path(tmp_file.name))
            
            if not Path(tmp_file.name).exists():
                print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(tmp_file.name, 'r', encoding='utf-8') as f:
                content = f.read()
                if "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?" not in content:
                    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    return False
            
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –û—á–∏—Å—Ç–∫–∞
            os.unlink(tmp_file.name)
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False


def test_with_api_keys():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)"""
    print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...")
    
    pyannote_key = os.getenv("PYANNOTEAI_API_TOKEN") or os.getenv("PYANNOTE_API_KEY")
    openai_key = os.getenv("OPENAI_API_KEY")
    
    if not pyannote_key:
        print("‚ö†Ô∏è API –∫–ª—é—á Pyannote –Ω–µ –Ω–∞–π–¥–µ–Ω (PYANNOTEAI_API_TOKEN)")
        return False
    
    if not openai_key:
        print("‚ö†Ô∏è API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω (OPENAI_API_KEY)")
        return False
    
    try:
        from pipeline.pyannote_media_agent import PyannoteMediaAgent
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pyannote –∫–ª—é—á–∞
        agent = PyannoteMediaAgent(pyannote_key)
        if not agent.validate_api_key():
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Pyannote")
            return False
        
        print("‚úÖ API –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description="Smoke test –¥–ª—è Speech Pipeline")
    parser.add_argument("--with-api-keys", action="store_true", help="–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏")
    parser.add_argument("--create-sample", action="store_true", help="–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª")
    
    args = parser.parse_args()
    
    print("üöÄ Speech Pipeline Smoke Test")
    print("=" * 50)
    
    if args.create_sample:
        sample_path = Path("samples/smoke_test.wav")
        sample_path.parent.mkdir(exist_ok=True)
        create_test_audio_file(sample_path)
        return
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", test_security_validation),
        ("Rate limiting", test_rate_limiting),
        ("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ", test_audio_conversion),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞", test_pipeline_integration),
    ]
    
    if args.with_api_keys:
        tests.append(("API –∫–ª—é—á–∏", test_with_api_keys))
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    passed = 0
    total = len(tests)
    
    start_time = time.time()
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}...")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    end_time = time.time()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f}s")
    
    if passed == total:
        print("üéâ –í—Å–µ smoke —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –±–∞–∑–æ–≤–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
