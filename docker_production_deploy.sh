#!/bin/bash

# =============================================================================
# Production Deployment Script –¥–ª—è Erni Audio v2
# =============================================================================

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
check_env_file() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞..."
    
    if [[ ! -f .env ]]; then
        log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
        if [[ -f .env.example ]]; then
            cp .env.example .env
            log_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏!"
            log_warning "–û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:"
            log_warning "  - PYANNOTEAI_API_TOKEN"
            log_warning "  - OPENAI_API_KEY"
            log_warning "  - REPLICATE_API_TOKEN"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞..."
        else
            log_error ".env.example –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é."
            exit 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    source .env
    
    if [[ -z "${PYANNOTEAI_API_TOKEN:-}" ]]; then
        log_error "PYANNOTEAI_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"
        exit 1
    fi
    
    if [[ -z "${OPENAI_API_KEY:-}" ]]; then
        log_error "OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env"
        exit 1
    fi
    
    log_success ".env —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build_image() {
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    
    docker build -t erni-audio-v2:latest .
    
    if [[ $? -eq 0 ]]; then
        log_success "Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p data/raw data/interim data/processed
    mkdir -p voiceprints
    mkdir -p logs/metrics logs/health_reports
    mkdir -p cache
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ–º..."
    
    if [[ -f docker_test.py ]]; then
        python3 docker_test.py --quick
        if [[ $? -ne 0 ]]; then
            log_error "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
            exit 1
        fi
        log_success "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    fi
    
    if [[ -f docker_functional_test.py ]]; then
        python3 docker_functional_test.py --quick
        if [[ $? -ne 0 ]]; then
            log_error "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
            exit 1
        fi
        log_success "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    fi
}

# –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ
deploy() {
    log_info "–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ production —Å—Ä–µ–¥—ã..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose down --remove-orphans
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose up -d
    
    if [[ $? -eq 0 ]]; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if docker-compose ps | grep -q "Up"; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
    else
        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å"
        docker-compose logs
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–æ 60 —Å–µ–∫—É–Ω–¥)..."
    for i in {1..12}; do
        if docker-compose exec -T erni-audio python health_check.py --json > /dev/null 2>&1; then
            log_success "Health check –ø—Ä–æ–π–¥–µ–Ω"
            break
        fi
        
        if [[ $i -eq 12 ]]; then
            log_error "Health check –Ω–µ –ø—Ä–æ—à—ë–ª –∑–∞ 60 —Å–µ–∫—É–Ω–¥"
            docker-compose logs erni-audio
            exit 1
        fi
        
        sleep 5
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏
show_deployment_info() {
    log_success "üéâ Production —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo
    log_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö:"
    docker-compose ps
    echo
    log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
    echo "  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π pipeline: http://localhost:8000"
    echo "  ‚Ä¢ Webhook —Å–µ—Ä–≤–µ—Ä: http://localhost:8001"
    echo "  ‚Ä¢ Health check: http://localhost:8000/health"
    echo
    log_info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  ‚Ä¢ –õ–æ–≥–∏: docker-compose logs -f"
    echo "  ‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose ps"
    echo "  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
    echo "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo
    log_info "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "  ‚Ä¢ –õ–æ–≥–∏: tail -f logs/*.log"
    echo "  ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏: ls -la logs/metrics/"
    echo "  ‚Ä¢ Health reports: ls -la logs/health_reports/"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üê≥ Erni Audio v2 - Production Deployment"
    echo "========================================"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    SKIP_TESTS=false
    SKIP_BUILD=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --skip-tests)
                SKIP_TESTS=true
                shift
                ;;
            --skip-build)
                SKIP_BUILD=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo "–û–ø—Ü–∏–∏:"
                echo "  --skip-tests   –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
                echo "  --skip-build   –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä–∫—É –æ–±—Ä–∞–∑–∞"
                echo "  --help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                exit 0
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ
    check_dependencies
    check_env_file
    create_directories
    
    if [[ "$SKIP_BUILD" != true ]]; then
        build_image
    fi
    
    if [[ "$SKIP_TESTS" != true ]]; then
        run_tests
    fi
    
    deploy
    health_check
    show_deployment_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log_error "–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ"; exit 130' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
