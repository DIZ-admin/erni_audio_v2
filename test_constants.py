#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_constants():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã...")
    
    try:
        from pipeline.constants import (
            TARGET_SAMPLE_RATE,
            API_ENDPOINTS,
            HTTP_STATUS,
            SUPPORTED_TRANSCRIPTION_MODELS,
            DEFAULT_MAX_FILE_SIZE_MB
        )
        
        print(f"‚úÖ TARGET_SAMPLE_RATE = {TARGET_SAMPLE_RATE}")
        print(f"‚úÖ API_ENDPOINTS = {list(API_ENDPOINTS.keys())}")
        print(f"‚úÖ HTTP_STATUS = {list(HTTP_STATUS.keys())}")
        print(f"‚úÖ SUPPORTED_TRANSCRIPTION_MODELS = {list(SUPPORTED_TRANSCRIPTION_MODELS.keys())}")
        print(f"‚úÖ DEFAULT_MAX_FILE_SIZE_MB = {DEFAULT_MAX_FILE_SIZE_MB}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç: {e}")
        return False

def test_settings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['OPENAI_API_URL'] = 'https://test.openai.com/v1'
        os.environ['MAX_FILE_SIZE_MB'] = '100'
        os.environ['OPENAI_RATE_LIMIT'] = '25'
        
        from pipeline.settings import SETTINGS
        
        print(f"‚úÖ SETTINGS.api.openai_url = {SETTINGS.api.openai_url}")
        print(f"‚úÖ SETTINGS.processing.max_file_size_mb = {SETTINGS.processing.max_file_size_mb}")
        print(f"‚úÖ SETTINGS.api.openai_rate_limit = {SETTINGS.api.openai_rate_limit}")
        print(f"‚úÖ SETTINGS.paths.data_dir = {SETTINGS.paths.data_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        SETTINGS.validate()
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –∞–≥–µ–Ω—Ç–∞—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –∞–≥–µ–Ω—Ç–∞—Ö...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ audio_agent
        with open('pipeline/audio_agent.py', 'r') as f:
            content = f.read()
            if 'from .constants import TARGET_SAMPLE_RATE' in content:
                print("‚úÖ audio_agent.py: –∏–º–ø–æ—Ä—Ç TARGET_SAMPLE_RATE")
            else:
                print("‚ùå audio_agent.py: –∏–º–ø–æ—Ä—Ç TARGET_SAMPLE_RATE –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ TARGET_SAMPLE_RATE –≤–º–µ—Å—Ç–æ TARGET_SR
        if 'TARGET_SR' in content:
            print("‚ö†Ô∏è audio_agent.py: –Ω–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ TARGET_SR")
        else:
            print("‚úÖ audio_agent.py: TARGET_SR –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º qc_agent
        with open('pipeline/qc_agent.py', 'r') as f:
            content = f.read()
            if 'from .constants import' in content:
                print("‚úÖ qc_agent.py: –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
            else:
                print("‚ùå qc_agent.py: –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_env_example():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º .env.example"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º .env.example...")
    
    try:
        with open('.env.example', 'r') as f:
            content = f.read()
        
        new_vars = [
            'OPENAI_API_URL',
            'PYANNOTE_API_URL', 
            'OPENAI_CONNECTION_TIMEOUT',
            'MAX_FILE_SIZE_MB',
            'MAX_CONCURRENT_JOBS',
            'MIN_CONFIDENCE_THRESHOLD'
        ]
        
        found_vars = []
        for var in new_vars:
            if var in content:
                found_vars.append(var)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_vars)}/{len(new_vars)} –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env.example")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {found_vars}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ .env.example: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n")
    
    results = []
    results.append(test_constants())
    results.append(test_settings())
    results.append(test_imports())
    results.append(test_env_example())
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sum(results)}/{len(results)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(results) - sum(results)}/{len(results)}")
    
    if all(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
