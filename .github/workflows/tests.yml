name: 🧪 Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Запуск каждый день в 6:00 UTC
    - cron: '0 6 * * *'

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 libmagic-dev
        
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python tests/install_test_dependencies.py

    - name: 🧪 Run quick tests
      run: |
        python tests/run_tests.py --quick --verbose

    - name: 📊 Generate coverage report
      run: |
        python tests/generate_coverage_report.py
        
    - name: 📤 Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: tests/reports/
        
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: tests/reports/coverage.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 libmagic-dev
        
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python tests/install_test_dependencies.py

    - name: 🔗 Run integration tests
      run: |
        python tests/run_tests.py --integration --verbose
      env:
        # Используем тестовые ключи для интеграционных тестов
        OPENAI_API_KEY: test-key
        PYANNOTE_API_KEY: test-key
        REPLICATE_API_TOKEN: test-token

  docker-tests:
    name: 🐳 Docker Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐍 Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: 📦 Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests
        
    - name: 🐳 Run Docker tests
      run: |
        python tests/run_tests.py --docker --verbose
        
    - name: 📤 Upload Docker test reports
      uses: actions/upload-artifact@v3
      with:
        name: docker-test-reports
        path: logs/docker_tests/

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 libmagic-dev
        
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python tests/install_test_dependencies.py

    - name: ⚡ Run performance tests
      run: |
        python tests/run_tests.py --performance --verbose
        
    - name: 📊 Generate performance report
      run: |
        python -m pytest tests/ -m performance --json-report --json-report-file=tests/reports/performance.json

  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: 📦 Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        
    - name: 🔍 Run linting (non-blocking)
      run: |
        flake8 pipeline/ tests/ --max-line-length=120 --statistics --exit-zero || echo "Linting issues found but not blocking"

    - name: 🎨 Check code formatting (non-blocking)
      run: |
        black --check --diff pipeline/ tests/ || echo "Formatting issues found but not blocking"
        isort --check-only --diff pipeline/ tests/ || echo "Import sorting issues found but not blocking"

    - name: 🔒 Security check (non-blocking)
      run: |
        mkdir -p tests/reports
        bandit -r pipeline/ -f json -o tests/reports/security.json || echo "Security check completed with warnings"
        safety check --json --output tests/reports/safety.json || echo "Safety check completed with warnings"
        
    - name: 📤 Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: tests/reports/

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test, integration-tests, docker-tests, code-quality]
    if: always()
    
    steps:
    - name: 📊 Collect results
      run: |
        echo "Test Results Summary:"
        echo "Unit Tests: ${{ needs.test.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Docker Tests: ${{ needs.docker-tests.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        
    - name: ✅ Success notification
      if: needs.test.result == 'success' && needs.docker-tests.result == 'success' && needs.code-quality.result == 'success'
      run: |
        echo "🎉 All tests passed successfully!"
        
    - name: ❌ Failure notification
      if: needs.test.result == 'failure' || needs.docker-tests.result == 'failure' || needs.code-quality.result == 'failure'
      run: |
        echo "❌ Some tests failed. Check the logs for details."
        exit 1
