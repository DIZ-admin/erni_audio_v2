#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ gpt-4o-transcribe
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def test_transcription_agent_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ TranscriptionAgent"""
    try:
        from pipeline.transcription_agent import TranscriptionAgent
        print("‚úÖ –ò–º–ø–æ—Ä—Ç TranscriptionAgent —É—Å–ø–µ—à–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_supported_models():
    """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        from pipeline.transcription_agent import TranscriptionAgent
        
        models = TranscriptionAgent.get_available_models()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π:")
        
        for model_name, model_info in models.items():
            print(f"  - {model_name}: {model_info['name']} ({model_info['cost_tier']} cost)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
        expected_models = ["whisper-1", "gpt-4o-mini-transcribe", "gpt-4o-transcribe"]
        for model in expected_models:
            if model in models:
                print(f"‚úÖ –ú–æ–¥–µ–ª—å {model} –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"‚ùå –ú–æ–¥–µ–ª—å {model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_agent_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    try:
        from pipeline.transcription_agent import TranscriptionAgent
        
        models_to_test = ["whisper-1", "gpt-4o-mini-transcribe", "gpt-4o-transcribe"]
        
        for model in models_to_test:
            try:
                agent = TranscriptionAgent("test_api_key", model, language="en")
                model_info = agent.get_model_info()
                print(f"‚úÖ –ê–≥–µ–Ω—Ç {model} —Å–æ–∑–¥–∞–Ω: {model_info['name']}")
                
                # –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                cost = agent.estimate_cost(10.0)
                print(f"  üí∞ –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è 10MB: {cost}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ {model}: {e}")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

def test_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['OPENAI_API_KEY'] = 'test_key'
        os.environ['PYANNOTE_API_KEY'] = 'test_key'
        
        from pipeline.config import ConfigurationManager, TranscriptionConfig
        
        config_manager = ConfigurationManager()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcription_config = config_manager.get_transcription_config()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞: –º–æ–¥–µ–ª—å {transcription_config.model}")
        
        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
        config_manager.set_transcription_model("gpt-4o-transcribe")
        updated_config = config_manager.get_transcription_config()
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {updated_config.model}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
        model_info = config_manager.get_transcription_model_info()
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: {model_info['name']}")
        
        # –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        estimates = config_manager.estimate_transcription_cost(5.0)
        print("‚úÖ –û—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:")
        for model, cost in estimates.items():
            print(f"  - {model}: {cost}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_command_line_args():
    """–¢–µ—Å—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        import argparse
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ speech_pipeline.py
        parser = argparse.ArgumentParser()
        parser.add_argument("input")
        parser.add_argument("--transcription-model", 
                           choices=["whisper-1", "gpt-4o-mini-transcribe", "gpt-4o-transcribe"],
                           default="whisper-1")
        parser.add_argument("--language")
        parser.add_argument("--show-cost-estimate", action="store_true")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        test_args = ["test.wav", "--transcription-model", "gpt-4o-transcribe", "--language", "en"]
        args = parser.parse_args(test_args)
        
        print(f"‚úÖ –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:")
        print(f"  - –ú–æ–¥–µ–ª—å: {args.transcription_model}")
        print(f"  - –Ø–∑—ã–∫: {args.language}")
        print(f"  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å: {args.show_cost_estimate}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ gpt-4o-transcribe")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_transcription_agent_import),
        ("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏", test_supported_models),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", test_agent_creation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π", test_config_integration),
        ("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏", test_command_line_args),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    exit(main())
