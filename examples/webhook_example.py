#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–±-—Ö—É–∫–æ–≤ pyannote.ai –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é —Å –≤–µ–±-—Ö—É–∫–∞–º–∏
3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ voiceprints
4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–ø–∏–∫–µ—Ä–æ–≤
"""

import os
import sys
import time
import asyncio
import logging
from pathlib import Path
from threading import Thread

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from pipeline.webhook_server import WebhookServer
from pipeline.diarization_agent import DiarizationAgent
from pipeline.voiceprint_agent import VoiceprintAgent
from pipeline.identification_agent import IdentificationAgent


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def start_webhook_server_background():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        os.environ["PYANNOTEAI_WEBHOOK_SECRET"] = "whs_example_secret_12345"
        os.environ["WEBHOOK_SERVER_PORT"] = "8000"
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        
        server = WebhookServer()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        def handle_diarization(event):
            logger.info(f"üé§ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {event.job_id}")
            if event.status == "succeeded":
                segments = event.output.get("diarization", [])
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for i, segment in enumerate(segments):
                    logger.info(f"  –°–µ–≥–º–µ–Ω—Ç {i+1}: {segment['start']:.1f}s - {segment['end']:.1f}s, —Å–ø–∏–∫–µ—Ä: {segment['speaker']}")
        
        def handle_voiceprint(event):
            logger.info(f"üë§ Voiceprint —Å–æ–∑–¥–∞–Ω: {event.job_id}")
            if event.status == "succeeded":
                voiceprint = event.output.get("voiceprint")
                if voiceprint:
                    logger.info(f"‚úÖ Voiceprint –≥–æ—Ç–æ–≤ (—Ä–∞–∑–º–µ—Ä: {len(voiceprint)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        def handle_identify(event):
            logger.info(f"üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {event.job_id}")
            if event.status == "succeeded":
                identification = event.output.get("identification", [])
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(identification)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                for i, segment in enumerate(identification):
                    speaker = segment.get('speaker', 'Unknown')
                    confidence = segment.get('confidence', 0)
                    logger.info(f"  –°–µ–≥–º–µ–Ω—Ç {i+1}: {segment['start']:.1f}s - {segment['end']:.1f}s, —Å–ø–∏–∫–µ—Ä: {speaker} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        server.register_event_handler("diarization", handle_diarization)
        server.register_event_handler("voiceprint", handle_voiceprint)
        server.register_event_handler("identify", handle_identify)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.run(debug=False)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")


async def example_async_diarization():
    """–ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    logger.info("=" * 60)
    logger.info("üéØ –ü–†–ò–ú–ï–† –ê–°–ò–ù–•–†–û–ù–ù–û–ô –î–ò–ê–†–ò–ó–ê–¶–ò–ò")
    logger.info("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç —Å webhook URL
    agent = DiarizationAgent(
        api_key="your_pyannote_api_key",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        webhook_url="http://localhost:8000/webhook"
    )
    
    # –ü—Ä–∏–º–µ—Ä URL –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    audio_url = "media://example-audio-file"
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
        job_id = agent.diarize_async(audio_url)
        logger.info(f"‚úÖ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {job_id}")
        logger.info("üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ webhook URL")
        
        return job_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None


async def example_async_voiceprint():
    """–ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint"""
    logger.info("=" * 60)
    logger.info("üë§ –ü–†–ò–ú–ï–† –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø VOICEPRINT")
    logger.info("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç —Å webhook URL
    agent = VoiceprintAgent(
        api_key="your_pyannote_api_key",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        webhook_url="http://localhost:8000/webhook"
    )
    
    # –ü—Ä–∏–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è voiceprint (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    audio_file = Path("examples/speaker_sample.wav")
    
    try:
        if not audio_file.exists():
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {audio_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞")
            audio_file.parent.mkdir(exist_ok=True)
            audio_file.write_bytes(b"fake audio content for example")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ voiceprint
        job_id = agent.create_voiceprint_async(audio_file, "John Doe")
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ voiceprint –∑–∞–ø—É—â–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {job_id}")
        logger.info("üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ webhook URL")
        
        return job_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è voiceprint: {e}")
        return None


async def example_async_identification():
    """–ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    logger.info("=" * 60)
    logger.info("üîç –ü–†–ò–ú–ï–† –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    logger.info("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç —Å webhook URL
    agent = IdentificationAgent(
        api_key="your_pyannote_api_key",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        webhook_url="http://localhost:8000/webhook"
    )
    
    # –ü—Ä–∏–º–µ—Ä voiceprints (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    voiceprints = [
        {"label": "John Doe", "voiceprint": "base64_encoded_voiceprint_data_1"},
        {"label": "Jane Smith", "voiceprint": "base64_encoded_voiceprint_data_2"}
    ]
    
    # –ü—Ä–∏–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    audio_file = Path("examples/meeting.wav")
    
    try:
        if not audio_file.exists():
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {audio_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞")
            audio_file.parent.mkdir(exist_ok=True)
            audio_file.write_bytes(b"fake meeting audio content for example")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        job_id = agent.run_async(
            audio_file=audio_file,
            voiceprints=voiceprints,
            matching_threshold=0.5
        )
        logger.info(f"‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {job_id}")
        logger.info("üì° –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ webhook URL")
        
        return job_id
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    logger.info("üåü –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í–ï–ë-–•–£–ö–û–í PYANNOTE.AI")
    logger.info("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    webhook_thread = Thread(target=start_webhook_server_background, daemon=True)
    webhook_thread.start()
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    await asyncio.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        import requests
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            logger.error("‚ùå Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ webhook —Å–µ—Ä–≤–µ—Ä—É: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PYANNOTEAI_WEBHOOK_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    job_ids = []
    
    # –ü—Ä–∏–º–µ—Ä 1: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è
    diarization_job = await example_async_diarization()
    if diarization_job:
        job_ids.append(("diarization", diarization_job))
    
    await asyncio.sleep(1)
    
    # –ü—Ä–∏–º–µ—Ä 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ voiceprint
    voiceprint_job = await example_async_voiceprint()
    if voiceprint_job:
        job_ids.append(("voiceprint", voiceprint_job))
    
    await asyncio.sleep(1)
    
    # –ü—Ä–∏–º–µ—Ä 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    identification_job = await example_async_identification()
    if identification_job:
        job_ids.append(("identification", identification_job))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    logger.info("=" * 60)
    logger.info("üìã –ó–ê–ü–£–©–ï–ù–ù–´–ï –ê–°–ò–ù–•–†–û–ù–ù–´–ï –ó–ê–î–ê–ß–ò")
    logger.info("=" * 60)
    
    for job_type, job_id in job_ids:
        logger.info(f"üîÑ {job_type.capitalize()}: {job_id}")
    
    logger.info("=" * 60)
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    logger.info("üì° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã webhook —Å–µ—Ä–≤–µ—Ä–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ data/interim/")
    logger.info("üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    logger.info("=" * 60)
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞)
    try:
        while True:
            await asyncio.sleep(10)
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ webhook —Å–æ–±—ã—Ç–∏–π...")
    except KeyboardInterrupt:
        logger.info("\nüëã –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path("data/interim").mkdir(parents=True, exist_ok=True)
    Path("logs").mkdir(exist_ok=True)
    Path("examples").mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüëã –ü—Ä–∏–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
